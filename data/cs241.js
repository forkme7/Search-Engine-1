// Data structure that holds captions for the videos
var videoCaptions =[
  // Video 1
  [{"text":"Okay welcome to systems programming","width":200},{"text":"so let's get started","width":51},{"text":"let's write our first c program","width":103},{"text":"that makes use of a system call","width":144},{"text":"i'll do an example and then I'll let you play as well","width":219},{"text":"so uh here's a little virtual machine","width":146},{"text":"i've got up and running","width":122},{"text":"and i can write a little c file here","width":158},{"text":"so what we're going to do is make use of a system call called write","width":306},{"text":"so let's try this","width":52},{"text":"we'll say okay write","width":102},{"text":"and then i need to give it a file descriptor","width":213},{"text":"more about that in a moment","width":84},{"text":"a little message like hello","width":201},{"text":"and then the number of characters or bytes that i actually want to send here","width":267},{"text":"so h e l l o","width":179},{"text":"that's five bytes we're going to send","width":238},{"text":"so let's try compiling this","width":203},{"text":"and once that's going we'll see that whoops","width":233},{"text":"we've got a little bit of a problem here","width":118},{"text":"that write was not declared before","width":248},{"text":"okay so the c compiler here is warning us that we're trying to call a function called write which hasn't yet been declared","width":538},{"text":"so we could declare it","width":109},{"text":"now i happen to know for example that the write signature looks a little something like this","width":261},{"text":"it takes um, it's called write ","width":200},{"text":"it takes a file descriptor which is going to be an integer","width":161},{"text":"it takes a pointer to a character","width":183},{"text":"and it takes another integer which is the number of characters to write","width":273},{"text":"so it looks a little bit like that","width":97},{"text":"in fact it takes a void pointer which means point to it without any particular type","width":600},{"text":"so i could attempt to compile this for example","width":220},{"text":"see if this works","width":152},{"text":"and oh ho ho","width":34},{"text":"if we look at the left hand side","width":80},{"text":"we can see we managed to compile a program called program here","width":252},{"text":"and when we ran it we got hello","width":102},{"text":"alright so let's do a little better then that though","width":240},{"text":"rather than me having to manually write the declaration in here","width":313},{"text":"these are already included inside an existing file which I get for free","width":326},{"text":"it's actually unistd.h","width":229},{"text":"okay so let's tell the preprocessor to read in the contents of the file","width":251},{"text":"go in and find a file named unistd.h","width":179},{"text":"and include all the text that is in that file","width":179},{"text":"okay so now when we run this","width":193},{"text":"we'll compile it and run it and great it prints out hello","width":167},{"text":"if i wanted to print out hello with a new line","width":194},{"text":"let's increment this to six","width":154},{"text":"and now i've got a program called Hello","width":166},{"text":"okay great and of course i could make my program print out hello world and do it on two different lines","width":752},{"text":"alright so uh that's my program working","width":171},{"text":"now it's time for you to play","width":120},{"text":"you create which uses a system call write","width":237},{"text":"to write a little message on the two lines","width":219},{"text":"see you in the next video after you've said hello to the world","width":255},{"text":"bye","width":133}],
  // Video 2
  [{"text":"so let's talk more about that file descriptor","width":185},{"text":"I'm gonna make my program be a little bit more useful by printing out \"Hello World\" a few times","width":325},{"text":"so for example, I have a variable 'count' here and a little for-loop","width":335},{"text":"Start with count equal to five, while count is greater than zero","width":275},{"text":"each time around the loop we're going to decrement 'count'","width":270},{"text":"In C, there is no boolean type.","width":183},{"text":"instead, if I've got an integer value which is nonzero, that is treated as a true value","width":385},{"text":"So, I could actually write this more tersely just by saying \"hey, count!\"","width":323},{"text":"meaning is count a non-zero value","width":193},{"text":"and if you compare two things, you'll learn that with an integer value of either 0 or 1 to mean for example if they are either the same or different","width":497},{"text":"so, we're going to print out \"hello world\" 5 times","width":442},{"text":"I want to show you just a little idea here that actually I've got two file descriptors which are valid when my program starts.","width":519},{"text":"And they're called 1 and 2.","width":174},{"text":"Why might it be useful to have two output streams?","width":236},{"text":"well, you can imagine we have a program that is calculating something","width":266},{"text":"for example it's thinking of something to say or it's going to write to a file","width":282},{"text":"but we may also want to display some error messages back to the user","width":190},{"text":"or we might want to print some progress information","width":360},{"text":"the first output stream identified by the number '1' is the regular output, standard output","width":456},{"text":"The second one is reserved for error messages.","width":354},{"text":"Let's, for example, use this. Instead of error messages, we'll put a little dot to see this","width":419},{"text":"We'll run this and we should (if we got everything correct) see \"Hello\" and...lib lib lib lib","width":771},{"text":"Now, why do we see \".lib\", because we said \"hey, I'm going to give you a pointer and I want you to use that pointer and take the next 6 bytes from it which is the next  six character","width":886},{"text":"So we just got whatever happened to be in memory after our dot. So, we only wanted to do the dot","width":646},{"text":"Change that and run it again","width":195},{"text":"And great, we've got Hello and dot Hello dot Hello","width":195},{"text":"So, right now, both the output and the standard error are going to different places","width":352},{"text":"we could actually change that over here in the console before we start the program","width":277},{"text":"Our terminal can actually control where the output goes","width":256},{"text":"So, for example, I might say, I want to take the standard output and put that into a file.","width":344},{"text":"So, \"output.txt\"","width":153},{"text":"So now, if I run this before the program starts, I'm going to redirect it's output into this new file","width":531},{"text":"Okay, so what we see on the console output is anything written to standard error","width":308},{"text":"The standard output is inside output.txt","width":196},{"text":"To prove it, let me have a look at that file.","width":205},{"text":"Let me cat that file","width":94},{"text":"So, output.txt","width":145},{"text":"And here it is! It says \"hello, hello, hello, hello\"","width":239},{"text":"Now, rather than writing 1 and 2 over here, perhaps we should actually have some constants","width":359},{"text":"which signify what those values actually mean","width":238},{"text":"so we could say start define things to say have a constant here, I'll call it say \"STDOUT_FILENO 1\"","width":707},{"text":"And I'll say define STDERRFILENO 2","width":480},{"text":"so anytime you do hash define, you're talking to the preprocessor to say \"hey, in the future, parts of this file, if you come across this character sequence, then replace it (in this case) with either a 1 or a 2 depending on what it is\"","width":1084},{"text":"We can compile this, except I've got a surprise for you which is that these particular macros are already defined inside unistd.h","width":705},{"text":"So, I don't actually need to define them here in my program.","width":302},{"text":"So that's my little program. You see it's got a return value of zero. Which is a convention for being correct (no errors)","width":636},{"text":"But it's up to us. We could choose a different value, for example we could choose the value 42.","width":555},{"text":"And, I don't see an output value, but I can find out what the last exit value was of the last process","width":569},{"text":"Let me print it out","width":133},{"text":"It happens to be inside special variables","width":140},{"text":"so I could say \"Hello terminal value of this dollar question mark.\"","width":308},{"text":"which means give me the exit value (or the exit status) of the last command run.","width":347},{"text":"So there's our forty-two.","width":153},{"text":"Okay so, we've covered quite a bit of ground. We've talked about how in C, any non-zero integer is considered \"true\"","width":804},{"text":"and zero is considered \"false\"","width":235},{"text":"And, we've talked about these two different output streams. Now it's your turn to play with this. After that, let's have a go at creating some new files directly from C","width":831},{"text":"by making system calls","width":160},{"text":"So, now it's your turn. Have fun playing! Bye.","width":300}],
  // Video 3
  [{"text":"Welcome so let's start creating some files","width":334},{"text":"for that we can use the system call open()","width":194},{"text":"and for open we need to say whether we want to append to an existing file, create a brand new file, and we need to give it a filename","width":683},{"text":"For example, I might have a file name called \"output.txt\"","width":396},{"text":"so the open call takes 2 or 3 arguments. the second argument will be exactly what we want to do","width":557},{"text":"so in this case we want to say create a brand new file and truncate it back to 0 if it doesn't exist","width":469},{"text":"so, I want to truncate as well","width":237},{"text":"if we are creating a new file we better say who can read this file and who can write to this file and who can execute this file","width":533},{"text":"so we are going to have to say something about the mode flags ","width":346},{"text":"who is allowed to do what","width":89},{"text":"finally this call is going to give us back an integer, a file descriptor","width":272},{"text":"just like we've seen so far with file number 1 and file number 2","width":211},{"text":"so lets store that inside a little variable","width":219},{"text":"ok, so now I better actually find out what the correct syntax is","width":374},{"text":"and the correct arguments are in order to create a file","width":301},{"text":"so lets go and look that up","width":153},{"text":"and that we'll find inside the manual","width":187},{"text":"And, if, for example, I type \"man open\" on a command line on a real linux machine. it doesn't quite work yet in my small virtual one. we didn't have enough memory to include all the manual pages yet","width":887},{"text":"but heres a linux manual page I found on the web for the open()","width":342},{"text":"and you'll see here's the function signature here","width":301},{"text":"where we're going to pass in an integer for the flags and the mode type","width":297},{"text":"so, I'm going to look up now the flags I need to open and create a new file","width":463},{"text":"I don't want to do append()","width":106},{"text":"I want to use \"create\" and I want to truncate it as well","width":404},{"text":"let's include \"O_CREAT\" here. I'm going to say \"O_CREAT\" which is a constant and I'm going to bitwise OR it with the flag to say \"truncate\" so let's look that up as well","width":1309},{"text":"alright and i want to say when i open it that i am going to open it for say reading and writing","width":592},{"text":"so let us grab that as well","width":220},{"text":"so that is the first thing","width":160},{"text":"now we need to do the mode","width":109},{"text":"Let's write this as a variable.","width":134},{"text":"and there is actually a typedef","width":192},{"text":"it is essentially an integer but it is wrapped up in this type here called mode","width":520},{"text":"mode_t","width":79},{"text":"and we'll say that with our file we want to be fairly private and only the owner of the file can access it","width":594},{"text":"Let's go back up and find those flags, where are you? Here we go.","width":387},{"text":"We'll say that the user has read and write permission","width":343},{"text":"We'll copy the read one and we'll have write permission as well.","width":839},{"text":"But no one else in my linux system will be allowed to read it and write it.","width":476},{"text":"So that's the permissions we want","width":216},{"text":"What can we do with this?","width":82},{"text":"Well let's write something out to this file.","width":473},{"text":"We will write a little message \"Great!\" and a newline","width":506},{"text":"so how many characters is that? I've got \"one, two, three, four, five, six, and a new line so that's seven characters\"","width":612},{"text":"then we'll close this file descriptor meaning we don't want to use this descriptor anymore","width":436},{"text":"that will ensure as well that all of the bytes that we send to the file stream have been saved","width":621},{"text":"We're not doing any error checking right now, we're just trying to write the smallest possible program to create a file and send something to it","width":563},{"text":"let's run this and see what we get","width":239},{"text":"we'll run into an error which is: we haven't defined what this mode_t is","width":370},{"text":"what we forgot to do, was to do the includes","width":149},{"text":"the good news is that the man pages tell us which includes we need to put at the top of our program","width":637},{"text":"so let's grab those and insert them in here","width":285},{"text":"i will just get the formatting correct","width":279},{"text":"and, run it again","width":410},{"text":"Right so our program ran and it's still printing \"Hello\" to standard out and dot to standard error","width":418},{"text":"but hopefully, it also secretly created another file","width":215},{"text":"let's have a look at that file","width":136},{"text":"I can do \"ls\" and see if anything exists starting with \"out\"","width":493},{"text":"yes we've got output.txt. great!","width":140},{"text":"let's look at the contents of that file","width":154},{"text":"and it says \"Great!\" Fantastic","width":102},{"text":"Right so now it's your turn to play: create a file and see if you can send some bytes to that file.","width":518},{"text":"so you'll be using open(), write(), and close(). Bye.","width":296}],
  // Video 4
  [{"text":"Hello, suppose we want to actually print out some integer values","width":312},{"text":"write() doesn't give us that fuctionality","width":206},{"text":"write() is the low level call that we make to the operating system","width":252},{"text":"to say \"look, here's a pointer to some memory and please take so many bytes from that memory and send it out to a file\"","width":527},{"text":"or, possibly, another device","width":113},{"text":"if we want to change a bit pattern into a sequence of characters because we want to read, say, one-seven for the value seventeen","width":533},{"text":"that's not something that the system does","width":118},{"text":"instead, we've got some C standard library calls that we can call","width":256},{"text":"that do this for us","width":144},{"text":"and they will wrap the call to write()","width":186},{"text":"so as an example, let's try printing something out","width":329},{"text":"we can say \"printf my value is\"","width":387},{"text":"and I can say \"%d\"","width":134},{"text":"this means that the next argument I give in printf() better be an integer value","width":444},{"text":"so the bit pattern we pass to printf() will be treated as an integer","width":294},{"text":"to be displayed","width":73},{"text":"so let's have a little variable called result","width":220},{"text":"and I can say result is sixty five","width":404},{"text":"if I attempt to run this, we're using printf(), we haven't declared it beforehand so we get a warning","width":490},{"text":"to say \"oh, you're just using it.\" and, what we should've done is actually declare the function signature of printf()","width":580},{"text":"and that I know from looking at the man pages","width":248},{"text":"is inside stdio.h","width":195},{"text":"if you're coming from a cpp background, there's no IO streams","width":234},{"text":"we dont have operator overloading. instead, let's use printf()","width":211},{"text":"so we've got \"my value is 65\"","width":153},{"text":"and, you'll see that actually this was printed out after the hello hello hello hello","width":572},{"text":"here's why: printf() has a buffer. the C libraries have a buffer","width":250},{"text":"so it's only going to call write() when that buffer is full","width":248},{"text":"or if we explicitly tell it to","width":103},{"text":"or if we finish a line","width":157},{"text":"so let's put a newline in here and run it again","width":280},{"text":"this time, we've compiled it, and we should see that \"my value is 65\" appear before my hellos","width":523},{"text":"so this time, because we sent a new line, printf() will be making that call to write()","width":443},{"text":"to send its buffer out to standard out","width":347},{"text":"so now we can actually print out the value of our file descriptor","width":318},{"text":"let's do that. after we've opened our file, I'll send \"fildes is\" and, we will print out fildes.","width":1358},{"text":"and, let's get rid of the first one","width":157},{"text":"and let's flush our little buffer by sending in a newline","width":409},{"text":"and we'll see that our value is three","width":363},{"text":"so, we've opened up a file descriptor who's value is three","width":206},{"text":"in fact, that is expected by specification because if we successfully open a file, we'll get back the lowest unused integer (the lowest unused file descriptor)","width":809},{"text":"as one and two are already being used, we get back three","width":215},{"text":"so just for fun, let's actually close one of the existing file descriptors before we do the open()","width":547},{"text":"so let's close standard error","width":235},{"text":"I'm sorry, we'll close standard out","width":252},{"text":"and, we won't close our own file descriptor until the very end of the program here","width":545},{"text":"so I'm going to move that line down to here","width":164},{"text":"great, so, let's run this","width":457},{"text":"so, what did we do? we opened a file descriptor and now if we look at the output of the program, you'll see we're only getting our dots printed out on standard error","width":720},{"text":"why is that?","width":63},{"text":"what happened to our standard output?","width":63},{"text":"well, we better check out file output.text","width":221},{"text":"and you'll see that everything printed to standard out has been sent to our file","width":435},{"text":"why? because when we called open(), it gave us back a file descriptor for stream number one. and, that is the. that is where all the standard output is going to go","width":895},{"text":"so, all future output is being sent to our file","width":250},{"text":"this is a neat way if you'd like to do logging","width":252},{"text":"and we've just changed our program so that all future output goes to output.text","width":459},{"text":"now what if we've got a problem with open() ?","width":199},{"text":"right now, our code doesn't check for any error","width":221},{"text":"and, a better program would actually check the return values of our different calls","width":369},{"text":"for example, it could be that open() could fail. suppose, for example, we gave it a bad file descriptor","width":675},{"text":"now so we can see what's going on, I'm not going to close standard out anymore.","width":316},{"text":"I'm just going to give it a bad file name","width":234},{"text":"now, our program compiles correctly of course","width":192},{"text":"but this time our file descriptor is negative one","width":211},{"text":"so, we should check that","width":215},{"text":"in fact, if we check the man page of open(), it's always a good idea to check the section called \"return value\"","width":475},{"text":"and you'll see, it's specified here that we'll get back a negative one if an error occurred","width":318},{"text":"so the last thing we'll do today is let's capture that and quit if we get a bad error","width":340},{"text":"so, if fildes equals negative one","width":227},{"text":"a common error is to write equals instead of double equals for comparison","width":371},{"text":"and we want to quit here","width":171},{"text":"so we'll leave our program, so let's exit with a value","width":238},{"text":"to say: \"hey, we couldn't carry on\"","width":250},{"text":"I could've returned zero but I wanted to show you an alternative way to quit a C program is to call exit","width":327},{"text":"and we'll print out an error","width":398},{"text":"so, something bad happened while calling open","width":228},{"text":"so, we'll use perror()","width":269},{"text":"let's run this","width":246},{"text":"and, I get some implicit problem here that we're calling exit(). I need to find the right #include to call for that.","width":734},{"text":"but, you'll see on the lefthand side that we've got open() failed, so that's the part of the error message that I supplied","width":487},{"text":"followed by a colon followed by no such file or directories","width":213},{"text":"so it's complaining that my file name is bad","width":292},{"text":"if I had included a dot here, this is also an invalid file name because a single dot corresponds to the current directory","width":542},{"text":"and, it's complaining that it can't open that because dot corresponds to a directory","width":414},{"text":"so now it's your turn to play. bye!","width":240}],
  // Video 5
  [{"text":"Hi, so C is designed to be a portable language in a sense that we could write a C compiler for many many different hardware architectures","width":542},{"text":"from small embedded machines to large mainframes","width":284},{"text":"so C does not specify a precise number of bits required for, say, and integer","width":394},{"text":"instead it specifies minimums that should be supported by the architecture","width":348},{"text":"let's have a look at that. let's see how we can find out how large or small of numbers we can store in different types","width":385},{"text":"and also how many bytes each different type is ","width":209},{"text":"and even further, what is a byte?","width":183},{"text":"so let's start with our integers","width":152},{"text":"I could say hello but what's the largest value I can store inside my integer type?","width":438},{"text":"fortunately, there's some macros, some constants, defined inside limits.h","width":677},{"text":"let's find out what these are","width":209},{"text":"the int min and max is going to be %d and %d and INT_MIN and INT_MAX","width":753},{"text":"so, we'll print that out. I'll get rid of my unnecessary variable here","width":240},{"text":"let's run that","width":91},{"text":"and we see that on this particular machine, that an integer can represent numbers from roughly minus 2 billion to plus 2 billion","width":649},{"text":"a very wide range of numbers","width":135},{"text":"C promises that we'll be able to store the numbers between minus 32768 and plus 32767","width":460},{"text":"in other words, an integer will be at least 16 bits","width":292},{"text":"what else do we have? how about a character?","width":180},{"text":"well, here's a surprising thing, a character is one byte","width":225},{"text":"so what do we mean by byte?","width":113},{"text":"surely we mean 8 bits? no.","width":224},{"text":"though we often say a byte means 8 bits in modern parlance, it doesn't have to be true","width":421},{"text":"and in fact, C is very careful to say that a byte does not mean 8 bits","width":294},{"text":"it means at least 8 bits","width":101},{"text":"our character, then, is at least 8 bits","width":184},{"text":"so why this distinction?","width":122},{"text":"well, in being portable, C needs to be able to read and write every bit inside memory and each bit inside each memory should only live inside one addressable memory location","width":875},{"text":"and, it could be that architecture have very different numbers of bits it can read or write","width":515},{"text":"for example, an early PDP machine had a 36 bit wide addressable memory","width":394},{"text":"so, C does not attempt to say it's going to be exactly 8 bits","width":396},{"text":"so how do we find out how many bits are actually in a character?","width":254},{"text":"well, again, the limits.h includes a useful constants here","width":404},{"text":"a character is %d bytes","width":197},{"text":"let's go and see what that is","width":114},{"text":"so CHAR_BITS","width":129},{"text":"and we'll print that out","width":471},{"text":"on this architecture, a character is 8 bits","width":181},{"text":"that's typical on modern machines","width":283},{"text":"so what if I wanted to know the actual number of bytes in different types?","width":247},{"text":"for that, we have something called sizeof","width":306},{"text":"we can give it a type and it will tell us how many bytes (or if you prefer, how many characters) are required to hold that particular kind","width":468},{"text":"so for example, let's find out how big an integer is on this machine","width":334},{"text":"perhaps you can guess the answer already","width":136},{"text":"so, sizeof int is %d and we'll have a newline as well","width":903},{"text":"is it any surprise that the size of an integer on this particular machine happens to be 4 bytes","width":354},{"text":"and that's not surprising because we need thirty two bits to represent all numbers between minus two billion and plus two billion","width":529},{"text":"there are other integer types you'll see things like short (which is generally shorter than an int), long (which is generally longer), long long (which is even longer, still)","width":843},{"text":"and compilers even occasionally provide their own custom types as well","width":257},{"text":"notice as well that these types are signed","width":422},{"text":"so we can represent negative numbers and plus numbers","width":176},{"text":"C also provides the idea of being able to say that we can have an unsigned version","width":450},{"text":"so, for example, I can have an unsigned int","width":255},{"text":"now there is no signed bit that is included in the bitwise representation","width":439},{"text":"so that's great if you wanted to represent all the numbers between zero and 4 billion on this particular machine","width":355},{"text":"the character type can actually be signed or unsigned","width":343},{"text":"depending on the particular implementation of the C language for this particular architecture","width":404},{"text":"so that's enough for now","width":142},{"text":"in the next video, we will talk about pointers","width":137},{"text":"now it's time for you to play and learn a little bit about the basic C primitives. Bye!","width":394}],
  // Video 6
  [{"text":"Now let's talk about pointers and arrays","width":224},{"text":"how might I make an array of integers?","width":179},{"text":"let's say I had some data and I did this","width":241},{"text":"well, on this particular architecture we just found out that an integer is four bytes","width":272},{"text":"so I've now got thirty two bytes of storage","width":226},{"text":"and in fact, it's going to be thirty two bytes on the stack","width":209},{"text":"so what do I have here?","width":120},{"text":"when I say data square brackets eight, I'm going to get back four times eight, thirty two bytes all together","width":456},{"text":"all contiguous in memory","width":117},{"text":"and in fact, data is going to point to  the very first four bytes","width":240},{"text":"so I've got four bytes and then four bytes and then four bytes and then four bytes and so on","width":364},{"text":"let's have a look at that","width":116},{"text":"so, if I say printf data is at and this time do %p, that means treat data as and print it out as an address","width":760},{"text":"so we'll print this out","width":538},{"text":"and we see we've got a value here in memory","width":253},{"text":"that data points to the very first element","width":191},{"text":"let's do something a little bit surprising here","width":133},{"text":"let's add one to data and print that out","width":257},{"text":"so, data plus one","width":161},{"text":"and we'll do data plus two","width":244},{"text":"and so on","width":626},{"text":"so, if we look over here at our output, we'll see that each time we add one, our address in hexadecimal is going up by four each time","width":563},{"text":"so we've got 9d40, 9d44, 9d48","width":323},{"text":"here's why","width":43},{"text":"when you add an integer to an address pointer","width":308},{"text":"C knows the type of that pointer","width":209},{"text":"so in this case, we're pointing at integers","width":135},{"text":"so each time we add one, we actually want to progress to the next integer stored in memory","width":306},{"text":"and as each integer takes four bytes, that's why our address is going up by four each time","width":483},{"text":"so how could I use this?","width":101},{"text":"well, one way is to use asterisk which means use the address so, for example, I can say data the parenthesis are not strictly necessary but we'll use them in a moment","width":941},{"text":"and let's say store the value a hundred in there","width":188},{"text":"what about if I wanted to store some value at the next entry?","width":383},{"text":"ok so, hundred, hundred one","width":123},{"text":"so now I've stored the value a hundred that integer pattern into the first four bytes","width":376},{"text":"and the integer pattern for a hundred and one in the next four bytes","width":358},{"text":"and I guess you could figure out what this would do as well","width":374},{"text":"the asterisks means use the pointer follow the pointer dereference the pointer","width":409},{"text":"in other word, we've got an expression which is a memory address, now I want to use it","width":291},{"text":"now I actually want to use that pattern that bitwise pattern to actually read or write some memory","width":469},{"text":"so that's what the asterisk does means actually okay it's time to go and talk to memory","width":288},{"text":"this is so useful with arrays","width":127},{"text":"there is an alternative syntax which is to use the square brackets","width":228},{"text":"so for example I could have written the following","width":300},{"text":"which means take my address pointer add two to it and use that address for the array","width":473},{"text":"so these last two lines are the same","width":133},{"text":"in fact, here's a little secret about C that I could actually swap these around","width":319},{"text":"so we could also write this in this slightly crazy way","width":418},{"text":"so this is crazy but actually two square bracket data would evaluate to the same thing","width":396},{"text":"so that's something to confuse your non-C friends with","width":377},{"text":"that's enough with me playing with integer pointers","width":272},{"text":"now, it's your turn. Bye!","width":188}],
  // Video 7
  [{"text":"so what about strings in c?","width":131},{"text":"what if I said","width":99},{"text":"\"hello\"","width":79},{"text":"how is this represented? well clearly it's made up of characters","width":214},{"text":"and I've got five characters to display","width":218},{"text":"h e l l o, but actually C strings contain an extra character at the end","width":325},{"text":"a zero value or null character to say \"hey this is the end of the string\"","width":383},{"text":"so this is going to take six bytes of storage","width":196},{"text":"let's see if we can prove that","width":106},{"text":"we'll say printf() and \"Size of hello is %d\"","width":420},{"text":"and we'll have a little expression here to say what is the sizeof() \"hello\"","width":658},{"text":"and we'll print it out and you see that size of hello is 6","width":477},{"text":"h e l l o that's five, plus an extra byte for the 0 to say that's the end","width":410},{"text":"so we can use sizeof() on constant strings","width":339},{"text":"we could also run through the string to actually find the 0 byte ourselves","width":408},{"text":"so let's do that","width":79},{"text":"let's have a pointer to a character","width":279},{"text":"I will initialize it to my string \"hello\"","width":347},{"text":"which means pointer is initially pointing to h the first character","width":448},{"text":"I'll have a little count variable here","width":161},{"text":"and let's say \"while the pointer the value is not equal to 0\"","width":676},{"text":"I want to do something","width":83},{"text":"lets increment the pointer","width":72},{"text":"lets move it onto the next character","width":115},{"text":"and let's increment our count as well","width":185},{"text":"so we can find out how many characters we have","width":261},{"text":"and then at the end we will say how many characters we found","width":461},{"text":"which are not the 0 byte","width":276},{"text":"so if our program works this should find five characters","width":324},{"text":"lets run it and i'll put in a new line at the end","width":707},{"text":"our little loop went around five times and all it did was increment count","width":302},{"text":"we could have made it of course print out each one of those letters","width":254},{"text":"we could also simplify our program a little bit","width":142},{"text":"because as you know any non-zero value is treated as true","width":342},{"text":"so let's remove that and say while star pointer","width":245},{"text":"and when we get to the null byte we will finish","width":197},{"text":"so just for fun lets change our program as well before we increment the pointer to print out the next characters","width":603},{"text":"my format string is just %c. and what character would I want? well the one pointed to by the pointer","width":493},{"text":"pointers to characters that  each character is exactly one byte","width":353},{"text":"so when we add one to our pointer, line ten here","width":266},{"text":"we are actually just going to add one to it","width":176},{"text":"because each character is exactly one byte","width":165},{"text":"so there's our program and it managed to print out exactly \"hello\"","width":538},{"text":"do we need to write this every time that we want to find out the number of characters in a string?","width":397},{"text":"no! guess what there's a function called strlen()","width":190},{"text":"so instead of my little loop if I include string.h","width":413},{"text":"I've now got strlen()","width":92},{"text":"so let me check the two results","width":212},{"text":"instead I'll say len is strlen() and pass it a pointer to my character","width":394},{"text":"I'm tempted to use pointer but that would be a bad idea","width":209},{"text":"perhaps you can figure out why","width":159},{"text":"so \"Strlen returned\" and we'll talk about how to fix my program in a moment","width":621},{"text":"so we'll run this","width":454},{"text":"strlen() returned 0","width":104},{"text":"why? because by the time my loop finished I'd advanced that pointer on until it had reached that null byte","width":395},{"text":"so when we passed that to strlen() it immediately found the null byte","width":209},{"text":"now what we should do is evaluate our strlen() before we change our pointer","width":962},{"text":"the last thing we'll do today is make our program crash","width":201},{"text":"let's try and change our first character to be someting else","width":396},{"text":"like 'J' turn it into Jello","width":283},{"text":"so let's dereference that pointer and use it to push in a character","width":397},{"text":"I don't want to have a string, i actually want to have a character","width":322},{"text":"let's try that and see what happens","width":296},{"text":"I get a segmentation fault when I try to run that line","width":189},{"text":"here's why, different parts of my proccesses' memory are valid for reading or reading and writing","width":549},{"text":"the program code, the actual assembly, the actual instructions for the cpu, can only be read","width":418},{"text":"and my constants, such as this \"hello\" can only be read","width":274},{"text":"and the hardware is sophisticated enough to know which parts of memory are read and which parts of memory are read/write","width":487},{"text":"and which parts of memory are invalid","width":147},{"text":"so that's why I get a segmentation fault if I try to change the constant memory","width":383},{"text":"alright time for you to play with character poitners, bye","width":270}],
  // Video 8
  [{"text":"So this video is about how to have an argument","width":174},{"text":"let's have a look inside some directories that we've got on our little system","width":281},{"text":"so if I type ls /bin","width":170},{"text":"you'll see here's a whole lot of programs that I can run from my terminal window","width":298},{"text":"and some of them you might recognize already","width":123},{"text":"including ls for list the contents of a directory (what we just did)","width":243},{"text":"cat to list the contents of a file and print it out","width":213},{"text":"and echo simply to echo back whatever we type","width":260},{"text":"so I can say echo Hello World","width":196},{"text":"and we also can used echo to print out the result of the exit value of the last program run","width":364},{"text":"how is it that these programs then can find out the parameters (the arguments) that we supply?","width":456},{"text":"when they are run?","width":90},{"text":"and the answer is that actually our main method can have two parameters here","width":339},{"text":"we have an integer (the number of arguments here) and also an array of character pointers","width":601},{"text":"called argv for value","width":206},{"text":"so let's actually print out some of these things","width":218},{"text":"so we'll say printf and we'll have the argv, the very first entry, the zero-th index is this","width":600},{"text":"and we'll say argv of zero","width":157},{"text":"and we will also print out what the last thing points to","width":384},{"text":"so that's going to be argc","width":190},{"text":"so that's %p","width":143},{"text":"we'll have a new line or two","width":135},{"text":"alright, and change that argc","width":311},{"text":"so here's two surprising things","width":176},{"text":"first of all, the very first entry is actually the execution name of the program","width":291},{"text":"how we started the program","width":150},{"text":"here, our program is just called \"program\"","width":298},{"text":"and secondly, there is actually one extra argument at the end and that points to the null string","width":417},{"text":"our pointer is null, it's zero","width":264},{"text":"so, let's now actually print out the other values","width":359},{"text":"we'll find out what the other values of argv is","width":628},{"text":"and we'll loop through and we'll print out all of those values","width":258},{"text":"so I'll have a little count. I'll start from 1 this time.","width":226},{"text":"because we don't want to print out the program name","width":343},{"text":"I can say: while count is less than argc, because I don't need the null pointer at the end","width":457},{"text":"and each time around the loop, increment count","width":274},{"text":"I'll print out the value of my count that's %d and print out its value as a string","width":565},{"text":"ok so that's going to be count and argv at index of count","width":442},{"text":"finally, let's put a new line in here","width":173},{"text":"here's my mistake: I should have said argc here for count","width":297},{"text":"ok, let's print it out","width":296},{"text":"when we start, argc is just 1. we've got just the program","width":197},{"text":"run it again but this time but this time have \"cat hat sat\"","width":277},{"text":"and you'll see I've got three additional arguments","width":254},{"text":"if I had put that inside double quotes then the hat and sat would be one argument","width":565},{"text":"so you see that we can now send our arguments","width":199},{"text":"for example, I could write a little program that helps me add up some numbers","width":370},{"text":"and I need a simple way to turn a string of digits into an integer","width":444},{"text":"in other words, I want to go from ASCII to an integer","width":136},{"text":"so this is the simplest way of turning a string into an integer number","width":466},{"text":"but this function doesn't give us much error checking","width":123},{"text":"if it can't read it, it simply returns zero","width":121},{"text":"I'll talk about how we can do a better job using scanf in a different lecture","width":238},{"text":"so we'll add those up and we'll print the result. right so we've got a result of zero","width":425},{"text":"let's try running our program again with 10 20 30","width":280},{"text":"and we see we get a result of 60","width":205},{"text":"if I had put some non-numbers in here, I get the result ten because the string I've got here it's converted into a zero","width":821},{"text":"alright, that's enough from me. now it's time for you to play. bye!","width":257}],
  // Video 9
  [{"text":"hi so this video is about the environment","width":260},{"text":"so in addition to being able to set arguments to our little programs","width":317},{"text":"each program also has access to environment variables","width":229},{"text":"let's have a look at those now","width":104},{"text":"so in my shell over here","width":149},{"text":"so my terminal window","width":63},{"text":"if i type for example set","width":117},{"text":"i can see a list of environment variables","width":181},{"text":"so these can be used by the shell and any other programs that we start to help configure their behavior","width":316},{"text":"for example we see down here that I am running as superuser","width":377},{"text":"as the root on this little system here","width":188},{"text":"we can also see that my home directory is in slash root","width":258},{"text":"so that's where kind of root's files will be stored","width":236},{"text":"great so how will i get access to that in my c programs","width":274},{"text":"well there's two ways","width":118},{"text":"first of all there's a variable called environ","width":301},{"text":"which if we are running in an older posix environment","width":280},{"text":"we have to specifically declare ","width":167},{"text":"in fact we say look there is somewhere in there is already a variable declared called environ and we just need access to it","width":475},{"text":"so that's what the extern keyword means","width":168},{"text":"we are not trying to say give me additional storage for this","width":149},{"text":"rather that the storage for this environment variable has already been made","width":210},{"text":"and we just want to be able to reference it inside our program","width":253},{"text":"so if i use that","width":173},{"text":"you'll see that it's actually a character pointer pointer","width":212},{"text":"in other words i'm going to dereference it twice","width":173},{"text":"the first time i dereference it","width":180},{"text":"i get a pointer and that pointer itself is going to point to character strings","width":297},{"text":"and i can keep moving along then to print out different environmental variables","width":342},{"text":"so if i had the same kind of pointer ","width":252},{"text":"i'll call it ptr and i initialize it to environ","width":341},{"text":"i could print out the very first one","width":234},{"text":"if i say let me print out a string and a new line and if I do star pointer we can follow that money if you like","width":710},{"text":"we can follow where that pointer points to","width":101},{"text":"so it points to the first entry in this array ","width":351},{"text":"so we can run this and we see i get the first environment variable","width":244},{"text":"which looks like a key or a name followed by an equal sign followed by its value","width":297},{"text":"so if i was to add one to the pointer","width":244},{"text":"then i move on to the next character pointer","width":196},{"text":"and i get the next entry","width":253},{"text":"so let's put that in a loop","width":121},{"text":"how can i do that","width":63},{"text":"well i can say while i might be tempted to write pointer but that's not going to be particularly useful","width":494},{"text":"instead i want to say whilst the thing that pointer is looking at is a non null value","width":322},{"text":"in other words whilst i have a valid pointer","width":214},{"text":"why? because i happen to know that this array has one extra entry at the end which is the null entry","width":400},{"text":"meaning that its got a pointer that points to nothing","width":139},{"text":"and let's also increment our pointer at the end","width":171},{"text":"great so we can run this and get a look at all of the entries","width":414},{"text":"in fact why don't we set a couple of entries here","width":258},{"text":"so export secret to be 123456","width":324},{"text":"let's try that and run our program again","width":183},{"text":"this time when we run it","width":128},{"text":"the environmental variable secret is part of the environment of our running program","width":480},{"text":"if you already know the name of the environment variable that you wish to use","width":346},{"text":"you can get to it directly","width":125},{"text":"so we can also say hey give me the environment variable and give it a name","width":287},{"text":"for example secret and this will give me back a pointer to a character array","width":603},{"text":"oops i better call it secret","width":188},{"text":"let's print it out and quit","width":163},{"text":"so the secret is and we can call exit","width":992},{"text":"great i've got a little program that can print out secrets","width":222},{"text":"so now i can make my program check that the secret is set for example","width":320},{"text":"for example if I try to get an environmental variable that doesn't exist","width":465},{"text":"then my pointer is actually going to be nil","width":288},{"text":"let me show you that","width":94},{"text":"let me try to print out the value of secret as an integer","width":486},{"text":"so my secret pointer is pointing to nothing","width":268},{"text":"we didn't set that environmental variable yet","width":126},{"text":"so we for example i could say look if secret is null then i'm not going to let this program run","width":662},{"text":"i am just going to stop","width":294},{"text":"so we'll stop and let's now change it so that very secret is something like abc","width":779},{"text":"and when we run the program again this time you'll see that secret is a valid integer value so that's just an integer representation of the pointer","width":793},{"text":"and we got back at that memory location the contents of that environment variable ABC","width":469},{"text":"okay that's enough for me now it's time for you to play","width":124},{"text":"bye","width":48}],
  // Video 10
  [{"text":"let's talk about strings today","width":165},{"text":"first of all, these two things are very different","width":171},{"text":"I could have a pointer to \"hello world\"","width":403},{"text":"or I could have an array of characters to \"hello world\"","width":492},{"text":"though both ptr and array points to the first letters","width":353},{"text":"some things that are noteworthy here is first of all they have different sizes","width":303},{"text":"so let's look at the sizes of each of these, perhaps you can guess what the result is going to be","width":405},{"text":"so you'll see the size of the pointer is the number of bytes to actually hold the character pointer","width":307},{"text":"which as this is a 32-bit machine is four bytes","width":226},{"text":"the size of array is the total size required to hold the whole array","width":420},{"text":"so when this code runs it's actually going to copy the contents of that string literal \"hello world\" into the new array object","width":564},{"text":"so in this case we need twelve bytes for that, eleven for \"hello world\" plus a twelfth to hold the null character at the end the bit pattern zero to say okay we've reached the end of the string","width":769},{"text":"their sizes is very different, plus remember that because we've made additional memory on the stack","width":496},{"text":"we can change it so I can change it to \"jello world\" for example","width":272},{"text":"let's start manipulating our string","width":234},{"text":"we'll do this on our array so we can actually make modifications to it","width":240},{"text":"how about we change all the 'l's to a different letter","width":242},{"text":"so we'll change and we'll pass the beggining of the array","width":255},{"text":"so let's pass in the array and afterwards we'll print what the array is so that's %s","width":985},{"text":"alright so I'll have my function called change down here and it takes a pointer to that memory","width":378},{"text":"so we don't need to return anything because we are actually going to be using the parameter to point to some memory that we are going to change","width":506},{"text":"what can we do with this?","width":121},{"text":"well let's have a little loop that says while(p) that says while p is non zero","width":433},{"text":"actually what we care about is whether p is pointing to memory that holds zero","width":316},{"text":"in other words, we've reached the end of the string","width":142},{"text":"we want to follow the pointer we want to dereference the pointer and for that we need the asterisk","width":290},{"text":"okay so what should we do with this. well we could change all of the letters","width":429},{"text":"for example we could blank it out","width":173},{"text":"we could say star p equals","width":147},{"text":"and it might be tempting to write an astericks here","width":376},{"text":"but that's not right because the asterisk means I've given the address of the asterisk","width":473},{"text":"so I'd be writing an asterisk into the address of the asterisk into that occasion","width":483},{"text":"if I run this I get a few warnings","width":134},{"text":"but it runs and it runs it for forever because my loops runs forever","width":257},{"text":"so let me ctrl-c that to break it","width":171},{"text":"this time change the loop so I add one to p each time","width":504},{"text":"so now I've got a very strange character because it's taken the lowest eight bits and copied that into my character","width":555},{"text":"instead let's change that to the actual bitwise pattern of my character","width":326},{"text":"now I've got something which can get rid of swear words by over writing them with asterisks or perhaps a password or something","width":573},{"text":"but we didn't want to do that for all the characters, we just wanted to do that for the l's","width":208},{"text":"so let's see if my p is, at when I look at that memory location, whether it's a lowercase l","width":594},{"text":"and as I said before because we are working with characters it is ok to compare them so note the use of double equals here","width":553},{"text":"okay so let's run that","width":341},{"text":"we have a couple of errors here","width":204},{"text":"for starters we're not using pointer","width":150},{"text":"so I can comment out that line","width":111},{"text":"I've got another problem here which is that change is implicitly declared","width":289},{"text":"that's because we haven't declared what the function signature of change() looks like","width":301},{"text":"let's do that now","width":89},{"text":"I'm going to say later on compiler, I expect to actually define a function and I'll give you the actual code to create this change method","width":700},{"text":"but for now here is what it's signature looks like","width":153},{"text":"it's called change, it takes a pointer to a character and it doesn't return anything","width":272},{"text":"so if I compile that now my warnings should go away","width":283},{"text":"great so I've got a function that can walk through","width":402},{"text":"I could have another function that finds letters as well","width":186},{"text":"so for example suppose we wanted to find the first o in this","width":503},{"text":"I could change this so that rather than changing the letters","width":413},{"text":"if the contents of p is an 'o', let's return p","width":466},{"text":"now I'm going to change my method signature","width":243},{"text":"and I'd better have a return value that returns something if I get to the very end","width":338},{"text":"so for example, it returns where p is","width":324},{"text":"we can now update my original code so that it finds the first 'o' and gives you back a pointer to that","width":876},{"text":"if I print that out","width":93},{"text":"hopefully you can guess what my program should do","width":407},{"text":"okay so it gave us back a string and it this time the pointer was half way through \"hello world\"","width":453},{"text":"that's OK, our pointers don't care what they point to","width":278},{"text":"we know that strings will continue until we reach the null byte at the end","width":384},{"text":"so that's how we were able to print out hello world","width":257},{"text":"okay that's enough for me, time for you to play. bye!","width":83}],
  // Video 11
  [{"text":"Hello! Let's talk about automatic variables","width":204},{"text":"so here's my main method I've got two function calls f1 f2","width":328},{"text":"and today I'm going to actually define them before my main method","width":266},{"text":"so I don't need to put in the additional declares in","width":211},{"text":"so let's have f1 here and f2...ok","width":353},{"text":"so now I've got a syntactically correct program","width":257},{"text":"but I want to talk about the variables that we might put inside these","width":182},{"text":"so if I create a variable like this to say \"hey I've got a value here, something I need to compute inside f1\" or maybe I want to make an array","width":718},{"text":"so here's my array and I can initialize it to, say, \"f1f1\" here we go","width":529},{"text":"then the lifetime of my array (this variable) is only for the lifetime of the function","width":456},{"text":"when I return from f1, then the variable goes out of scope","width":307},{"text":"which means the name \"array\" doesn't mean anything anymore inside our program","width":271},{"text":"but secondly, the memory that we were using for the array is automatically free'd up","width":298},{"text":"it can be reused for other purposes in a moment by the rest of the program","width":197},{"text":"so isn't that fantastic","width":131},{"text":"that's why it's called an automatic variable","width":160},{"text":"so automatic variables are very easy to use","width":140},{"text":"they also come with a big warning sticker and that's this","width":273},{"text":"which is to be very wary of just how long they live for","width":440},{"text":"let's do a couple of things here","width":126},{"text":"first of all, let's make it so that we can actually see the pointer in memory where array is pointing to","width":671},{"text":"so, let's print that out inside our function here","width":341},{"text":"remember that the name of the array (when converted to address) gives us the very beginning of the array","width":400},{"text":"and, we'll do that for our second function too","width":172},{"text":"okay, so, f2 f2","width":220},{"text":"just to prove that they're making different arrays","width":215},{"text":"okay, so we'll compile and run this","width":190},{"text":"and, when we run it, we see that both f1 and f2 both these functions the array is actually stored inside the same memory location","width":864},{"text":"isn't that fantastic. we didn't need any additional memory","width":155},{"text":"and that's because after we return from f1, any of those automatic variables are free'd so they are no longer needed so we can reuse that space","width":598},{"text":"internally, later we'll discover that a stack data structure is used to implement this","width":497},{"text":"and I can show a little bit of this by having a either a recursive function or we can make another function call these","width":611},{"text":"so for example, I could have a function called eg","width":421},{"text":"and, this calls f1","width":146},{"text":"so now let's have a look in the case that I'm not using f2 anymore","width":363},{"text":"so that can go away","width":180},{"text":"instead, I've got a function called eg and that can say have its own space","width":365},{"text":"so, blah and maybe say a thousand and twenty four bytes here","width":571},{"text":"and then we call f1 again","width":142},{"text":"so let's run this now","width":474},{"text":"so, in the output, you'll see that f1 is printed twice and the second time it's because it's being called from our function eg","width":784},{"text":"and in this case, it's further down in the stack. it's in lower memory","width":348},{"text":"f948 as opposed to fd50","width":154},{"text":"because it's being called from eg","width":335},{"text":"so, we'll see more about the stack in a moment","width":162},{"text":"later on. I just wanted to show you that they really are stored in different places","width":326},{"text":"finally, to reinforce this idea, let's make a little recursive function","width":348},{"text":"so, I can have something which takes an integer say I'll call it \"level\"","width":488},{"text":"and if level is greater than zero, let's call ourselves again with a slightly reduced value","width":667},{"text":"and I can of course make that simpler by just saying \"if level\"","width":272},{"text":"so if level is nonzero, then call it again","width":125},{"text":"and let's call it with say five","width":178},{"text":"okay, a semicolon would help","width":303},{"text":"each case as we go deeper and deeper into recursion, our array is getting lower and lower and lower in memory","width":587},{"text":"so we have all of these arrays created. all of these different activation records in different places","width":370},{"text":"inside our processes's memory","width":181},{"text":"so the last point we'll make, which is the most important, which is that it's very dangerous to return pointers to memory that is no longer valid","width":472},{"text":"for example, rather than returning nothing returning void, suppose we try to return a pointer to our array","width":659},{"text":"then though this code might compile, okay, I can get rid of \"level\" now","width":557},{"text":"it's certainly not a valid program because the pointer we get back from f1 now points to stale memory","width":631},{"text":"that memory is no longer ours to control","width":167},{"text":"it will be used in a moment for other function calls","width":182},{"text":"so always be careful if you are returning a pointer to something. make sure that that memory is still valid","width":413},{"text":"and never return a pointer to an automatic variable","width":208},{"text":"that's it for me. time for you to play. bye!","width":187}],
  // Video 12
  [{"text":"welcome so let's talk about some options other than automatic variables","width":350},{"text":"so here's a little problem i've got so far","width":121},{"text":"in my main method i want to print out the current time ","width":273},{"text":"and i'm going to write my function called currenttime that returns a new string array","width":460},{"text":"i already know that i cannot make an array in here to hold the result","width":385},{"text":"say with two hundred and fifty because when I go to return from this function","width":333},{"text":"the array variable won't be pointing to memory that is valid any longer","width":424},{"text":"so here is two options","width":102},{"text":"i could make my array static","width":130},{"text":"so how do i do that","width":127},{"text":"just by the keyword static","width":106},{"text":"so for example if i were to just say okay i've got myself a static array out here outside of that method","width":445},{"text":"then my array lives forever or at least for the length of my process","width":377},{"text":"so that gets rid of the problem of having some space","width":260},{"text":"i cheated i said look just give me some space for the lifetime of my program here ","width":319},{"text":"so that's what static does","width":167},{"text":"i can also put this inside the function","width":174},{"text":"that doesn't change the lifetime of the variable","width":125},{"text":"it just changes the scoping","width":126},{"text":"so as always that means simply that now the variable name array can only be connected to that piece of memory inside my little method","width":756},{"text":"so it's just changing how the actual name of the variable is bound to the memory","width":380},{"text":"so that's one method","width":134},{"text":"but instead i want to talk about a completely different way which is to use malloc","width":379},{"text":"so you're going to come across malloc calloc and realloc","width":703},{"text":"today let's talk about malloc ","width":124},{"text":"which essentially means give me some bytes","width":192},{"text":"and i can say how many bytes i need","width":204},{"text":"and that storage space is found inside the program's heap","width":271},{"text":"so for example if I want one hundred and twenty eight bytes I would say malloc one hundred and twenty eight","width":275},{"text":"so this is going to give me a pointer to the very first byte","width":245},{"text":"so let's store that inside my little character pointer here","width":294},{"text":"and i'll say there is my result","width":285},{"text":"it is possible that malloc fails","width":268},{"text":"if it is unable to give me one hundred and twenty eight bytes it would give me back an invalid pointer pointed to null or pointed to nothing","width":381},{"text":"so i could say look if result is zero or null or if i wanted to be really terse I could say if not result","width":684},{"text":"in other words result is null","width":115},{"text":"then just return that null pointer","width":176},{"text":"i am not going to try and use it","width":130},{"text":"it's not a valid pointer","width":135},{"text":"otherwise let's put some things inside this and I could turn the current time and store it inside that array","width":620},{"text":"so let me use a function called strcpy to put in the current time which is two fifty one pm","width":572},{"text":"#include <string.h> let's run this","width":887},{"text":"and my program calls currenttime creates some memory and then returns it","width":375},{"text":"this is fantastic right","width":63},{"text":"i've now got a way to make long lived pieces of memory and put data inside them","width":365},{"text":"but with great opportunity comes great responsibility here ","width":207},{"text":"so what we should do is let our programs is with every malloc we should at some point free up that memory to say hey i've finished with it","width":640},{"text":"so the correct way to do this is to keep a pointer around","width":191},{"text":"so let's have a pointer down here","width":280},{"text":"and when i finished using that memory","width":169},{"text":"i can free it","width":122},{"text":"to say hey this memory is no longer being used","width":128},{"text":"this block of memory of one hundred and twenty eight bytes is no longer being used","width":289},{"text":"please put it back into the heap and maybe we will reuse that memory again for a future malloc","width":566},{"text":"so good programs will have one free for every malloc ","width":353},{"text":"in the next video i'll talk about some of the mistakes that we can make with heap allocation","width":334},{"text":"but now it's time for you to play with malloc ","width":162},{"text":"bye","width":52}],
  // Video 13
  [{"text":"hi welcome","width":116},{"text":"so we have got a little function so far called currenttime()","width":136},{"text":"that requests 128 bytes from the heap","width":307},{"text":"and then providing we get a non-null pointer back from malloc","width":263},{"text":"we will copy in the time 2:51 PM into that memory","width":288},{"text":"and then return a pointer to the first byte of that memory so that's our little currenttime","width":262},{"text":"we've been careful to make sure that if malloc fails, perhaps our program has used all of the heap memory","width":411},{"text":"then we don't try to use that null pointer","width":207},{"text":"but now let's actually make it so that it actually makes a call to find out what the current time is","width":540},{"text":"the current time is known by the system","width":114},{"text":"so it's time to make a system call and then we will format that using a c function called ctime()","width":529},{"text":"to actually give us a human readable version of the time","width":328},{"text":"both of these functions can be found inside the include time.h","width":306},{"text":"I've commented them up here","width":113},{"text":"so the first think we can do is call time so when you call time you can pass it a pointer to a time_t variable","width":717},{"text":"or you can say actuall I'm not going to give you anything and it will still give you back the time in its result","width":512},{"text":"so let's just use the result","width":145},{"text":"so here's the number of seconds since 1970","width":534},{"text":"we'll store that inside our little variable called secondsSince1970","width":359},{"text":"but I don't want that as a value, I just want to turn that into a string","width":224},{"text":"for that there's a function called ctime, this a library function. there are other functions that give greater control to the precise formatting","width":630},{"text":"but for this demo let's just use ctime() which has some reasonable formatting that most people can understand","width":617},{"text":"this will give us back a pointer to the time","width":319},{"text":"so the time in ASCII, in otherwords in letters, in readable time","width":484},{"text":"and then we can use that and copy that result into new memory, into our result","width":526},{"text":"so one problem with ctime() is that it uses static storage","width":339},{"text":"in other words it's great if you just want to call it once, and it will use it's static storage to give you back the time in a readable format","width":674},{"text":"but don't expect that to stay around because if you call ctime() again in the future it is going to overwrite those bytes","width":455},{"text":"and that's why our little function here called currenttime() is useful","width":200},{"text":"we are going to take that temporary result and put it into some memory that is ours to control","width":403},{"text":"so it can't be overwritten","width":174},{"text":"we need to pass in seconds since midnight","width":223},{"text":"except we've got a problem here","width":208},{"text":"it doesn't actually want the value, it wants a pointer to this variable, it wants to know where in memory this variable is","width":554},{"text":"for that I have to introduce some new syntax, which is the &","width":270},{"text":"when you see & it means that I don't want to know about the variable itself, but where it is stored in memory","width":523},{"text":"tell me the address of the variable","width":305},{"text":"we didn't need this for arrays because that's what the array name gives us automatically","width":224},{"text":"but for other items we can use the & to find out where it is stored in memory","width":500},{"text":"let's compile and run it","width":374},{"text":"and we find out that my little virtual machine thinks it's Jan 1 2014","width":389},{"text":"not very accurate, we should probably change it, but it did print out what it thinks the current time","width":487},{"text":"I promised you that I'd mention a few more mistakes that we can make with heap memory","width":479},{"text":"one mistake we can make is to double free the same pointer","width":423},{"text":"this can lead to all sorts of horrendous problems because when you tell the heap that you've freed with some memory it might actually use that memory for it's own book keeping","width":719},{"text":"so it knows that the particular block of memory is free","width":275},{"text":"if you free it again it can confuse the book keeping, the pointers that the heap is using itself","width":684},{"text":"once we've freed some memory, dont free it by accident a second time!","width":208},{"text":"another common mistake in C programs is to continue using memory after we've freed it","width":536},{"text":"we shouldn't consider that memory to be valid anymore","width":175},{"text":"perhaps it's going to be reused by some other part of the program that is about to call malloc()","width":458},{"text":"and certainly we shouldn't expect anything that we've previously stored in there to be valid","width":469},{"text":"once we've freed it don't try to use the pointer again","width":188},{"text":"so for example, this would be an error","width":217},{"text":"so how can we guard against some of these errors?","width":199},{"text":"one common defensive programming technique is once we free a pointer set that pointer to be NULL","width":498},{"text":"to mean that I'm not pointing to anything anymore","width":212},{"text":"so this avoids the problem of what is called a dangling pointer error","width":429},{"text":"that now our pointer is no longer pointing to invalid memory","width":541},{"text":"that's it for me. time for you to play, bye!","width":231}],
  // Video 14
  [{"text":"Hi, welcome!","width":94},{"text":"let's talk about creating more complicated data types in C","width":294},{"text":"so far, we've talked about integer and character pointers","width":220},{"text":"what if we wanted to make something more complicated like a linked list?","width":196},{"text":"for that, we will use a struct","width":193},{"text":"so, let's say we've got a struct and we'll say my struct I'll call it say Link","width":561},{"text":"and what should we have inside this?","width":80},{"text":"well, we've have a value to store and we'll need a pointer to the next link","width":310},{"text":"we'll need to know where the next link is in memory","width":117},{"text":"so, we can say struct Link and it's a pointer to that","width":368},{"text":"so, don't forget the asterisk","width":80},{"text":"so that's our little struct here. a semicolon is required at the end","width":297},{"text":"but it's kind of painful to keep saying \"struct Link\" every time I want to refer to this type","width":412},{"text":"so I can have a link here called \"one\" for example","width":204},{"text":"so quite often, we can use, or you'll find that people use \"typedef\"","width":277},{"text":"to say \"here's an alias\" and I can use typedef with any kind of type","width":417},{"text":"I can even use it with integers","width":139},{"text":"for example, I can say typedef number","width":168},{"text":"now I can say \"number x\" instead of \"int x\"","width":368},{"text":"but today we're going to use typedef for our link","width":190},{"text":"so we'll say instead of having to write struct Link, I'll call this my link type","width":416},{"text":"so now I've got my link type, I can make a link","width":238},{"text":"here's one","width":63},{"text":"and if I declare variables like this, outside of my functions, then they live forever","width":614},{"text":"and, let me write my main method here","width":326},{"text":"so, my link called \"one\" and my value live forever","width":395},{"text":"and in fact, they're initialized","width":87},{"text":"so their bitwise pattern is just all zeros","width":212},{"text":"so in other words, my value will be zero and the link \"one\" will have a value of zero and its next pointer will have a value of zero as well","width":740},{"text":"if we wanted to change that, then we could say one.value equals fourty two","width":369},{"text":"and one.next equals well, where should we put it?","width":237},{"text":"well where should we send it next?","width":98},{"text":"we could say \"NULL\" if we wish to use NULL, actually we have to #include <stdlib.h>","width":570},{"text":"to have NULL defined","width":185},{"text":"and now our Link says \"I'm the last thing. there's no one after me\"","width":354},{"text":"if we wanted to be particularly crazy, we can make the next pointer point to the very same link","width":425},{"text":"we do that by saying \"one\" except we don't want \"one\" we want the address of \"one\"","width":350},{"text":"we need a pointer to \"one\"","width":70},{"text":"so how do I do that? I use ampersand to say \"give me the address\" of this","width":281},{"text":"so that gives me a pointer to a link","width":121},{"text":"well thats great if we only need one link","width":114},{"text":"but that's not much of a linked list","width":150},{"text":"let's actually work out then how we can actually make a whole load of links","width":292},{"text":"for that, we'll use some heap memory","width":148},{"text":"and I'm going to use malloc which is also declared inside stdlib.h","width":268},{"text":"so, I need some memory","width":160},{"text":"how many bytes do I need?","width":109},{"text":"for that, I can say: \"give me the sizeof my link structure\"","width":225},{"text":"in other words, give me the size of link_t","width":143},{"text":"be careful you don't put an asterisk here otherwise, you'll only be reserving enough bytes for a pointer","width":362},{"text":"in other words, 4 bytes or so","width":109},{"text":"that's not enough for what we need","width":104},{"text":"we need the size of our whole struct","width":247},{"text":"so that gives me back a pointer and I actually want to cast it so that it's type pointer to a link_t","width":528},{"text":"so I can now store that inside a variable","width":227},{"text":"and I can have it as my first pointer","width":261},{"text":"so, malloc does not initialize the actual memory. it just simply reserves it for us","width":371},{"text":"just allocates it for us.","width":89},{"text":"we better make sure that our Link is properly initialized","width":228},{"text":"so for my first Link, I want to set its value to something","width":353},{"text":"and I need to set its \"next\" pointer to something","width":225},{"text":"so for example, I can set it to NULL","width":107},{"text":"or if I, oops, let me change that to put a one","width":271},{"text":"or if I wanted to make it point to itself, I can say \"ptr1\"","width":355},{"text":"if I had two links, let's do that","width":347},{"text":"then I can again set up the values. be very careful when copying and pasting code that you've actually edited it correctly","width":543},{"text":"I can now make my first link ptr1 its next point to next ptr","width":407},{"text":"and the next link, its next pointer can go nowhere","width":440},{"text":"so, there's my simple linked list","width":205},{"text":"more complicated links might have a previous pointer as well","width":246},{"text":"so you can navigate both in the forwards and backwards direction throughout the linked list","width":506},{"text":"okay, so, let's now finally compile this and check that it works","width":403},{"text":"our program compiles correctly, but to be a well-behaved program, really we should free up the memory as well","width":720},{"text":"so don't forget for every malloc you do, we should responsible for freeing up that memory once and once only","width":566},{"text":"so free(ptr1) and free(ptr2)","width":324},{"text":"also, a more robust version of this program would check that malloc actually succeeded","width":377},{"text":"that we actually really got the bytes","width":143},{"text":"that would be something important to do if your program ran for a very long time","width":322},{"text":"or needed very large unknown amounts of memory","width":319},{"text":"so that's how we make linked lists in C","width":184},{"text":"now it's time for you to play. bye!","width":161}],
  // Video 15
  [{"text":"Okay so let's talk about how we can make it easier to create links and destroy them","width":335},{"text":"so i've changed my link class a little bit so now each link can have a key and a value","width":297},{"text":"in addition to the next pointer","width":129},{"text":"the pointer to the next link","width":106},{"text":"okay so let's make some methods to create links and destroy them","width":440},{"text":"we'll do the create one first","width":123},{"text":"so it's going to return a pointer to a link","width":227},{"text":"and i might call it say link_create and I'll expect a key and I'll expect a value","width":721},{"text":"so that'll give me two pointers","width":159},{"text":"if i wish to debug this I could have a printf in here saying hey creating link and I could have what the key and values are for example","width":737},{"text":"right so i need to get some memory","width":165},{"text":"let's get some memory from the heap because we want our link to last for a long time until we decide to destroy it","width":445},{"text":"so i'll say malloc give me some memory and how much well i better ask for how big is my memory structure link_t","width":545},{"text":"and i will cast that return type as a pointer to my link object","width":445},{"text":"why do i do that","width":63},{"text":"well i want to be able to reference the sub parts","width":170},{"text":"the components of my struct","width":119},{"text":"and i will call that say result and i need to initialize my pointer","width":481},{"text":"so now i've got that I can set the key to be a key and the value to be the value","width":499},{"text":"now when i do this i am copying the pointers i'm not creating new strings","width":444},{"text":"so in other words i've now got a pointer called key and it's looking at exactly the same string array as the parameter is","width":499},{"text":"i haven't made any new string arrays","width":203},{"text":"so let's remember that when i return this","width":214},{"text":"that those pointers better be valid for the lifetime of the link","width":288},{"text":"well that's fine if I knew for example that this will always be used with string constants or I am taking control of those values that I send in and I happen to know that their lifetime is longer than the link's lifetime","width":1068},{"text":"so if that's the case then my code is relatively simple like this","width":214},{"text":"and destroying the link is also relatively simple","width":225},{"text":"so let's write a link destroy method destroy","width":205},{"text":"which takes a pointer to the link that is going to disappear so we can call that just p","width":437},{"text":"and what do i need to do in here","width":104},{"text":"well i can simply return the memory back","width":190},{"text":"okay so this works we could do a little better than this","width":253},{"text":"we could actually do some defensive programming here","width":150},{"text":"where we also destroy the information inside that link","width":381},{"text":"so for that i can use memory set","width":190},{"text":"so memset where I give it a pointer that I want to use","width":325},{"text":"the value will be zero the number of bytes can be the size of my link","width":279},{"text":"so this assures that i don't have any dangling pointers","width":258},{"text":"i have destroyed the key and value pointers","width":232},{"text":"i've set them back to null and anything else inside my link has been set to null","width":247},{"text":"so if someone happens to have a pointer to this link and they try to use the contents straight away then it will fail it will be null","width":521},{"text":"and secondly we are freeing it to say okay this memory can now be reused for other purposes","width":356},{"text":"so that's my link destroy method","width":158},{"text":"now suppose we discover that our strings we don't control the lifetime of these string arrays","width":483},{"text":"and that actually we should make copies of them","width":186},{"text":"so how can i do that","width":89},{"text":"well there's a method called strdup so let's do that strdup and this gives me back a pointer to a new string ","width":697},{"text":"a new character array that has been created on the heap","width":223},{"text":"and it's just a copy of that existing character array that we passed it","width":296},{"text":"so let's create our new string arrays and use those","width":296},{"text":"if we do that then when I destroy the link I better free up the memory associated with my key and value","width":470},{"text":"so before ending here I should free up those pointers","width":344},{"text":"so I should call free on my key and free on my value pointer as well","width":641},{"text":"okay so there's my code now to start working with a link","width":780},{"text":"with my main method I will need to always know the beginning of my linked list","width":448},{"text":"so that sounds like a great thing to actually have as a global variable here","width":312},{"text":"so let me have my link pointer here and I can call it root","width":327},{"text":"and so the first link I make I can initialize root to that","width":316},{"text":"to that very first link","width":157},{"text":"okay so that's it for now, it's now time for you to play with creating more links","width":389},{"text":"bye","width":70}],
  // Video 16
   [{"text":"hello welcome","width":63},{"text":"let's talk about how we can get single characters and print them out in c","width":267},{"text":"so here's some functions defined in std.io","width":232},{"text":"i can say give me a single character for example and why don't I just keep calling this","width":400},{"text":"so i could just say while getchar is not equal to a special constant called end of file (EOF) keep going around in a loop","width":590},{"text":"but if I actually want to print them out I better actually store the value of getchar","width":232},{"text":"so let's have an integer value called c and inside my while condition I'm actually going to assign the result into c","width":544},{"text":"so you'll often see this pattern inside systems programming where we take a systems call or a library call and we store the results inside a variable","width":643},{"text":"but because that may also signify an error condition or a termination condition we use it immediately to check inside part of a while loop or an if statement","width":641},{"text":"so we've got a little character loop here that is going to keep going until it gets to the end of the file","width":254},{"text":"so now I want to print it out","width":92},{"text":"guess what i can call putchar and we'll see that running ","width":217},{"text":"so let's run this little program","width":264},{"text":"ABCD","width":90},{"text":"it prints back ABCD","width":147},{"text":"okay so we don't have to display the character just as a character","width":273},{"text":"we can display it as a character an integer and hexdecimal values","width":255},{"text":"so let's use printf for that","width":94},{"text":"so I've got %c %d and %x for character integer and hexadecimal value","width":376},{"text":"alright so let's run this","width":324},{"text":"and you can see that the letter A corresponds to sixty five which is in hexadecimal forty one","width":385},{"text":"right so why don't we use our little program to print out the contents of another file","width":433},{"text":"so if I cat my source code I can see the contents of that","width":292},{"text":"great so I'm going to pipe it into my program","width":273},{"text":"so i'll do ./program and it reads every byte and prints it out as a character","width":526},{"text":"great so let's encrypt our file now so I'm going to modify our value of c if it's not a newline character","width":533},{"text":"so what we'll do is say if c is at least thirty two in other words at least a space an ascii space","width":470},{"text":"and if it is we will change the lowest bit","width":382},{"text":"we'll flip the lowest bit","width":61},{"text":"how can we do that","width":64},{"text":"let's xor it with one","width":169},{"text":"right and then we'll print it out","width":147},{"text":"okay so we'll run this","width":172},{"text":"CDE for example and it changed the C to a B","width":281},{"text":"and if I do 135 I get 024","width":254},{"text":"so to say that I've got to the end of the file when I'm just typing you by the way you can do control d","width":374},{"text":"now see this working on some actual source code","width":226},{"text":"so let's here some text my program.c and i'm going to pipe that into my program to use as its input","width":524},{"text":"and you can see great we've garbled the program","width":264},{"text":"so if I want to I can then take that output and pipe it into my program again","width":444},{"text":"so now i'm going to unencrypt it because i flipped the lowest bit back  ","width":259},{"text":"so we get back our source code","width":133},{"text":"so that's getchar and putchar i can also work with whole lines","width":372},{"text":"i can let's get rid of the loop here i can say puts hello or any pointer to a character array provided its terminated by a zero byte at the end","width":997},{"text":"and that is equivalent to printf by saying %s and \\n at the end","width":560},{"text":"so i've got some character pointer here","width":279},{"text":"right so it's a little bit shorter to type than writing printf","width":480},{"text":"there is the opposite which is to get some input","width":225},{"text":"but this has a problem and we'll see why in a moment why this function actually call is being removed from the c standard","width":392},{"text":"i'm talking about gets so let's call gets and we will have a little buffer here","width":648},{"text":"so let's put a little buffer on the stack here","width":187},{"text":"i'll make it twelve bytes today ","width":109},{"text":"and remember when we call gets with buffer if you use the array name you are talking about the very first byte of the array","width":432},{"text":"and rather than printing out hello","width":175},{"text":"we will print out our buffer value","width":137},{"text":"so let's run this and we can type something in and it echos it back to us","width":509},{"text":"fantastic but what happens if we enter more than twelve bytes","width":262},{"text":"so in other words could something bad happen to our other variables","width":247},{"text":"well yes it could because if we go past twelve bytes we start writing into memory which is used for other purposes","width":353},{"text":"for example in my little program the integer is immediately after the buffer","width":378},{"text":"let's prove this let's set our hex value of c to be ten twenty thirty fourty","width":422},{"text":"let me print that out after we've called gets i'm going to print it again","width":584},{"text":"so we've got to remember that what we store is going to be our letters plus a null byte","width":475},{"text":"so in this case if I do ABCDABCDABCD I've already overflowed because the thirteenth byte is now going to be written into my integer","width":796},{"text":"but i am going to do just a few more I'll do ABCD there we go","width":295},{"text":"and we'll see that I've managed to change my integer value to 41424344","width":412},{"text":"so the last ABC that I wrote in there actually overran my buffer","width":277},{"text":"i've got a buffer overflow and I've corrupted the contents of another variable","width":300},{"text":"so that's why gets is dangerous","width":107},{"text":"there's no way to tell gets that we shouldn't accept input that is too long for it","width":420},{"text":"so in a future video i'll tell you about getline and also fgets which don't suffer from these problems","width":586},{"text":"okay that's it for me thanks for watching and i'll see you in another video. bye!","width":269}],
  // Video 17
  [{"text":"Hello! Let's talk about how we can use scanf and sscanf and fscanf to read some data and convert that into say integers or floats or strings","width":739},{"text":"so we can actually use those values inside our variables","width":232},{"text":"alright, so, I'll start by using sscanf","width":207},{"text":"which can parse data inside a string","width":184},{"text":"inside memory","width":109},{"text":"so for example, let's have a little bit of data here","width":136},{"text":"I'll have my data be my name and a score","width":454},{"text":"and I want to take that and pull it apart into a string and an integer","width":385},{"text":"so I'll have a little buffer here, say, up to twenty characters","width":343},{"text":"and a little integer here","width":102},{"text":"and I could set this to be equal to some arbitrary value. we'll see why in a little bit","width":434},{"text":"and then I'm going to say \"okay, sscanf please read from this string array and what I'd like you to do is convert that into a string followed by one or more spaces and then an integer value\"","width":1146},{"text":"alright so scanf is going to look at our memory starting at wherever our data is pointing at","width":359},{"text":"and, it's going to first of all look for a string until it comes across one space","width":357},{"text":"and then there can be actually multiple spaces in our data","width":155},{"text":"and then after that, it's going to treat the rest of the string as an integer","width":287},{"text":"okay, now, our format specifiers say the kind of data that we want to interpret and also the number of bytes that should be written to when it is trying to parse its data","width":730},{"text":"so we better tell it where to exactly put these things","width":154},{"text":"so for our string, we want it to write it into a buffer","width":234},{"text":"and for the score, we want to write it into our score variable","width":199},{"text":"but hold on a moment","width":114},{"text":"when we say \"buffer\" yes that gives us the beginning address of our array","width":372},{"text":"but not for score","width":63},{"text":"score is just going to give us whatever value score happens to hold","width":170},{"text":"in this case, negative forty two","width":124},{"text":"that's not what we need","width":69},{"text":"we actually want the address of this variable","width":132},{"text":"so we're going to say ampersand score","width":239},{"text":"so, lets read that and we'll print it out","width":271},{"text":"so here's the result and we'll say %s %d and we'll print the contents of the buffer and print the value of score","width":592},{"text":"so notice that scanf and printf, the arguments don't always look the same","width":266},{"text":"when we want to print out the values, we don't actually want to just print out the address of score","width":389},{"text":"we actually wanted to know what the value is","width":106},{"text":"great so that read that correctly","width":202},{"text":"scanf actually tells us something else which is how many arguments it correctly managed to parse","width":428},{"text":"so let's make a note of that and we'll print that out","width":299},{"text":"so, we'll say %d here","width":313},{"text":"print out the result in our printf statement here","width":183},{"text":"so now when we run it, we'll see that sscanf managed to read both iterms","width":384},{"text":"I got result two","width":90},{"text":"fantastic. so that's useful. now we can write robust programs to check if we really did write into both variables","width":521},{"text":"now you might be worried that scanf could result in a buffer overflow","width":286},{"text":"and, in fact, in our current code, you'd be right","width":168},{"text":"so if I had a very long name with no spaces here","width":419},{"text":"then that's longer than our buffer","width":229},{"text":"so what we need to do is tell scanf just how big our buffer is","width":209},{"text":"so in this case, it should be nineteen","width":207},{"text":"because we're setting scanf how many character to read from the input","width":321},{"text":"and our buffer, of course, if going to need one extra one to hold the terminating byte for this string","width":397},{"text":"so let's run this now","width":483},{"text":"and you'll see that first of all the name is truncated and that secondly, the return value of our scanf call here was one","width":538},{"text":"and it only managed to read into the buffer","width":259},{"text":"it gave up trying to read the integer because our buffer wasn't long enough","width":190},{"text":"and, in fact, our score variable still contained its original value","width":305},{"text":"of negative forty two","width":123},{"text":"so good defensive programs must check that the return value is reasonable","width":389},{"text":"also, when writing scanf or sscanf or fscanf, it's always a good idea to carefully check to see whether you should be looking at the address of the variable or if the variable itself actually is a pointer","width":783},{"text":"and is already going to give you the memory address that you'd like scanf to change","width":532},{"text":"alright so we've read data from a string ","width":263},{"text":"we can also parse data from a file stream and how can we do that? well you can use not sscanf but fscanf","width":663},{"text":"and if you did that, you better give it a file stream","width":182},{"text":"there's one called stdin already","width":209},{"text":"if we didn't want to use that, then we could open up a file using fopen and then pass in the file handle here","width":564},{"text":"and reading from stdin is such a common occurance that in fact there's another form of this which is just say scanf","width":699},{"text":"and if you do that, that means \"hey, just read from stdin\"","width":188},{"text":"so now, let's run our program here","width":555},{"text":"and, now it's waiting for input","width":99},{"text":"so let me typing something","width":130},{"text":"I'll say \"Angrave one hundred\"","width":324},{"text":"great! and it managed to parse both variables","width":177},{"text":"okay so that's enough introduction to scanf","width":188},{"text":"remember this next time you're trying to read 3d data and points and you want to say convert those ASCII numbers into actual floats and doubles","width":640},{"text":"and also remember that its important to read exactly how scanf uses these format specifiers because its not quite the same as printf","width":624},{"text":"alright, that's it for me. time for you to play. bye for now","width":278}],
  // Video 18
  [{"text":"hello welcome","width":111},{"text":"let's talk about getline","width":93},{"text":"so it's very very common to read in a single line of text either from the user or from a file","width":438},{"text":"and we would like it to be very easy to say hey \"let's not worry about making sure my buffer is large enough\"","width":384},{"text":"I just want to get the whole line","width":95},{"text":"and thus getline was born","width":130},{"text":"this is being adopted into the posix standard","width":215},{"text":"if you are working however with older standard and an older compiler we have to ask gcc to explicitly enable it","width":463},{"text":"so before doing our includes with stdio we need to define _GNU_SOURCE","width":575},{"text":"so if we do that we would like the gnu source additions to the standard functions","width":473},{"text":"right so if we do that now we have got a getline declaration included as part of the #include <stdio.h>","width":478},{"text":"so here is how we can use getline","width":228},{"text":"with getline we actually set up two variables","width":284},{"text":"we get getline to manipulate these directly ","width":287},{"text":"we are going to have a pointer to a buffer","width":319},{"text":"and a little int to say how big is our buffer","width":369},{"text":"well let's just check to see really if it is an int or if we should be doing a different type","width":226},{"text":"so let me pull up my favorite manpage on getline","width":362},{"text":"see that actually the correct type to use is size_t","width":398},{"text":"which is essentially an unsigned int or larger on some systems","width":259},{"text":"so let's just make a note of that","width":99},{"text":"that is the declaration that we are going to be using","width":210},{"text":"and so we will have not just a buffer to our character array","width":377},{"text":"but also size as well to say how big is our buffer","width":328},{"text":"and i will call this say capacity","width":168},{"text":"right so we could start calling this and we could say okay","width":256},{"text":"get me a line and oh i need to pass in a pointer to my buffer variable","width":441},{"text":"right and notice that the declaration here is star star asteric so it's a pointer to a pointer","width":513},{"text":"right so how did i get that","width":97},{"text":"i say okay give me the address of my variable","width":223},{"text":"and similarly for the capacity as well","width":150},{"text":"the size of the variable","width":126},{"text":"so give me the address of my capacity","width":317},{"text":"and getline is going to modify those two variables directly","width":222},{"text":"essentially if my buffer is not large enough","width":189},{"text":"it is going to free up the old buffer and then call malloc so that we get a larger buffer","width":518},{"text":"okay technically it might call realloc but let's not worry about exactly which library call it calls","width":335},{"text":"we just know that it's going to do all that buffer maintenance for us automatically","width":266},{"text":"and now we need to give it a filestream so why don't we use say stdin","width":413},{"text":"now right now our code suffers from a terrible flaw which is that we've assumed that our automatic variables buffer capacity will be set to nothing","width":546},{"text":"so the getline knows that it can't reuse what it happens to be pointing to","width":264},{"text":"so we actually need to set these to explicitly to null and the capacity to zero","width":403},{"text":"so the first time we call getline getline will see that the buffer is certainly not large enough and will allocate enough space","width":502},{"text":"we can now find out what the result is which is the number of characters getline has managed to retrieve","width":519},{"text":"or a negative value if it failed","width":127},{"text":"so let's make a note of that","width":146},{"text":"and we'll print this out","width":125},{"text":"so i'll print it out as an integer and let's have a look to see what we can find inside our buffer","width":445},{"text":"so we want the result and we want the buffer","width":227},{"text":"and lastly let's put a newline here","width":169},{"text":"okay so we'll run our little program here","width":385},{"text":"and now it's waiting for me to type something","width":368},{"text":"okay great so it says i have got six characters","width":218},{"text":"wait and i printed ABCDE","width":102},{"text":"actually the last character might be a newline character","width":355},{"text":"and quite often we don't actually need that","width":152},{"text":"so why don't we overwrite the very last character with null with a terminating byte","width":439},{"text":"so let's write the code for that","width":160},{"text":"first of all we only want to do that if we get at least one character back from getline","width":289},{"text":"so let's check that the result was positive","width":300},{"text":"and also we only want to do this if we are going to overwrite the last character which truly is a newline","width":385},{"text":"we could imagine for example reading from a file where the very last byte is not actually a newline","width":363},{"text":"so we should just check to see what we're going to write here","width":233},{"text":"so let's look inside our buffer and where do we want to look?","width":275},{"text":"well if we read one character that would be at the beginning of the buffer","width":403},{"text":"so we need to look at result minus one","width":129},{"text":"so if that is equal to the character of a newline","width":352},{"text":"then let's truncate the string","width":262},{"text":"the easiest way to do that remember is strings are just terminated by zero","width":190},{"text":"so let's just put a zero directly into that byte","width":188},{"text":"so we are going to say at the same spot set that equal to zero","width":356},{"text":"right so let's run our program again","width":534},{"text":"okay so this time it read it correctly and in our printf we didn't get that unwanted extra newline","width":570},{"text":"alright our program right now is allocating memory on the heap","width":270},{"text":"we don't do it we let getline do it","width":127},{"text":"but it's actually up to us when we finish using getline to free that buffer","width":362},{"text":"right so let's do that","width":121},{"text":"let's at the very end here we can call free on the buffer","width":316},{"text":"we don't need to do that every time we call getline because getline by default will try to for performance try to reuse the buffer for each line it gets","width":576},{"text":"so for example we could call getline twice and it would try to use the same buffer","width":511},{"text":"but the big take home message for getline is first of all","width":186},{"text":"you are going to need a pointer to a buffer and a capacity variacle which getline itself is going to change the contents of","width":470},{"text":"as you call it it can make the buffer as large as","width":304},{"text":"each time you call getline it might change that buffer to point to some new memory if the buffer needs to be larger","width":439},{"text":"secondly it's a great idea to check the return value of getline to see how many characters it managed to read","width":469},{"text":"and also to see if there was an error or not","width":138},{"text":"and the return type for that is ssize_t for a signed size integer type","width":469},{"text":"and finally it's good practice to don't forget to free the memory that is pointed at by your buffer variable","width":546},{"text":"okay that's it for me","width":87},{"text":"have fun playing bye","width":78}],
  // Video 19
  [{"text":"Hello welcome","width":135},{"text":"so this video is a little introduction to signals","width":222},{"text":"so signals are like a software interrupt","width":198},{"text":"we can use them to control our processes and even do things asynchronously","width":322},{"text":"so let's have a look at a little program i have written so far that doesn't use signals yet","width":333},{"text":"all it does is ask for the environment of home","width":181},{"text":"in other words the user's home directory","width":172},{"text":"and then we have a little loop that prints it out and sleeps for three seconds","width":314},{"text":"so every three seconds it is going to print out my home directory","width":211},{"text":"and on this machine i am root so it just keeps on printing out slash root","width":387},{"text":"so of course we can stop this program by pressing control c","width":383},{"text":"and when you do that you actually are sending a signal","width":195},{"text":"sigint or sig interrupt to the process","width":261},{"text":"now it maybe that our process doesn't like being interrupted","width":198},{"text":"why don't we catch that signal and install our own little handle for that","width":319},{"text":"so here is how we will do this","width":158},{"text":"i am going to say at the beginning of my program that if you get a certain signal say sigint ","width":797},{"text":"rather than having the default behavior which as we know is to stop the program or quit the program","width":367},{"text":"let us run my code instead","width":113},{"text":"so i will call it say nothankyou","width":227},{"text":"so what is nothankyou","width":113},{"text":"it has to be a pointer to a function","width":252},{"text":"how do we do that","width":61},{"text":"easy just write a function","width":75},{"text":"and in this case the correct type is something that doesn't return anything","width":310},{"text":"but does take an integer","width":136},{"text":"in fact it is the signal that is being sent to our program","width":253},{"text":"and so that we know that this is being called let's write something out directly to standard output","width":342},{"text":"so i can say write and i can say no","width":219},{"text":"so what is that that is a little message of three bytes to send","width":228},{"text":"so let's run this now","width":155},{"text":"okay so here is my program every three seconds it is going to print root","width":248},{"text":"but now i am going to press control c","width":359},{"text":"and it prints no no so it's refusing to quit","width":405},{"text":"you might also notice that the sleep also immediately returns","width":242},{"text":"more about that later","width":99},{"text":"it is still possible to stop our program here","width":180},{"text":"if we do control backslash then we force it to quit","width":382},{"text":"so sigint is one common signal that we send our programs","width":259},{"text":"there are many others","width":92},{"text":"just for fun let me show you one called sigalarm","width":239},{"text":"so this time i am going to say alarm seven seconds","width":498},{"text":"and so when you call alarm you are going to say give me a special signal called sigalrm in this many seconds","width":626},{"text":"in seven seconds","width":82},{"text":"and we better install then","width":112},{"text":"well let's just run it and see what happens to begin with","width":795},{"text":"so the default behavior of this sigalrm is to actually stop our program","width":299},{"text":"it quits the program","width":103},{"text":"that's a pretty aggressive alarm clock i think you'll agree","width":175},{"text":"and it also as you see prints out alarm clock on the shell","width":233},{"text":"perhaps we don't want our alarm signal to be so menacing","width":308},{"text":"so this time instead of sigint i can say look for a certain signal called sigalrm","width":452},{"text":"please call my function instead","width":515},{"text":"okay so there we go our alarm went off after four seconds and this time we asynchronously ran our code that printed out no to standard out","width":704},{"text":"so this is pretty exciting right","width":98},{"text":"you probably thought about interrupts on the hardware level","width":228},{"text":"now we can do interrupts at the software level and we can respond to things which happen in our environment very quickly","width":459},{"text":"so we will find signals to be very useful when we start dealing working with more than one process","width":381},{"text":"we can control our programs and we can also work with very large amounts of data coming in","width":371},{"text":"alright that is enough for me","width":106},{"text":"bye","width":36}],
  // Video 20
  [{"text":"so usually we think about our programs as just turning into one single process","width":299},{"text":"now i am going to show you some systems programming magic","width":187},{"text":"where actually we can turn our single process into two","width":217},{"text":"here is how we are going to do it","width":105},{"text":"let us have a very simple program that says hello world","width":216},{"text":"and here it is","width":138},{"text":"so between these two lines however","width":198},{"text":"i am going to call fork","width":426},{"text":"and here's a surprise","width":91},{"text":"we get hello world world","width":90},{"text":"yes we get two worlds","width":129},{"text":"why is that","width":65},{"text":"well at the beginning there was a single process","width":117},{"text":"but then we called fork and now our single process is actually being cloned","width":340},{"text":"it has been split into two","width":111},{"text":"so both the processes print out world","width":164},{"text":"and so we see both their output on our little terminal here","width":297},{"text":"okay what else can we do with this","width":97},{"text":"well let us first of all show that there really are two different processes","width":192},{"text":"i am going to look at their processor id","width":351},{"text":"and we will print it out","width":168},{"text":"so i will call getpid()","width":102},{"text":"and you will see that yeah i have got two different processes","width":258},{"text":"both trying to run at the same time","width":191},{"text":"in fact i have got a parent child relationship here","width":289},{"text":"i have got the original process","width":128},{"text":"the parent","width":63},{"text":"and you can think of fork as saying let us clone this original process right here right now","width":375},{"text":"so that i get a child that looks just like me","width":153},{"text":"or at least almost like me","width":111},{"text":"in many many respects","width":63},{"text":"it is the same memory","width":152},{"text":"it has got it's own variables","width":63},{"text":"but because its got its own address space","width":251},{"text":"what the child now does in terms of its memory is seperate from the parents","width":369},{"text":"okay so let's show you what we can then do with this","width":330},{"text":"first of all fork actually returns something here","width":154},{"text":"it actually returns back an id","width":192},{"text":"so let's make a note of that","width":188},{"text":"and we'll print it out","width":124},{"text":"so we'll say %d and we'll print out just here","width":552},{"text":"okay so here is what we see","width":166},{"text":"that the process id 681 has fork value of 682","width":562},{"text":"and process 682 has a fork return value of 0","width":386},{"text":"so the fork value is different for the parent and the child","width":290},{"text":"and in fact fork","width":173},{"text":"if it returns a positive number is talking to the parent","width":238},{"text":"and is telling the parent here is the id number for your child","width":333},{"text":"so let us make a note of that","width":162},{"text":"let us call this","width":75},{"text":"here is my child","width":63},{"text":"so i can call my child","width":149},{"text":"and then i can write an if statement to decide if i am the parent or the newly created child or not","width":466},{"text":"so we will say look if the child id what i return from fork is actually greater than 0","width":470},{"text":"then i am the parent","width":194},{"text":"so let's put something like hey i'm the grouchy parent","width":575},{"text":"if it is zero however then hey I'm the carefree child!","width":905},{"text":"so we will let's remove this ","width":254},{"text":"i'll get rid of that line now","width":83},{"text":"okay so now we have a little program where the parent and child are going to do two different things","width":381},{"text":"and in fact it is standard for the parent to wait for the child to finish","width":438},{"text":"we don't have to but quite often we need the child process to do something for us","width":436},{"text":"perhaps in the background","width":112},{"text":"but we don't actually want to continue until the child has finished","width":234},{"text":"so let us do that","width":88},{"text":"what i am going to wait for my child to finish","width":262},{"text":"so i am going to say waitpid and i need to say okay what is the id i need to wait on well here is the childid","width":566},{"text":"and later on i can ask for some status information about my child","width":345},{"text":"and for now the last argument i am just going to put as 0","width":189},{"text":"so i need to have a variable called status just a little integer","width":299},{"text":"and in fact we are going to pass not just the value of status but the address of our little variable","width":400},{"text":"and later on we can use that to find out say did our child exit normally or was it terminated in a surprising way","width":492},{"text":"so let us run this now and what we will expect to see is that we'll wait for the child to finish before we print","width":519},{"text":"I'm the grouchy parent","width":63},{"text":"so let's run this","width":393},{"text":"okay so this time the child process got to print out I'm the carefree child","width":442},{"text":"then it exited","width":119},{"text":"meanwhile the parent was waiting for the async condition and when that happened","width":342},{"text":"the parent is able to continue and is able to print I'm the grouchy parent","width":416},{"text":"so i want to finish on a common programming error that can really bring down a server","width":564},{"text":"and that is suppose we made many many many processes","width":406},{"text":"so it is one thing to create a few","width":142},{"text":"let's call say fork a couple of times and perhaps you can guess how many worlds we'll see here","width":971},{"text":"that's right we see four worlds","width":146},{"text":"and in fact the parent finished early so this is the hash of the terminal saying what would you like to do now","width":540},{"text":"but we had four processes all printing out world","width":212},{"text":"and if we had three forks now we have eight","width":311},{"text":"okay so let us make something now called a fork bomb which is where we keep creating lots and lots of processes","width":550},{"text":"and this often happens by accident by people who are new to systems programming","width":326},{"text":"but just for fun because i am just doing this inside a browser it doesn't matter if i bring my little virtual machine to a halt","width":582},{"text":"i can always just reload the page","width":114},{"text":"so let's print out my id","width":630},{"text":"i will put this in a little loop that says while one let's fork","width":327},{"text":"let's print out my process id","width":347},{"text":"and then i will sleep two seconds","width":460},{"text":"so initially i have two processes","width":111},{"text":"and then each of those processes calls fork","width":209},{"text":"so we got four","width":51},{"text":"and then each of those processes call fork","width":171},{"text":"prints it out and sleeps","width":93},{"text":"and so every two seconds i am doubling the number of processes that are in my system","width":291},{"text":"so that's a lot of processes","width":124},{"text":"and in fact pretty soon the kernel will run out of space","width":324},{"text":"it won't be able to keep track of any more processes","width":138},{"text":"and fork will stop working","width":220},{"text":"and now we see here's the kernel printing out all sorts of debug messages","width":248},{"text":"desperately trying to make the system stable again","width":190},{"text":"as it arbitrarily starts to kill processes in an attempt to recover some memory and space in its process tables","width":539},{"text":"so amazingly my little kernel here has managed to recover to the point to where i have a working system","width":500},{"text":"but that is fork bombs and you should avoid from accidentally doing this","width":346},{"text":"otherwise you will have a system administrator telling you that you cannot log onto that machine anymore","width":286},{"text":"okay have fun and i'll see you in the next video","width":194},{"text":"bye","width":39}],

  // Start Lecture Video 0
  // Video 21
  [{"text":"okay, good morning class, how are you","width":367},{"text":"I'm good thank you","width":103},{"text":"alright, for those of you that weren't paying attention, cs241 has started. good morning class, how are you?!","width":373},{"text":"alright, great. so, in the next 15 minutes the game of course is for you to leave this room with more passion for system programming and maybe some more knowledge about how to do it as well","width":668},{"text":"and maybe some knowledge about how not to do it as well","width":210},{"text":"so one of the intents here is cover gotchas and common programming mistakes","width":280},{"text":"so, if you have a burning question, there's probably someone else in this room that has the same question","width":321},{"text":"I will endeavor to answer as many questions as possible without derailing the lecture","width":238},{"text":"so feel free to speak up","width":135},{"text":"if it's not appropriate, I will tell you","width":115},{"text":"and, just stay, come down and talk to me afterwards","width":147},{"text":"also, I hold office hours usually three times a week immediately after lecture","width":265},{"text":"because I figured thats the best way to reach most of the students","width":238},{"text":"so feel free to stop me","width":150},{"text":"I may not be able to stay for a full hour every time","width":157},{"text":"for example, there's a faculty meeting today where we're talking about how to take over the world","width":276},{"text":"uiuc style","width":83},{"text":"but most times I'm there to help you","width":286},{"text":"and I love to see people progress. its fantastic stuff when you start from the beginning of this course when you don't know anything","width":397},{"text":"till the end where you can actually do some pretty cool things","width":187},{"text":"and by the way, last semester many students came to me to say \"hey! you know what? I just had an interview and they asked me to explain X\" where X is a cs241 thing","width":657},{"text":"such as, what's the difference between a process and a thread?","width":223},{"text":"whats the difference between stack memory and heap memory?","width":136},{"text":"how would you do that?","width":55},{"text":"what's a common gotcha with this?","width":104},{"text":"why would a C program crash? that kinda stuff","width":265},{"text":"so you might find that the knowledge you gain in this class actually has an immediate impact for you outside of this class","width":413},{"text":"and if it does, wonderful!","width":160},{"text":"alright, so, let's get started with a couple of trick questions","width":333},{"text":"that we have here, wanna go to overhead, right!","width":292},{"text":"okay! how do you look up information for C library calls and system calls?","width":228},{"text":"easy! okay, here's the beautiful thing. with POSIX, POSIX includes many things","width":605},{"text":"it includes an API (application programming interface) in other ways, instead of calls, you can call","width":392},{"text":"and also, a manual of man pages about those calls","width":374},{"text":"so guess what? we're actually going to look up different calls","width":227},{"text":"the art of course is knowing which calls you should use","width":329},{"text":"and the POSIX man pages aren't going to tell you that","width":202},{"text":"you already have to have a basic idea of \"oh yeah! I need to use open\" or \"or yes! I need to use write or stat or lstat or fork()\"","width":629},{"text":"so that's the main thing you're going to get out of this course is the vocabulary","width":264},{"text":"with the then end expectation that you would actually then start to use this stuff and look it up","width":320},{"text":"so we've got two different kinds of things. we've got C library calls and system calls","width":463},{"text":"the C library is the part of your process","width":188},{"text":"okay, what's the difference between a program and a process?","width":153},{"text":"well, the program is the code that you've written turned into bytes which say you stored on disk","width":339},{"text":"and then when you actually execute it, or actually run it, it becomes a process","width":274},{"text":"and of course you can have multiple processes running for the same piece of program code","width":310},{"text":"but part of that process is the C library","width":146},{"text":"it comes kind of bundled with or loaded at runtime and it's a set of code and maybe some constants too that just runs as part of it","width":524},{"text":"so what kind of C library calls do we have? well for example, perhaps you want to do a string copy where you want to say \"okay, copy all the bytes into a destination from a source\"","width":787},{"text":"and we're gonna pass two pointers and it will keep copying those bytes starting from source into destination until what?","width":666},{"text":"until it reaches a zero byte","width":156},{"text":"because that's the definition of a C string","width":192},{"text":"of course, bad things might happen if you accidentally put these in the wrong order","width":312},{"text":"alright, if you tried to copy from some arbitrary place into a different place, who knows how many bytes its gonna copy before it gets to zero? oops.","width":512},{"text":"who knows where its going to immediately crash your program?","width":171},{"text":"for example, it might be that you try to write into some read only memory","width":306},{"text":"and the hardware say \"ah ah excuse me? excuse me? you see that process over there? it's being a baaad baaaaad process\"","width":483},{"text":"ok lady gaga I might","width":107},{"text":"so, look I enjoyed that joke personally","width":296},{"text":"so, let's um, this is an example of a C library call. it doesn't need to go into the system to run this","width":635},{"text":"we can do this entirely inside the process space","width":218},{"text":"inside the virtual memory of our proces","width":226},{"text":"ok, what about system calls? well, here's an example of one, you've already seen it: \"write()\"","width":412},{"text":"we want to get outside of our system. we want to break out of our system and get the system to break outside of our process and do something","width":444},{"text":"to the rest of the world","width":123},{"text":"okay, so, the system itself needs to handle that particular call","width":361},{"text":"and in fact it does that using a hardware interrupt","width":262},{"text":"that's the red pill, if you follow the matrix movie","width":218},{"text":"that's how you escape out of the box. out of the sandbox that your poor little process is stuck inside","width":508},{"text":"anyway, so we want to look up say some information about these and so for that we can use \"man\"","width":420},{"text":"which reads man pages","width":154},{"text":"which are incredibly terse and utterly useless if you dont have some basic knowledge","width":322},{"text":"but pretty useful if you already know something about what you intend to do","width":369},{"text":"so let's try one","width":276},{"text":"box pc","width":392},{"text":"okay so let's try looking up for example \"printf()\"","width":317},{"text":"there it is","width":44},{"text":"and it's in section 3 of the man page","width":96},{"text":"okay yeah, we want to open it. there it is","width":125},{"text":"now what do we see about these man pages? well the things I want to show you is that first of all it tells you what includes you better have","width":448},{"text":"it also includes a whole load of function calls which do similar things","width":300},{"text":"so, as well as printf, we've got sprintf or snprintf","width":367},{"text":"and, then we've got some really terse information on what it's gonna do","width":286},{"text":"and usually its got a return value as well","width":299},{"text":"so they might return say the number of characters printed","width":316},{"text":"excluding the NULL byte used to end output strings","width":192},{"text":"notice how those display little parenthesis here as if its not that important","width":325},{"text":"as if the number of bytes written is not that important to you","width":189},{"text":"as if that could never cause a big program to fail","width":239},{"text":"accidentally, you might assume that that is the actual number of bytes written","width":218},{"text":"no no no, it excludes it and it's an off by one error","width":172},{"text":"it's actually going to ignore the fact that it may have written a zero at the end because it's the end of a C string","width":394},{"text":"oops! that's exciting.","width":107},{"text":"you may have not had enough memory. you may have overwritten something else","width":306},{"text":"so, when you read man pages, read them slowly and try to understand everything they say","width":443},{"text":"and of course, it's always useful to find an example","width":266},{"text":"oh, this one actually has one, look at that! amazing","width":194},{"text":"most of them don't bother with an example","width":101},{"text":"so you end up doing any google search to say \"okay, easy example of blah blah blah blah\"","width":339},{"text":"but yeah so they're a good reference material","width":220},{"text":"now you'll notice we had different sections","width":137}],
  // Video 22
  [{"text":"Let's do another one","width":182},{"text":"Let's look for fork - create a child process. Yes, that's right, you create children by forking","width":922},{"text":"I knew you'd remember something from this lecture. We'll play more with this later because it's an amazing thing you can do with posix. You're first process can actually clone itself, at that very moment to become two separate processes","width":1221},{"text":"It's like you pull a switch and suddenly you've got a doppelganger","width":347},{"text":"If you're a physicist and you think about the many worlds theorem, it's a bit like that. The world from a process point of view splits into two. Suddenly you've got two processes for the price of one","width":681},{"text":"OK, so we'll see that. But again, notice we had different sections","width":265},{"text":"The sections you're going to see are.... can you see this? let's see if we can make it bigger","width":721},{"text":"section two, alright. This is where all the system calls live","width":368},{"text":"section three, this is where you'll find the C library stuff","width":275},{"text":"and section seven, you'll occasionally find there's actually longer articles. I hesitate to call them tutorials, they're not that useful","width":668},{"text":"but more long winded articles that have some better practices. it's worth reading at some point during this course","width":472},{"text":"you might find some useful information there. for example, when we talk about signals, but most of the time you'll be using these as reference","width":496},{"text":"unfortunately, let's go back to here and look up stat. some words appear in multiple places and if I make a new window here","width":970},{"text":"and I do man stat, then I get the wrong one. I get the one that would happen from the shell. So i have to say 'no, no, no I really wanted section two'","width":942},{"text":"so sometimes you have to force it to find the right section","width":411},{"text":"that's enough about man pages. you will be using them. when it comes to quizzes, i'll talk more about that later, but i will have expected you to know something basic about the return values, some of the common gotchas of using different calls","width":1074},{"text":"do you remember how to allocate memory on the heap?","width":398},{"text":"if your neighbor said 'malloc' congratulations, you made a good seating choice","width":356},{"text":"yes, malloc is one way to say 'hey, I need some memory and it's mine until I what?'","width":855},{"text":"free it, yes! ","width":216},{"text":"when you call malloc you are going to point to some bytes. will those bytes be zero?","width":788},{"text":"do you feel lucky punk? the answer is maybe, but it's not guaranteed. ","width":411},{"text":"if you get a brand new, fresh page of memory from the OS it's likely to have been zeroed out by the OS to make sure you don't accidently get any information from another process","width":831},{"text":"remember, we're trying to keep our processes separate, so you can't accidentally read someone else's password, or secret key, or something else that's secretly happening inside another process","width":550},{"text":"the OS makes sure to usually give you some zeroed memory","width":315},{"text":"however, if it's reuse of your own memory, it's quite likely there's just garbage in there","width":493},{"text":"it could be that because it's zero it lulls you into a false sense of security, you assume memory is zero","width":607},{"text":"why did C do this? sounds like a terrible thing to put the onus on programmers to make sure their programs always work. why didn't they always zero out the memory?","width":941},{"text":"time consuming, yes! C is all about trying to be as efficient as possible and if you can't cope with that, get a different major","width":725},{"text":"That is C's attitude, maybe we can find tools to spot memory errors, but it's very much a case of we're trying to write a language which is just a little bit above assembler. it's meant to be that it's almost as efficient as assembly code, just a lot easier to read and write","width":1409},{"text":"malloc has to be very efficient because we use it a lot. think about your java programs, OK I'm sorry. I know that was a bad experience, but think about all the times you've made new objects, etc.","width":832},{"text":"underneath that we're saying 'OK, I need some more memory'","width":276},{"text":"so malloc's job is to find some bytes. you say 'oh quick, I need another thirty two bytes and I need it right now. I can't continue my process untiil you give me thirty two bytes fo rme to play with. And, yes, I promise to free it later when I'm finished with it.'","width":960},{"text":"some processes are allocating a lot of memory all the time. so malloc tries to be efficient and when you free some memory, we can put it back into this pool of bytes that we can use later again. That's why it's called a heap, it's just going to be a big disorganized mess of allocated space and unallocated space","width":1346},{"text":"And, in fact, it's tricky to write malloc and free, so we are going to ask you to do it in 241","width":491},{"text":"we've got malloc and free. later on you'll also see halloc and realloc, but let's not talk about those now","width":580},{"text":"you can just implement those on top of malloc","width":389},{"text":"suppose we wanted to write our own string copy function. here it is!","width":562},{"text":"because these are character pointers, I should mention, how big is a character in C? ","width":638},{"text":"the size of a single [byte]","width":221},{"text":"if I do sizeof character,the answer is one. everywhere, at all times, before I even compile the code. it's a definition that the size of a character type is one","width":1079},{"text":"sizeof gives you the number of bytes","width":416},{"text":"so a character is always one byte. If i put a variable name in there I'd get one","width":618},{"text":"when I add one to these pointers, it is going to be incrementing along one byte at a time. I read one byte and I add one to the source pointer and add one to the destination pointer","width":902},{"text":"this code is slightly broken. perhaps you and your neighbor can figure out how it should be fixed. i'll point out the following","width":742},{"text":"what does this do? while star source","width":363},{"text":"thank you, yes! remember star means dereference, follow the money, take this expression and use it as a memory pointer and actually tell me what's in there","width":649},{"text":"because we're talking about a character pointer, we are asking memory to read just one byte. if we had an int pointer we might be reading four or eight bytes","width":553},{"text":"but, no, we're reading one byte. while this is non-zero, do something. with C, anything which is a non-zero value is true","width":679},{"text":"what a wonderful simple world","width":185}],
  // Video 23
  [{"text":"my love for you is 42","width":170},{"text":"so this means this is going to continue until we get that null byte","width":386},{"text":"alright that's enough hints","width":107},{"text":"let's fixed that code","width":185},{"text":"right so see if you and your neighbor can fix this code faster than your other neighbor that you're not talking to","width":724},{"text":"it's not copying the string, that's one of the bugs","width":3769},{"text":"copy the bytes so actually we didn't just want to copy src into dest ","width":331},{"text":"all this would do is whatever the value of src is whatever the value of src is i is just some memory location, we set that into dest","width":456},{"text":"but dest is just a local variable so that would actually do nothing, it would actually just change src into dest","width":419},{"text":"what we want to do is just use src as a pointer","width":226},{"text":"so we need to put a star in here","width":168},{"text":"there we go","width":38},{"text":"right so we should have read the value at src hey go back to memory and then use dest as a pointer","width":424},{"text":"we wanted to dereference it ","width":75},{"text":"we wanted to say okay now write that value into whatever dest is pointing to","width":269},{"text":"so we've done that, we've copied one byte and we increment both pointers","width":251},{"text":"and then we go back around the loop so we're going to keep writing bytes until we get to the null byte","width":335},{"text":"is my function finished?","width":141},{"text":"no, what's wrong with it?","width":284},{"text":"yes thank you, yes we forgot to copy the null byte","width":289},{"text":"so this function is broken it forgot to copy the null byte","width":266},{"text":"but it might work if you test it if you happen to test it with memory that was already zero","width":417},{"text":"and you think aha I finished my mp","width":162},{"text":"right, no your code is broken","width":178},{"text":"because is forgot to terminate the C string","width":172},{"text":"and then some future function would start reading this and it wouldn't come across a null byte because there would be garbage after it","width":453},{"text":"and it would start printing random characters","width":274},{"text":"until it eventually got to a null byte","width":183},{"text":"of course if it didn't get to a null byte maybe other bad things would happen","width":192},{"text":"anyways so let's fix this","width":123},{"text":"we needed one more line to say after the while loop ","width":157},{"text":"alright the src should be a null byte which I could write like this","width":926},{"text":"okay here's another example of a classic C error which is when you've got two pointers you're probably using the wrong one","width":629},{"text":"okay so make sure that we change the very last byte at the end to be a zero byte","width":372},{"text":"so we terminate it","width":113},{"text":"we could have also fixed this by using a do while loop instead of a while loop","width":506},{"text":"so we would have only done the check at the very end","width":137},{"text":"we would have copied at least one byte","width":128},{"text":"alright so that was my string copy","width":156},{"text":"how about something that actually duplicates strings","width":424},{"text":"right so we want something that takes a character to some memory and we are going to make a new memory object","width":642},{"text":"and we're going to copy the contents of the original into our new piece of memory","width":347},{"text":"right so how do I get some new memory? easy I remember what I said ten minutes ago and say malloc","width":610},{"text":"so I've got malloc I've got the right size I copy.. whoops wait a moment I've got two pointers am I using them in the wrong direction?","width":673},{"text":"if in doubt, yes I probably am right?","width":159},{"text":"how do we check? easy go back to the manpage alright","width":293},{"text":"man let's try strcpy and BSD kindly calls them s1 and s2","width":906},{"text":"okay copies a string from s2 into s1","width":155},{"text":"yes we managed to do it the wrong way round","width":163},{"text":"what we should have done is swap these around","width":664},{"text":"by the way is this text large enough to see at the back?","width":182},{"text":"can you give me a thumbs up if it is?","width":200},{"text":"alright so most of you","width":104},{"text":"alright I'm assuming the people who didn't are going to sit closer to forward in the future","width":260},{"text":"but seriously let me know if it's not","width":190},{"text":"okay right is our code finished? okay we run it and it doesn't work, it might crash","width":764},{"text":"here's one problem, what's the size of src? what will this give us?","width":461},{"text":"one, we've managed to allocate enough space for one byte","width":221},{"text":"and then we try to write into that one byte","width":295},{"text":"okay that's fine if our string is very short, just one byte long","width":366},{"text":"not so fine if our src strings were longer","width":207},{"text":"so we shouldn't have done this right?","width":175},{"text":"what we wanted to know was the number of characters at the src","width":301},{"text":"so how can we do that?","width":219},{"text":"call strlen of src","width":500},{"text":"so now we test it and it almost works but it still crashes","width":218},{"text":"here's the issue, strlen tells us about the number of characters excluding the null byte at the end","width":380},{"text":"look C is trying to help you give off by one errors","width":292},{"text":"what a polite language, if it's not my fault it's your fault","width":283},{"text":"alright look we only need to add one to that","width":198},{"text":"that's just evil huh? who came up with this","width":254},{"text":"alright so when you write a language don't do this","width":442},{"text":"make your strlen actually say how many characters, how many bytes it actually took","width":288},{"text":"okay so we've got now we're calling malloc and we copy from the src ","width":539},{"text":"so this should be p, this should be from the src into our memory and finally we return p","width":379},{"text":"is it okay to turn p because look p is an automatic variable","width":252},{"text":"it's a local variable","width":53},{"text":"is that a problem? no because we are not returning a pointer to p itself","width":299},{"text":"we are running the contents of p","width":123},{"text":"and p is just looking at this memory that we've malloc'd and that memory that we've malloc'd will exist until we free it ","width":473},{"text":"now malloc itself returns a void pointer and if we wished we could cast that changes type into a character pointer","width":562},{"text":"in practice you don't need to","width":411},{"text":"that if you have a void pointer it's okay, it's allowed to cast it implicitly to a different type","width":526}],
  // Video 24
  [{"text":"alright so, is our code any good?","width":185},{"text":"yes, question?","width":629},{"text":"okay, so, this was discussed on piazza. it makes the code a bit more cluttered. if you do too many casts, you're forcing your way, you're saying: \"hey compiler, trust me I know what I'm doing\"","width":1076},{"text":"which is fine until the day you don't know what you're doing","width":166},{"text":"and you've just casted something which is incorrect","width":159},{"text":"maybe you're casting a pointer to a pointer to a pointer.","width":271},{"text":"and you would've potentially gotten a compiler error but by explicitly casting, you won't get any error","width":551},{"text":"so that's probably the biggest issue","width":76},{"text":"yes","width":411},{"text":"oh, I'm so, yes, you're right. I forgot that it's a character pointer. it would not have returned 1. it would've returned say 4 or 8 or however big your pointers were on your platform","width":958},{"text":"so, if its a 32 bit platform","width":323},{"text":"then how many typical bytes do you need?","width":406},{"text":"well, 4 bytes to hold 32 bits","width":134},{"text":"if its a 64 bit machine, then you'd need 8 bytes","width":594},{"text":"right, so, our code looks pretty good except one little issue. if you read the manpage of malloc, you can discover that malloc() can fail. and when it fails, it returns","width":686},{"text":"quick! read the man page!","width":77},{"text":"right, when it fails to give you any memory, it returns NULL","width":322},{"text":"so, we should check for that","width":100},{"text":"because right now our code would attempt to write into that 0 location","width":358},{"text":"if malloc fails","width":48},{"text":"so what we should do is, here is, we should, if p or not p which is another way of saying \"hey, is p zero\"","width":1196},{"text":"I didn't give any memory so no new string duplication for you","width":285},{"text":"and hopefully the code that calls my code actually bothers to check to see whether it got a valid pointer or not","width":517},{"text":"alright, okay, any other questions?","width":288},{"text":"alright, what's a double free?","width":438},{"text":"okay, so, let's say we free pointer, and then for some reason later, we free the same pointer","width":703},{"text":"in other words, we called free twice on the same memory block","width":241},{"text":"is that a bad thing?","width":148},{"text":"yes, that's a bad thing","width":144},{"text":"okay, here's why","width":118},{"text":"when you call free, the memory allocator says \"oh, look!\" he or she is finished with that memory so I can put it back into my free pile","width":717},{"text":"and I might allocate it again when someone asks for more memory but I'm going to update my linked list structures and whatever internal structures I have to keep a count of what memory is free","width":871},{"text":"so if you call free again, bad things may happen to those linked list structures","width":403},{"text":"bad things may happen to other code that's already actually using that memory space","width":467},{"text":"alright because between you freeing it and freeing it again later, it could be that another malloc has come in and been given that memory","width":589},{"text":"so when you double free, really exciting things can happen","width":217},{"text":"you have no idea what's gonna happen next. you have broken the universe at this point","width":369},{"text":"because, artibrary things can happen to your heap memory and who knows what the rest of your program is doing to your heap","width":538},{"text":"so, how can you avoid it? well, there's a couple of ways. first of all, don't write this code","width":368},{"text":"secondly, it's a good practice in production code to set your pointer to zero","width":393},{"text":"in other words, don't have, what are these pointers called now?","width":497},{"text":"the dangling pointer!","width":67},{"text":"it's a pointer to some memory address that is no longer yours to play with","width":308},{"text":"because say you free'd it","width":128},{"text":"and you don't want another piece of your code to accidentally use that pointer","width":461},{"text":"so, when you free memory or decided to use memory for some other purpose, it's good practice to set pointers to that memory to zero","width":901},{"text":"this of course looks very easy and trivial to avoid. in practice, these two frees could be somewhere arbitrary in your program. maybe someone kind of tries to free your data structure twice","width":833},{"text":"and then you end up calling free on some memory twice","width":453},{"text":"right, okay, let's have an example of a buffer overflow","width":466},{"text":"well a buffer in C can be anything. for example, it could be just a simple array","width":298},{"text":"so, let's make an array myData","width":722},{"text":"and this says, \"okay, I need space for 8 bytes or 8 characters\" and","width":1022},{"text":"let's set one of those entries to p. is that allowed in C?","width":681},{"text":"okay, so that's a trick question. yes, the compiler will compile that for you, it might give you a warning, it might get an error if you've racked up enough options","width":772},{"text":"but remember, what are we doing here is we're just simply saying \"okay, take whatever data's pointing to, add 8, times whatever the size of each entry is, and then use that to change some memory\"","width":737},{"text":"we actually want a bit representation in our p","width":360},{"text":"but, when we did this, we only asked for enough space for 8 entries. and we're trying to write a 9th entry. oops!","width":723},{"text":"we could also have run into the same problem if we had string copy","width":555},{"text":"one two three four five six seven eight","width":386},{"text":"ahh, I did it the wrong way around","width":409},{"text":"okay, so there's two things wrong with this code. first of all, the arguments is the wrong way around","width":534},{"text":"second of all, how many bytes is this going to write?","width":272},{"text":"into memory?","width":98},{"text":"nine!","width":51},{"text":"I've got the digits 12345678, and the NULL byte at the end to say \"hey! my string is finished\"","width":457},{"text":"but we only made space for 8","width":230},{"text":"so that ninth byte. what's that ninth byte being used for? maybe it's being used for another variable in which case we've just overwritten the value of another variable","width":636},{"text":"and that is how many C programs are vulnerable to buffer overflow","width":407},{"text":"that is how you could hack into say, a web application which didn't put enough space on a buffer","width":735},{"text":"and you could then overwrite nearby variables","width":290}],
  // Video 25
  [{"text":"let's do our last little thing here. what is typedef?","width":553},{"text":"it's just an alias","width":213},{"text":"we've got some basic types in C, but you can use the keyword typedef to say 'hey I need something else'","width":625},{"text":"I might have an unsigned int","width":428},{"text":"OK, that's a lot to type. I'm just going to call that my u int or I'm going to use an unsigned int to represent process identifiers for example. So don't be scared when you see typedef, it's just being able to alias a particular type so that you can have a short name for it","width":1430},{"text":"questions? yes!","width":426},{"text":"because writing struct x is painful and people don't want to have to write the keyword struct everytime","width":1247},{"text":"let's say I have a struct called poem","width":989},{"text":"now I'd have to say 'right suppose i wanted some memory'","width":203},{"text":"I want a pointer to a poem, so struct of poem pointer malloc sizeof struct poem","width":769},{"text":"it's kind of annoying to keep writing struct everywhere, yes? so instead you'd say typedef and that can be my poem struct","width":1168},{"text":"And then you might go further and say I want a poem pointer, so poem_s star poemptr","width":824},{"text":"then you might write this code and then you might write this code and that would be wrong","width":722},{"text":"whoops, look, i just tried to get the size of my pointer. that's going to be four bytes or eight bytes","width":322},{"text":"I didn't want that, I wanted the sizeof my original structure. be careful when you start playing with typedefs","width":932},{"text":"you'll see typedefs commonly used with structs and for things like unsigned ints","width":1041},{"text":"let's not compile this code for now","width":674},{"text":"instead let's print some things out here. how can I print strings out and single characters? well you've seen printf, fantastic. guess what? there's also","width":773},{"text":"putchar sixty five and that's going to print","width":565},{"text":"a single 'a'","width":203},{"text":"so if you wanted to print out a single character, there are these C calls like putchar","width":607},{"text":"if you want to print out a line, there's put s","width":417},{"text":"Hello World","width":315},{"text":"'It prints a new line too'","width":407},{"text":"so that's useful if you know that all you need to do is print out a C string. it will print out a c string followed by a new line","width":658},{"text":"all of these calls underneath end up calling, what? ","width":423},{"text":"yes, they call write","width":254},{"text":"<gibberish> some point your C library says I've had enough holding these bytes, I want to get rid of them, I want to flush them, I want to send them out and when it wants to do that it calls write to the OS","width":766},{"text":"it turns out actually you don't need to print everything to stdout. your processes by default have two output streams. one called standard out, one called standard error. let's prove that","width":1202},{"text":"let's use fprintf. I'm going to say something like 'this is using printf' and we'll try to run that and it doesn't work","width":829},{"text":"we get an error because we haven't given enough arguments to fprintf and in fact the. let's look it up","width":1177},{"text":"fprintf, yeah we need the file stream first. we can say standard error","width":830},{"text":"here's the thinking, here's why standard out and standard error exist and they're not quite the same","width":293},{"text":"quite often when we want to use these tools we want to process the output of one tool and send it immediately into the input of another tool","width":505},{"text":"but what about errors? well we'd like to see them still in the terminal, we'd like to send them to a different file","width":375},{"text":"you're compiler for example, might send - ahh","width":339},{"text":"what have we done wrong here? standard error undeclared? ah","width":910},{"text":"OK, great, that really did print. This is using fprintf. We can send things to these two different output streams and you too can make your own output strings by using fopen","width":1145},{"text":"And also they have different bufferings","width":716},{"text":"What've we got here? I've shown you things like puts and putchar","width":730},{"text":"how do I print - use fprintf, for example, I can send it to standard eror, blah blah blah","width":672},{"text":"is standard error buffered like standard out? no! standard error immediately calls write, it doesn't try to do any buffering","width":986},{"text":"standard out is a little bit diferent. standard out tries to have better performance, so rather than writing every single byte, let's collect a few up and once we assembled enough bytes then we'll call write and make it appear","width":964},{"text":"standard out by default when you're just looking at things in terminal buffers until you see a new line","width":672},{"text":"so if we see a new line, let's flush that buffer!","width":340},{"text":"in other words, call write on the whole buffer and out it goes","width":248}],
  // Video 26
  [{"text":"let's prove this while one do nothing ","width":2336},{"text":"right so we got the very first line over here","width":285},{"text":"from printing to standard error but we did not get the standard out line","width":346},{"text":"so look at my code, I said \"hey this is using printf and this is using printf exclamation point\"","width":272},{"text":"the difference between the two is that one of them went to standard error","width":163},{"text":"and we saw that straight away","width":102},{"text":"standard out that text is still sitting inside my process","width":286},{"text":"inside the c library because we didn't include any new lines and now my process has got stuck inside this infinite loop","width":575},{"text":"so now when I control C the program never has a chance to flush that buffer","width":401},{"text":"it never has a chance to write it out","width":225},{"text":"if I did just exit normally, if I did just say return 0 here","width":729},{"text":"then as part of the exiting, the C library says oh look I've got some open file descriptors","width":484},{"text":"I will make sure that my buffers are flushed","width":184},{"text":"so it does that at the very end as the program is finishing","width":425},{"text":"right oh and one last thing here, if you actually want to print into a C string","width":259},{"text":"the best thing to use is sfprintf but I'm not going to talk about that today","width":267},{"text":"but that's assemble things into, yes quick question","width":439},{"text":"there is two different streams so it's up to the terminal at the end to combine it into one and display it","width":465},{"text":"but we could make it so that the standard error goes to a completely different file or goes somewhere else","width":320},{"text":"let's have a look at page two","width":414},{"text":"okay when you free a null pointer, nothing happens, it's a safe operation by definition of the spec","width":727},{"text":"being thinking beings, you want to see errors as soon as possible","width":233},{"text":"you can actually change it there's a call called setvbuff if you want to change it but that's the idea","width":421},{"text":"right okay so which one should we do here","width":539},{"text":"let's do these three, these are the funnest ones","width":341},{"text":"the first three questions on this you can see on the wiki book","width":419},{"text":"I want to kind of go through these, first of all let's write our most exciting system program today","width":603},{"text":"I'm going to use this fork and for that we need to include unitstd.h so let's do that","width":1257},{"text":"so let's print something out in our little program here, let's find out what our process id is","width":512},{"text":"so I'll just do %d for now, that's good enough for this lecture","width":303},{"text":"let's call getpid to mean get my process identifier so we'll run this","width":684},{"text":"and next time I run it I'll have a new line as well so when I run it this time my program was process identifier 61","width":577},{"text":"and in fact if you do ps on a command line you can see all these different process little numbers","width":308},{"text":"and we'll use that later because we'll control them","width":198},{"text":"this little virtual machine doesn't have much going on","width":226},{"text":"right but if I was to run it again, I'd probably get a different process number","width":525},{"text":"one hundred and seventy five, okay","width":100}],
  // Video 27
  [{"text":"so now let's do something exciting","width":461},{"text":"let's call fork()","width":614},{"text":"look, I get two different numbers, 188 and 189","width":258},{"text":"I've actually got two processes running","width":216},{"text":"here's what happened: the moment you called fork(), your little process gets temporarily stopped for a nanosecond","width":624},{"text":"so the CPU's not going to execute anything in your code","width":231},{"text":"and we duplicate it","width":135},{"text":"we now have two nearly identical processes running","width":373},{"text":"and then we'll let them go","width":157},{"text":"so remember when I said, you pull a switch and you get an immediate doppleganger","width":207},{"text":"there's immdiately two processes","width":119},{"text":"now one thing you've noticed already is that they have different process identifiers","width":455},{"text":"another way that they're different is that one of them is the parent of another","width":1154},{"text":"let's get that back to result, and let's say...fork gave me the following","width":1102},{"text":"My pid is that","width":135},{"text":"okay, let's run that","width":585},{"text":"so, look at that! I got two processes running at the same time. one of them says \"hey! fork() gave me nothing. it gave me zero. and fork() gave me 203!\"","width":825},{"text":"so these two processes are now running in slightly different worlds. one of them had a different return value. one of them had a non-zero return value","width":533},{"text":"and in fact, the return value is the child process!","width":296},{"text":"so as a parent, if you wish, you could create a child by forking and then immediately kill it","width":403},{"text":"but I'm not going to show you how to do that today","width":157},{"text":"instead, I'm going to show you what happens when we fork() too much","width":732},{"text":"while 1 is greater than 0","width":505},{"text":"let's print that, let's not return, and let's sleep for one second","width":536},{"text":"just so we can kind of follow what's going on. actually, let's sleep for two seconds","width":351},{"text":"Are you ready? let's see what happens now","width":358},{"text":"okay! I've got two processes. OH! how many have I got now? FOUR processes. now I've got eight processes. now I've got 16. Each process, remember, sleeps for a second and then forks. it makes a copies of itself.","width":875},{"text":"so I've got all these running processes because say, I had 4 of them, and all 4 of them called fork(). oh dear, my system has crashed","width":682},{"text":"alright, eventually, my poor machine of course runs out of memory and it's unable to continue. alright.","width":1117},{"text":"so, actually, at this point, the system does its best to preserve itself","width":345},{"text":"it does its best to say \"ahhh, I don't want all these children!\"","width":203},{"text":"I cannot cope","width":98},{"text":"and so it prints out all the debugging information and then decides at random to start killing user processes. the idea being that that's the least bad thing that we could do in this case because we want to preserve the actual main operating system (the kernel running)","width":1101},{"text":"and maybe we'll have a few processes left that are still useful","width":181},{"text":"so let's see if I've even got a- no, I don't got anything do I?","width":216},{"text":"no, it's dead","width":64},{"text":"but that is an example of a fork() bomb. as you can see, it's pretty mean to everybody else that happens to be logged in to the system at the time","width":789},{"text":"so, when you start using forks for the MP, good luck!","width":378},{"text":"and try not to write fork bombs","width":133},{"text":"and with that, we'll finish there and I'll see you on Wednesday!","width":204}],


  // Start Lecture Video 1
  // Video 28
  [{"text":"your laptop before we release the official instructions ecetera","width":664},{"text":"but that is it. that is coming up","width":175},{"text":"alright, so, next question, who here is ready for section this week?","width":464},{"text":"and actually got a little working editor?","width":217},{"text":"alright, who here is still working on it?","width":214},{"text":"okay, who here is procrastinating and has not started yet?","width":266},{"text":"alright, okay, so note that if you raised your hand on that last question, you are definitely the minority.","width":336},{"text":"remember, the purpose of this work is for you to be on top of using these calls, understanding how memory works, understanding how to put them together so make sure you're ready","width":886},{"text":"and it's gonna be great prep for when we do the harder MPs","width":359},{"text":"right then so today here's what we're going to do. we're gonna talk a little bit more about C programming. I'm going to show you some more gotchas","width":382},{"text":"i'm gonna talk about getline I'm gonna talk about assert(), I'm going to show you some fun little demos and as usual, feel free to interrupt me and ask a question or two","width":654},{"text":"and as usual, most of this material is also in the wikibook. which was created last semester. So most of the lecture content, you'll see inside the wiki book","width":590},{"text":"alright, also, these lectures are now recorded so feel free to review them as well","width":337},{"text":"right so, let's have a look at our little handout. overhead!!...","width":605},{"text":"doo doo doo doo doo","width":489},{"text":"right! so here's something you can put inside your C programs. if you write line underscore and undersore or file underscore and underscore, something magic happens","width":665},{"text":"they get expanded by the C preprocessor into a number, as if you actually typed it, and a string, as if you actually typed in the file name","width":768},{"text":"that's currently being compiled","width":164},{"text":"so the value of line actually changes and the preprocessor knows which actual file line it is currently compiling","width":575},{"text":"so that can be useful for putting in debug information, so we can discover for example which part of our program is executing by printing this stuff out","width":758},{"text":"so, let's have a look, box pc","width":324},{"text":"okie dokie, so for example, I could say \"hey!\" or, let's just print it out. I'll do printf \"bad stuff happened in file %s at line %d\"","width":1293},{"text":"we'll put in, let's see I need the file and the string so that's a underscore. oops. can't get it back inside. thank you. file and line number.","width":771},{"text":"alright, so we will put a new line there...let's say exit our program so nothing else happens. okay, let's run this","width":1121},{"text":"alright, so there we go, bad stuff happened in file program.c at line 14. that's pretty useful if we want to open our editor and go back to that particular point. so that happened at runtime.","width":829},{"text":"and in fact that idea is used by another macro called assert","width":404},{"text":"so you can imagine we want to be able to say things like \"look, if my pointer is non-zero\" so I could say \"not equal to null\" or I could say \"not equal to zero\" or I could just say \"if not p\"  in other words, if its not a valid value","width":1270},{"text":"print an error message and quit","width":241},{"text":"right? that's a pretty useful thing to do during debugging. just do a quick test. before I start using p, I may be crashing in really strange ways so I just want to check if the following expression is true","width":647},{"text":"so that is actually what the assert macro does. so, I can say things like \"look, I want to assert that 2 is greater than 1\"","width":856},{"text":"let's check that. let's assert that 3 is less than 7 times 0","width":573},{"text":"right, let's run this","width":698},{"text":"we didn't get anything, did we?","width":750},{"text":"and, I'm wondering why","width":317},{"text":"let's see, we compiled asserts","width":415},{"text":"include assert.h and we don't seem to be. AH. we want to compile it in debug mode","width":537},{"text":"okay there we go, right","width":79},{"text":"so this time we, haha, yes! this time we remembered to include the assert.h and assert is actually a macro. it expands to include that underscore underscore line thing","width":837},{"text":"and underscore underscore file","width":86},{"text":"so now, here we go, when we run this, it prints out program.c at line 15 inside my function main assertion 3<7*0","width":578},{"text":"it's pretty useful. it actually shows you the expression","width":163},{"text":"it's a nice simple development thing to use asserts","width":329},{"text":"because then you can check that people that are calling your functions are actually giving you say valid arguments","width":317},{"text":"and you can check that your assumptions are correct before you try to write complicated code","width":344},{"text":"and, it kills your program. it aborts","width":203},{"text":"so that's assert","width":302},{"text":"now then, pretty easy to use, remember to include it, include...assert.h and then, and then inside your program you just say assert and write an expression you expect to be true","width":1181},{"text":"like \"Hey! its wednesday!\"","width":184},{"text":"if that expression is true, nothing happens","width":206},{"text":"and in fact, when you make a release build, this expression isn't even tested","width":464},{"text":"this compiles to no code","width":176},{"text":"so it's good for performance","width":230},{"text":"but then you realize that you've been living on the edge. it doesn't actually check it.","width":384},{"text":"and it's a macro, because we want to be able to print out the actual contents of the expression we're going to test.","width":405},{"text":"and also we want to print out the line number. and also it's a macro because we can make the contents of the macro disappear when we do a release build","width":718},{"text":"so, with that, let's see if you can write a version of string cat. and what you want to do for strcat is append the contents of another string onto the end of the first string.","width":1066},{"text":"but, we're not sure that people are giving us valid arguments","width":281},{"text":"so how would you write this so that it aborts if either one of these were NULL ?","width":385},{"text":"what would you write?","width":65},{"text":"so see if you and your neighbor can finish this","width":303}],
  // Video 29
  [{"text":"this function it should at the end simply return a pointer to the beginning of the target","width":495},{"text":"and i'll give you a hint, how do you actually determine where a string finishes?","width":464},{"text":"You walk along the string until you find a null character","width":286},{"text":"so the plan should be walk along with a little loop until you find a null character and then start copying the bytes from the source at that point to keep copying them across","width":561},{"text":"until you get across a null character in the source and then you know you're done copying","width":284},{"text":"and then before you finish make sure the very last thing you put at the end is a null character to terminate your string","width":515},{"text":"see if you can finish that code in about five minutes and I'll walk around answer any questions you have","width":519},{"text":"questions? ice cream? popcorn? yes?","width":16070},{"text":"if you wanted to check that these are valid pointers, we want to check that they're non null","width":344},{"text":"so actually we could just say assert dest","width":548},{"text":"you could even say dest and source, however, that wouldn't give you very much debugging informationÂ all you'd discover is that one of them is broken","width":698},{"text":"so personally I wouldn't do that, I would write it as two different things on two different lines","width":300},{"text":"so that when it does it break I can discover at least whether the problem was with the source or the destination address","width":615},{"text":"OK, right, so if I get past that I know that both of those pointers are non null. my next challenge then is to walk to the end of the dest","width":868},{"text":"I could do that using a little loop. I could say things like while star dest ","width":731},{"text":"keep incrementing dest","width":247},{"text":"so that would work, in other words whilst - when I read the contents that dest is pointing to - whilst that's non null keep walking","width":600},{"text":"and it will keep doing that until I end up on a null byte. I also heard people doing things like, let's just add into dest strlen dest","width":1034},{"text":"in other words find out how many characters excluding the null byte, are pointed to at that destination and add that to dest","width":424},{"text":"so both of those would work","width":126},{"text":"now we want to copy. OK, how could we do this? well maybe I call string copy, but if I wanted to write this in a loop, let me write this little do while loop","width":1025},{"text":"going to dest and do I want to go into there, the contents at source","width":484},{"text":"I can't spell source, nevermind. whoops, and then increment both of those. dest plus plus, source plus plus. there we go","width":943}],
  // Video 30
  [{"text":"alright and keep doing this while either one of these is valid","width":624},{"text":"okay what do you think about that code?","width":370},{"text":"hold on hold on you can't see it","width":200},{"text":"is this code correct?","width":128},{"text":"does it copy the null byte at the end?","width":1104},{"text":"okay alright if your neighbor thinks it copies the null byte get a new neighbor","width":524},{"text":"right why does it not copy the null byte?","width":543},{"text":"because we've incremented the source pointer","width":215},{"text":"right so we copy a byte, we keep copying characters and then we increment the source pointer and then we say while source","width":446},{"text":"so we are checking the next byte, the byte that we haven't yet copied","width":496},{"text":"so no, that code doesn't actually coy the very last byte","width":263},{"text":"you see, C program is easy","width":226},{"text":"or actually C programming with bugs is easy, writing correct programs is harder","width":369},{"text":"and we wouldn't have spotted this if our destination memory had all been zeroed by some fortuitous accident","width":448},{"text":"so that is incomplete, we still need to copy the byte at the end","width":373},{"text":"so at the very end I need to put a null byte in","width":374},{"text":"so I could write that as zero, I could write that as backslash zero","width":421},{"text":"that means the null byte","width":115},{"text":"and then finally return dest","width":471},{"text":"okay what do you think about that code","width":273},{"text":"yes, so if source is just an empty string what would happen?","width":866},{"text":"correct, we put two null bytes at the end","width":268},{"text":"so that's dangerous right? our code would actually copy more bytes than say the standard specification","width":540},{"text":"so now we've got a bug that only happens when we copy empty strings","width":537},{"text":"what else? there's another bug as well. yes? I'm writing memory that isn't part of dest or source","width":833},{"text":"okay, so I haven't malloc'd a new buffer yeah. okay so let me first mention the error I was going to point out","width":368},{"text":"which is actually the specification of strcat says we should return the beginning of the string","width":267},{"text":"we are actually returning the end of the string","width":150},{"text":"whoops, so we probably should have kept a copy of what the original value of dest was","width":363},{"text":"as it happens, most people don't tend to use this return value","width":225},{"text":"and so your code might work in most places until the day it doesn't","width":379},{"text":"now let's get back to that question of oh we haven't malloc'd any memory","width":225},{"text":"so strcat actually assumes that the destination is big enough for all these bytes that we are going to copy","width":536},{"text":"it doesn't do any mallocing itself, it just says okay give me a pointer, I'm going to assume that there is enough bytes available for me to copy whatever is available at source","width":610},{"text":"and if that is not true, well let's hope this code isn't actually driving a car or an expensive robot or flying a plane","width":568},{"text":"or something inside your bloodstream","width":332},{"text":"so strcat is dangerous, you have to promise that you've got enough bytes allocated at the target","width":597},{"text":"and for that reason many people avoid it and use strncat instead","width":393},{"text":"which I'm not going to talk about today","width":99},{"text":"and that saves you from some of these gotchas","width":248},{"text":"so it's better but it's still not perfect","width":186},{"text":"you can still have problems with strncat but I don't have time to talk about it right now","width":491},{"text":"okay right so for your next serving of C, I've got some code down here that uses strcpy and strcat and arrays and pointers to stuff","width":687},{"text":"what errors do you spot? if this was say a code review or in an interview and they said \"hey look at this code, what can you tell me about this?\"","width":602},{"text":"what can you and your neighbor find? what errors?","width":338},{"text":"what kinds of errors and how would you explain them?","width":284},{"text":"[long pause]","width":9735}],
  // Video 31 part 3
  [{"text":"okay, alright! so, what do we got here","width":354},{"text":"I got three variables: var1, var2, and arrrrrayyy!!!","width":287},{"text":"alright, just to point out that this is an array. and they all initialized to \"hello world! bounjour!\"","width":557},{"text":"now, there's a big difference between these and to point it out first of all let's talk about this very last line","width":404},{"text":"no, it is not possible to do this","width":548},{"text":"what this line is trying to do is say \"hey! I've got a pointer called array. make it point to the same thing that var2 is looking at\"","width":390},{"text":"no, you cannot do that. if you use just the array name here, it's treated as a pointer but there's a couple of big differences","width":780},{"text":"first of all, you can't change it","width":128},{"text":"this variable is the beginning of the array","width":384},{"text":"you can't make it point to a different piece of memory","width":278},{"text":"secondly, if you ask the size of array, you'd actually get back the number of bytes of the actual array","width":446},{"text":"unlike a pointer where it would tell you the number of bytes required to hold a pointer","width":253},{"text":"so no, you can't change array and make it point to something else","width":225},{"text":"you can, however, make a pointer to a character point to a character array. that's okay!","width":427},{"text":"now you've got var1 holding the same address that array hold","width":572},{"text":"alright, now, what about these other things up here?","width":192},{"text":"okay, strcpy! I want to copy into the array var1","width":251},{"text":"is that okay?","width":189},{"text":"if you said it's okay, you're correct!","width":276},{"text":"okay, why is that?","width":189},{"text":"well, here's what happens. we're actually saying \"I need an array and I need it to be big enough to hold the following data\" (bonjour)","width":582},{"text":"and when we run our program, when we start the process, we have a little array, here it is, and bonjour is copied into this array","width":1099},{"text":"so, our array lives in memory that you can read and write","width":233},{"text":"so if you want to copy other stuff into the array, yes, go for it. it will work. just remember that the array isn't an infinite length. it's fixed size. so you better make sure you accidentally copy too many bytes into this data structure","width":845},{"text":"so we're fine, we do strcpy into var1","width":191},{"text":"so that's okay, what about strcat var2 into array one?","width":209},{"text":"that looks fine too, ary is mutable, we can change it","width":456},{"text":"okay, here's the exciting part. yes, we're calling strcat so we are appending characters onto our array","width":480},{"text":"but you and I know that this array is not going to be big enough to hold whatever it is","width":442},{"text":"\"hello world\"","width":119},{"text":"we're gonna write the data w-o-r-l-d and a NULL byte past the end of the array","width":479},{"text":"who knows what's going to happen? woohoo. we don't know!","width":233},{"text":"it depends on how things are laid out in memory but I'll show a little demo in a moment just to show what happens","width":355},{"text":"whoops, what we have here is a buffer overflow. we had a buffer which is just our little array and we went past the end of it","width":579},{"text":"we wrote into memory that we should not have been writing into. we didn't own that memory. oops.","width":411},{"text":"and, I want to point out that this can happen not because you were just thinking about. you didn't think about memory slides. it can happen through typos.","width":623},{"text":"when you intended to say strcpy and instead your fingers wrote strcat","width":592},{"text":"bad things could happen. alright. especially if your pointer happens to point to arbitrary data at this point","width":365},{"text":"strcat is going to say \"okay! I'll copy this data for you. I just need to walk along this data and find a NULL byte\" and off he goes! bye!","width":581},{"text":"so be careful when you write strcat strcpy, just take a moment to check you actually wrote the intended one. of course, I've never had that mistake hahaha.","width":653},{"text":"and, what about strcat var1 var2? can I copy from what var2 points to into what var1 points to","width":849},{"text":"if you said yes, at least say it confidently because you're incorrect","width":381},{"text":"no you can't. var1 and var2 hold the memory address of this constant","width":560},{"text":"so yeah, you can change var1 you can make var1 point to something else. here we go. var1 equals hey, point to this other thing.","width":466},{"text":"hey, hold the value NULL","width":128},{"text":"ecetera. I can certainly make the contents of var1 be different","width":412},{"text":"but in this particular case, what it's pointing to is memory that is read only","width":502},{"text":"so if you try to start writing bytes into that address var1 points to, ah ah ah! no, you won't. the hardware will detect that and say \"you can't do that\" I'm only giving you read access to those bytes","width":950},{"text":"alright, any questions? yes! yeah. yes. the compiler will spot that","width":754},{"text":"so array names are special","width":387},{"text":"uh, it can be treated as a pointer. if you need a pointer, the compiler will turn that name into a pointer.","width":497},{"text":"and the pointer is at the beginning of the array","width":250},{"text":"alright, so, if you do things like ary+3, that will add 3 times however big each element is","width":576},{"text":"so if you point to an integer array, it will be array + 12 bytes","width":265},{"text":"if you're on a 32-bit machine with 4-byte integers","width":247},{"text":"alright so, remember, the compiler is just turning this into assembly code so it uses the type information","width":447},{"text":"and if its trying to get a pointer, it turns into a pointer","width":330},{"text":"okay, other questions. yes! uh, so var1 the variable itself is mutable. we can make var1 point to anything else. but yes, you are correct. I could now write strcpy var1 after this","width":1870},{"text":"okay, so, this is okay now. because var1 is pointing to the array. so of course I can copy okay into the array","width":754},{"text":"alright, we should talk about uh, I forgot to free memory. we do not need to free these memories. these are not on the heap","width":574},{"text":"you've actually got more than just the stack memory and heap memory","width":300},{"text":"you've got static memory where you'll discover these constants go","width":487},{"text":"where also our global variables go as well","width":178},{"text":"so you see heap memory when you call malloc. alright, that's how you get heap memory","width":564},{"text":"we haven't done a whole lot of malloc-ing yet","width":111},{"text":"and you see stack memory when you make a variable inside a function","width":556},{"text":"alright so here we go","width":154}],
  // Video 31 part 4
  [{"text":"that is going to be inside my heap","width":517},{"text":"well we're not doing that right now. we're playing things which are either constants or declared outside of functions","width":570},{"text":"let's do a quick demo. right, good","width":514},{"text":"here is the code we've got. I don't want this right now","width":683},{"text":"but I've done one extra thing, is I've made another array called demo. It's got the characters 1 2 3 4 5 6","width":594},{"text":"and I'm going to print it out twice. so we should see 1 2 3 4 5 6 twice, right","width":652},{"text":"but of course, because you know it's a demo, we're not going to see that. let's see what we get. oops, we have to turn off the asserts","width":856},{"text":"OK, we're not going to see that. this is what we saw instead. 123456. OK, so we've printed out the characters","width":783},{"text":"and then d and a smiley face. where did that come from?","width":867},{"text":"for some reason demo got obliterated by a d and smiley face and of course the null byte","width":633},{"text":"why? because first of all we copied var1 in and then we did a string cat and copied var2 into our array.","width":857},{"text":"but our array was not big enough to hold 'Hello..!' and 'World:-)'","width":485},{"text":"strcat doesn't know that, it merely copies the bytes until the end. and so it kept on going and it ran into the memory that is being used by demo","width":670},{"text":"and we could kind of prove that they are next to each other. let's have a look at where they are. so we can say, hey the array is at this address and demo is at this address","width":1380},{"text":"there we go. so array is at some low address and demo is at another low address, but just next door","width":670},{"text":"doing the mental arithmetic to subtract those two numbers is left as an exercise to the reader. but it's pretty close, yeah? it's about ten bytes","width":837},{"text":"right, that's our little demo. let's go back to our sheet. so let's talk about converting things","width":477},{"text":"if I've got a string and I want to convert it into a simple integer, how can I do that? well here's the easy way. use atoi","width":776},{"text":"so for example atoi of a hundred gives you the integer hundred","width":1033},{"text":"what do you think atoi of bananas is? ","width":1381},{"text":"place your guess now","width":701},{"text":"it's zero! so here's the downside of using atoi, yes it's really really quick. it's trivial to write code, but you'd better trust that what you're going to get is a valid integer that can be converted into a standard c integer because if it can't it doesn't crash, it doesn't complain, you have no way of knowing other than the fact that you got the value zero","width":1468},{"text":"so this returns a value of zero. so you don't know whether the user typed zero, entered zero, or whether it was invalid input","width":460},{"text":"so use it for little demos, quick hacks, etc., but if you actually want to check whether things are valid or not then it's time to use scanf","width":887},{"text":"because scanf will tell us how many things it successfully parsed. lets make a little scanf demo","width":1154},{"text":"OK, three integers walk into a program. there you go x y z. and I've got a string that I want to extract some values for","width":903},{"text":"maybe this is some 3D vertex data for example and I could use this function called scanf to say 'alright here's my input and I want you to treat it as an integer followed by some white space, another integer followed by some whitespace and another integer'","width":1164},{"text":"OK, how do I push that out? I need to give it the address of my variables. so remember ampersand means tell me the address of this thing","width":993},{"text":"OK and now if our program works","width":984},{"text":"tick tick tick tick, yeah! z is twelve! hooray! great, I've written a parser that can now read 3D data. watch out minecraft","width":843},{"text":"OK, what about 10 11 x?","width":571},{"text":"what do you think the value of z is now?","width":407},{"text":"well it's claiming that z is zero,but we should try something here. suppose we initialize z to be something else like 42","width":701},{"text":"z is still forty-two. so what our scanf did is it started eating, started walking along that string, it got to a point where it said this not what I expected and it choked. it just gave up and stopped","width":996},{"text":"so what we should do to write robust code is see how many things scanf actually managed to bite out of the input","width":644},{"text":"so let's have a variable here called numread and we can now check to see how many things were actually read by scanf and then we can write code that says, hold on a moment, I died trying to parse this line","width":1167},{"text":"now you can see numread equals two","width":117}],
  // Video 31 part 5
  [{"text":"extract out the x and the y and we failed when we tried to parse the third integer","width":474},{"text":"right, so scanf looks pretty easy and it is","width":268},{"text":"it is very easy to write bugs using scanf","width":281},{"text":"I've already mentioned one, okay so scanf - you saw that there are already different versions of it","width":545},{"text":"I was using sscanf because that allows me to start from the string which is good for demos","width":486},{"text":"there is also fscanf which guess what, starts from a file pointer","width":360},{"text":"so for example, I could read from stdin","width":235},{"text":"or I could read from a file that I've already got open","width":263},{"text":"and then we need the format string, okay so here's the first problem that you can run into","width":415},{"text":"this looks a lot like printf, printf's format string yes? I just showed you one with %d's","width":581},{"text":"and it is until it isn't","width":209},{"text":"it's actually subtly different, so the day that you actually need to write a scanf, open up the manpage and check the format specifiers because it's not quite the same","width":635},{"text":"for example floating points are slightly different","width":177},{"text":"so that's the kind of first gotcha. that second gotcha I've just shown you, which is that the number of items that you've read isn't necessarily all of them, so you should check that","width":819},{"text":"and then the third gotcha is guess what, we can put in addresses here and sometimes you want to put in an ampersand and sometimes you don't","width":722},{"text":"so I showed you one way we did ampersand y ampersand z because I actually wanted to know the address of my integer variables","width":904},{"text":"can you think of a time when you might not actually want to put in the ampersand?","width":492},{"text":"yeah, if you already have a pointer to the thing that you want to change","width":359},{"text":"so if you've got a pointer to an integer variable, there we go, let's put in pointer here and provided that pointer is pointing to something a variable I want to change, everything is fine","width":1612},{"text":"everything is not fine if I was to write in ampersand pointer","width":522},{"text":"because now what am I changing?","width":333},{"text":"I'm changing this, I'm not changing the thing its pointing to","width":383},{"text":"and if you think this is complicated or confusing, it is!","width":245},{"text":"so my advice is don't write scanf code until you've had three cups of coffee, you're completely awake and it's the most important thing in the world to get it right","width":470},{"text":"and even then, assume that you've got it wrong","width":211},{"text":"scanf code is incredibly hard to write correctly and you can get nasty little errors just by missing an ampersand or putting an ampersand when you don't need one","width":525},{"text":"scanf is not going to detect that, you have to be extremely clear about whether you mean to talk about the thing, the address of the thing or using the thing that the thing is pointing to","width":732},{"text":"so it's not for the feint hearted","width":118},{"text":"and with that warning, let's carry on","width":323},{"text":"I can promise you I've spent hours debugging scanf code","width":249},{"text":"that I thought was correct","width":209},{"text":"here's some other things that will kill us or get you","width":201},{"text":"gets is easy to use, you just say gets and you give it a pointer to your buffer","width":718},{"text":"to some characters","width":460},{"text":"description, never use this function","width":238},{"text":"the reason I bring it up is because people like to ask about it occasionally in exams and occasionally in interviews","width":356},{"text":"it's a classic example of how to hack a program, hack a C program because gets like strcpy has no idea how big this buffer is","width":781},{"text":"how many bytes it can safetly write into whatever address you give it","width":377},{"text":"so if the data that it's reading from stdin happens to be bigger than your buffer, arbitrary things can happen","width":431},{"text":"now someone could use this to supply data that is longer than your buffer and start overwriting arbitrary memory locations","width":433},{"text":"and those arbitrary memory locations probably correspond to other variables","width":283},{"text":"so now someone can use your program to do bad things, to do things that the program is not designed to do","width":490},{"text":"so how do we fix this? answer: use fgets instead","width":414},{"text":"right and I'm not going to talk about that because there's some more fun stuff we can do down here","width":425},{"text":"let's do environment stuff, I don't think I've shown you environment stuff yet have I?","width":441},{"text":"okay right so every program when it runs has arguments and an environment ","width":425},{"text":"so if we do env for example, you can see that my program has actually when it runs, has all of this information","width":601},{"text":"all kinds of useful stuff like the current user is root, where the home directory is for example, the current directory is probably in there as well","width":705},{"text":"so I can get access to this stuff when I write my C programs","width":405},{"text":"so let's write a little C program that does this","width":245},{"text":"for example, I'll say I've got extern, environ, now this extern means that look, this thing exists","width":806},{"text":"don't allocate any space for it, but when we finally link all the pieces of my program together","width":443},{"text":"the compiler is going to look for this variable because we've simply declared that it exists somewhere and I want to use it inside my C program right now","width":553},{"text":"so let me put the contents of the first entry of environ and then we'll exit","width":1106},{"text":"okay so you see we've just got a string","width":177},{"text":"a simple C string which is in the form of key and equals and a value","width":521},{"text":"and I could write a little loop to go through all of them and when I find once which is null at the end I know I've finished","width":666},{"text":"so if I want to enumerate all of my environment variables, I can use environ","width":385},{"text":"if I actually want to look one up that I know exists, I can use getenv, so let's getenv and say look for user okay so that will give me","width":734}],
  // Video 31 part 6
  [{"text":"uhh, an answer and I'll print that out.","width":983},{"text":"okay, so we can see that my program when it says getenv on the current user, it prints out root","width":439},{"text":"woohoo!","width":201},{"text":"so, environment variables are one way of passing useful things to your program. as we've seen, so say you can look at the current user's home directory and store your preferences there. or if you're mean, you can delete all their files","width":1117},{"text":"so that's one way to get a general general environment. the other way you've seen of course, is that our main method has two parameters. argc and argv","width":780},{"text":"which is a character pointer pointer","width":320},{"text":"so, let's all look at this. first of all, some important points about them (come back!)","width":285},{"text":"the first is that the very first entry of argv is not one of the program arguments. it's actually the program name","width":1112},{"text":"so I for example, could write a usage thing. blah blah blah blah","width":698},{"text":"and, if there are any other arguments, we can find out how many there are","width":522},{"text":"arguments %d our count","width":930},{"text":"alright so, it's program name, the way its actually executing we can actually discover from the program itself. it's the very first zeroth argument. and we've got one argument so this is like another kind of classic off by one thing again","width":913},{"text":"so if I have, you know, cats, it thinks its got two arguments","width":380},{"text":"what it means by that is that that array has got two entries","width":293},{"text":"and the first one being the program name","width":192},{"text":"the second entry being cats","width":126},{"text":"and in fact, that's not even quite correct either because it happens to be always one final entry at the end which is NULL","width":596},{"text":"so we could go through and look at all of the arguments","width":343},{"text":"so let's do that. we'll have a little pointer. let's make it point to argv + 1, in other words, we're not going to print out the program name this time (come back!)","width":882},{"text":"yeah let's get rid of that stuff","width":442},{"text":"okay, right, we'll stuff [something] we'll print everything we find at the pointer","width":587},{"text":"so I need a pointer to an array and a pointer","width":967},{"text":"while the entry is non-zero, let's print it out.","width":261},{"text":"and we'll add one!","width":959},{"text":"okay, so let's now try our little program. oh I forgot to follow the pointer. okay cats are cool","width":1330},{"text":"alright, so, we can access each of the arguments that the program has","width":482}],

  // Start Lecture Video 2
  // Part 0
  [{"text":"okay, hi. I'm gonna ask you to volunteer (student: oh okay) alright.","width":1559},{"text":"I'm going to ask you to volunteer for something in a moment","width":190},{"text":"Okay! Good morning class! how are you?","width":872},{"text":"great! so, here we go, uh today we're going to talk mostly about fork() and exec()","width":337},{"text":"maybe we'll have time to talk about signals as well","width":242},{"text":"yes there will be an in-class exam/quiz coming up next week","width":329},{"text":"we'll see when it happens","width":149},{"text":"I guarantee it won't be Monday","width":383},{"text":"Or tuesday or thursday","width":85},{"text":"alright, more details next week.","width":184},{"text":"so first of all let's just start off with a little demonstration of how fork() works","width":327},{"text":"for that, I need a volunteer, yes! thank you! please come on down","width":217},{"text":"alright, so, um, here's my process and of course [something] today you're gonna be my process, right?","width":527},{"text":"so, a process to run of course needs some instructions to execute","width":345},{"text":"here we go, stand here, you're my process, right.","width":137},{"text":"okay thank you. and, here's the code that I've already compiled right into something the CPU can execute","width":589},{"text":"okay, we've got inside the process memory you've got a pointer called neurons and an int called capacity right and we run this function called init brain","width":604},{"text":"it's kind of complicated","width":142},{"text":"it does a lot of stuff","width":39},{"text":"when we pass in the address of neurons and the address of capacity, so there's init brain when it returns will set where the neurons being held and the number of neurons that we have","width":798},{"text":"so, it looks a little like readline, yes?","width":211},{"text":"and, manage to actually return a void pointer so we can actually use that perhaps","width":252},{"text":"okay so we're running this code, okay, and the next thing to do is think of a number, right?","width":384},{"text":"so, think of a number between 1 and 10","width":185},{"text":"don't tell me! don't tell me...","width":213},{"text":"and then you're gonna print the number to standard out","width":181},{"text":"alright, so, this is my standard out here","width":270},{"text":"you can write a number...okay","width":229},{"text":"accept!","width":59},{"text":"oh you need a pen","width":64},{"text":"accept","width":81},{"text":"here's what we're gonna do, right. you thought of a number, yes? it's in your head. inside the process","width":308},{"text":"before you print it out, I'm going to change the program now","width":325},{"text":"in just here, I'm gonna call fork()","width":399},{"text":"okay? between thinking a number and printing it out","width":137},{"text":"I'm calling fork()","width":103},{"text":"so, what does fork() do? it doesn't not restart the process.","width":294},{"text":"no. here's what fork does: it says take a process that you've got and clone it","width":435},{"text":"yes? make an almost-exact copy of you!","width":272},{"text":"now I've scanned the audience and I've found the person who looks exactly like you","width":288},{"text":"I need my second volunteer. thank you, come on down","width":165},{"text":"[laughter]","width":390},{"text":"alright, so, at this point if you'd like to write down your number.","width":612},{"text":"so we've got two processes. don't show me your number","width":246},{"text":"and of course, thank you. so, we've got two processes and because we've cloned it, inside their memory, it should be exactly the same","width":773},{"text":"so if we now were to say to both of them, okay, continue executing, remember these are two completely different processes","width":330},{"text":"their own memory happen to be following the same assembly instructions here.","width":282},{"text":"the same code","width":115},{"text":"so if we asked them to print out their number, let's find out what they would say!","width":192},{"text":"here, hold them up and show the audience please","width":325},{"text":"look at that!","width":126},{"text":"alright, they're both printing out seven","width":240},{"text":"which is also what you wrote","width":183},{"text":"okay, that's a miracle. [laughter] alright so, well, a 1 in 10 miracle, not a big miracle, but we'll just leave it","width":432},{"text":"so this is how fork() works","width":192},{"text":"remember that this is what happens. it doesn't restart the process. it splits it","width":146},{"text":"so give our volunteers a round of applause, thank you very much [clapping]","width":197},{"text":"because we're going to use that now in C and remember anything you write in C could, in principle, be done in any other program as well. in any other script language like python","width":571},{"text":"python, for example, has a fork()","width":136},{"text":"but underneath, python's written in C, and underneath that, it just calls the fork() command","width":374},{"text":"okay so, I've got a little example of that in terms of code. here it is","width":852},{"text":"here we go, can we read that? okay, so here's my little example","width":220},{"text":"this srand() here thing, this says \"okay, system, tell me what time it is?\" and I'll use that to initialize my random number generator","width":566},{"text":"so remember to actually generate random numbers, we cheat. we just do some mathematical bit shifting tricks so it appears to us to be a random number","width":634},{"text":"and it appears to satisfy some basic statistical tests","width":258},{"text":"but there's not really a random source here","width":172},{"text":"it's just a mathematical stream of numbers that appears to run all over the place","width":370},{"text":"so later when we call rand() we get back a random number","width":221},{"text":"but look at this for a moment! I've called fork() this time beforehand","width":297},{"text":"so the question is, what do you think will happen here?","width":240},{"text":"will my two processes. so, I have a new job process created. will they both print out the same thing? let's run this and find out.","width":1026},{"text":"okay so what do we get? well each process is told to print out its id number","width":262},{"text":"so we get two different id numbers of course","width":128},{"text":"and look, my random number is 6!","width":258},{"text":"they both printed out the same thing! was it an accident? no. they actually both print out the same number","width":466},{"text":"so, why do you think that is?","width":359},{"text":"yes! at the back. thank you, yes, they both have the same random seed and the random state is part of the process","width":727},{"text":"so we've just cloned the whole thing","width":290},{"text":"so actually, you can use one process to guess what random number generators the child process is going to create as well","width":695},{"text":"because they are indentical","width":101},{"text":"it's like your cloned brother or sister or whatever your genetic clone knows exactly what you're thinking","width":652},{"text":"so this actually is potentially a vulnerability if you know, if you completely understand the state of a process, you can predict what it actually might do","width":695},{"text":"alright, so that's a silly example but I'm trying to show the idea that you start a process, you call fork() and suddenly, you have two processes continuing on past that fork() call","width":696}],
  // Part 1
  [{"text":"if I've got two processes how could I make the two process start to do different things?","width":513.1818182468414},{"text":"right now they've done the same thing, I want them to do different things","width":216.18181824684143},{"text":"here's how, we'll check the return value of fork because that is one asymmetry that we have to play with","width":530.1818182468414},{"text":"if child is greater than zero, so if the result is greater than zero for my fork","width":636.1818182468414},{"text":"guess what? it means I have a child!","width":460.18181824684143},{"text":"therefore I must be the parent","width":666.1818182468414},{"text":"so now our parent could just exit","width":792.1818182468414},{"text":"what's going to happen now? this time only one process gets to print out their random number, the child process","width":993.1818182468414},{"text":"we could make this more complicated and we could have our child calling another fork, for example. have many many many more children if we wished","width":720.1818182468414},{"text":"the main point to get here is the idea that you are duplicating the world at this point. you are duplicating the process by calling fork and you have two to play with","width":740.1818182468414},{"text":"let's put that aside for a moment and talk about that very first program. the very first program we've got here does quite a bit","width":570.1818182468414},{"text":"this is an example of quite a bit of system call programming. now we're actually calling system when we're making lots of different calls","width":749.1818182468414},{"text":"my question to you is can you explain every single line of this program?","width":534.1818182468414},{"text":"if you can, if you've been reading ahead in some of the manuals now's your chance to explain it to your neighbor. if you're not sure about something ask your neighbor. see if they know more system programming than you","width":819.1818182468414},{"text":"what is this program doing? ","width":221.18181824684143},{"text":"what does every line do?","width":275.18181824684143},{"text":"you want a handout? sure.","width":650.1818182468414},{"text":"this is the (cut's off)","width":329.18181824684143},{"text":"(speaking to a student) oh ok, what was the question?","width":816.1818182468414},{"text":"(still speaking directly to a student) we killed the parent process, but now the child process carries on","width":621.1818182468414},{"text":"yes, that is how we write the code. we say if I'm the parent just exit so the child carries on. yeah, sure","width":1991.1818182468414},{"text":"anybody else missing a handout?","width":5285.181818246841},{"text":"OK, let's start with a quick demo. This very first line is close one, alright, so if I print something here, woohoo 'hi!'","width":784.1818182468414},{"text":"and 'oh no'. ok, right, let's run this","width":695.1818182468414},{"text":"we're calling puts, I could've called printf as well. I get 'hi!' but that's all I get, I don't get the 'oh no!' because standard out is gone, we've closed itl ","width":778.1818182468414},{"text":"so yes, puts might eventually call write but it's just ignored, that output doesn't go anywhere. I could've for example put printf here, I could've put write into one the following the bytes","width":1010.1818182468414},{"text":"it doesn't matter, all of this stuff just goes no where, we've closed that file descriptor so one doesn't have any meaning anymore","width":488.18181824684143},{"text":"the system just ignores any attempts to send bytes to that particular file descriptor","width":433.18181824684143},{"text":"we've closed it, but then where'd my line go... we call open","width":863.1818182468414},{"text":"open says hey I'd like a file descriptor please","width":214.18181824684143},{"text":"let's see what this returns","width":331.18181824684143},{"text":"where's that return gone to, come back here","width":171.18181824684143},{"text":"and I'll print it out","width":153.18181824684143},{"text":"but I'll print it out to standard error","width":264.18181824684143},{"text":"and fd equals","width":873.1818182468414},{"text":"what error did we get?","width":455.18181824684143},{"text":"I better have some includes here. so if we check the man page for open and I need section two, we are going to need the following three includes. let's grab them","width":1224.1818182468414},{"text":"so we printed 'Hi!' and we get back from open an integer one","width":336.18181824684143},{"text":"it's opened a file descriptor for us, a stream, somewhere we can send bytes. except this time rather than making it appear in our console we're going to make it appear in a file and","width":986.1818182468414},{"text":"we gave these options to open to say 'OK, I'd like to open please this file called log.txt, I need to open it for read and write, I want to create it if it doesn't exist, I want to append to it and then finally I'm going to give some options which I also bitwise or about who can read it and who can write it","width":1188.1818182468414},{"text":"these options are saying that only I can read and write it","width":204.18181824684143},{"text":"so let's start printing some things out, like 'Hello', right and we'll run this","width":960.1818182468414}],
  // Part 2
  [{"text":"okay so we did not see hello in our output","width":327},{"text":"but if we have a look down here we'll see we've got a program called log.txt","width":237},{"text":"let's have a look at log.txt","width":215},{"text":"and it says oh okay it seems to be working, let's see if it appends to it","width":471},{"text":"and then it says hello hello alright so we're appending stuff to our log file","width":250},{"text":"we've changed the output of our process to go to this file","width":411},{"text":"now why is it that that happened?","width":118},{"text":"well if we were to read the man page carefully enough about open","width":218},{"text":"it says it returns the lowest non-negative integer","width":349},{"text":"for a file descriptor and we just closed one","width":234},{"text":"so when we do this, it's going to open file descriptor one","width":333},{"text":"which is what everything then uses when you call puts, printf, etc","width":282},{"text":"so we've now just changed our standard output to go to a file","width":512},{"text":"right then we call chdir, what does chdir do, it has nothing to do with cheese","width":686},{"text":"change directory! yes, our core process not only has memory for say the variables that we create","width":500},{"text":"we've got other things inside our process","width":90},{"text":"we've just seen one thing, which is it's got these file descriptors","width":190},{"text":"each process has file descriptors","width":171},{"text":"also each process has a current directory","width":183},{"text":"so when we say hey I want to open a file called log.txt and we haven't specified it's full path","width":334},{"text":"it's relative to its current directory","width":389},{"text":"so for example, if I had put up here \"hey chdir and let's change our directory to just kind of slash\"","width":795},{"text":"okay, let's run this","width":372},{"text":"then slash is the root directory and if we look at the root of our disk drive, now we've managed to make a file called log.txt","width":633},{"text":"here we go and it's contents is just hello hello","width":330},{"text":"right so okay what have we done? we've done chdir. so we've said chrdir to usr/include","width":832},{"text":"let's just have a quick look inside there because what is inside ls /usr/include/","width":412},{"text":"a whole lot of dot h files","width":83},{"text":"remember in your c files and your c++ files when you say #include std.io hash include this hash include that","width":405},{"text":"they are just files, here they are!","width":354},{"text":"so next time your friend walks away, why not edit one of them?","width":684},{"text":"uh do I have vim on this machine? maybe I have stdlib.h","width":307},{"text":"oh I need to be inside that directory","width":96},{"text":"okay cd /usr/include/","width":162},{"text":"let's so stdlib.h and it's a bit of a mess but nevermind","width":412},{"text":"we can say things like whoops not working, not implemented anyways...","width":688},{"text":"we can do #define if while","width":589},{"text":"so if you hash define if while, that means anytime you see an if, it's going to replace that with the letters w h i l e","width":770},{"text":"very useful if your class is curved, right","width":283},{"text":"alright so we've talked about chdir and we've talked about /usr/include","width":309},{"text":"now we can have some fun, so we have this, let's just go back to my original directory","width":536},{"text":"uh hello, alright I'll reboot the machine","width":426},{"text":"right so we have this exec exec thing okay here we go","width":625},{"text":"what does exec do?","width":1052},{"text":"alright suppose you were thinking about something, you're running a program inside your head","width":243},{"text":"exec says hey forget that program, do this other thing instead","width":372},{"text":"it's a complete mind wipe of your process","width":283},{"text":"whatever it was doing, whatever variables you created, whatever memory allocated, it's gone!","width":372},{"text":"you're saying this process will now actually be executing this other image","width":265},{"text":"right, load this other executable from disk and run that instead","width":331},{"text":"so we will run this right","width":773},{"text":"alright so when I run my program now, it actually runs ls","width":1060},{"text":"it actually gives me the contents of the current directory which is just a dot","width":404},{"text":"now here's something weird, I can understand that the last argument here might be null to mean \"hey i've got no more things I want to talk about here\"","width":480},{"text":"but why is it that I've got /bin/ls twice?","width":728},{"text":"okay, here's why: the first one is the command that you actually want to execute","width":448},{"text":"so inside /bin there is a whole load of commands","width":263},{"text":"here I think we've looked at them before","width":579},{"text":"but remember, when you run a command, you want to give it arguments","width":182},{"text":"so when I call say ls, so here it is exactly, I need to say okay what do I want to do?","width":440},{"text":"well I want to look inside /usr/include","width":176},{"text":"but that's not what the program sees","width":114},{"text":"the program sees the arguments you provide also its own name","width":353},{"text":"the name that it's running as","width":152},{"text":"so that's why you see the exec/ls twice","width":231},{"text":"because this is the program that we want to run and this is the argument zero that it will get inside main","width":562},{"text":"so we could probably change this to just say ls for example","width":293},{"text":"okay so that'e exec, notice that my program never printed hello world","width":310},{"text":"that's right, it had a mind wipe","width":101},{"text":"if exec works, we never return, we don't execute anymore code here","width":374},{"text":"so the only way to say print out hello world is to make it deliberately fail","width":352},{"text":"I'm pretty confident that that program, that image does not exist","width":234},{"text":"so exec will fail, it will return -1 and now it prints hello world","width":324},{"text":"it continued on and in fact we can actually print something useful by using perror","width":634},{"text":"my exec failed and we used perror","width":277},{"text":"it prints out your string a colon and a little message here","width":261},{"text":"so here we go, my exec failed: no such file or directory","width":309},{"text":"doesn't tell you which line it failed on but at least you have a hint as to the kind of error that happened","width":569}],
  // Part 3
  [{"text":"right so that's our program in a nutshell","width":246},{"text":"so, perhaps we can decide what its actually going to do as a whole","width":583},{"text":"time to interview you neighbor","width":69},{"text":"what do they think? see if they can describe it tersely in 10 seconds or less","width":290},{"text":"what does this whole program do? what does it create. what are the contents of that log file?","width":351},{"text":"[students discussing]","width":3593},{"text":"okay! so we know that all standard output is going to go to log.txt","width":293},{"text":"we print out \"captain's log\" to that file","width":184},{"text":"and then we run bin/ls","width":207},{"text":"let's see what happens","width":86},{"text":"I ran it, I didn't see anything on the output here, so presumably, there's something waiting for me inside log.txt","width":362},{"text":"let's have a look. oh yes! look at that! there is a whole long listing of .h files inside my log file","width":510},{"text":"how did they get there?","width":83},{"text":"well yes, when we call the exec we did a mind wipe and it's going to start executing the code of /bin/ls","width":379},{"text":"but standard out has already been redirected to go to a file","width":385},{"text":"so we change the context in which /bin/ls runs","width":395},{"text":"and we print. and because we changed the directory of this process to usr/include, when we said \"turn me the current contents of the current directory\", we got the contents of /usr/include","width":691},{"text":"so that's our first significant system program","width":220},{"text":"uses all sorts of little commands","width":118},{"text":"I encourage you to play with it","width":210},{"text":"now, I want to show you a little challenge this is one of the. this is the only algorithm I know that was actually published on 4chan","width":1308},{"text":"cesspool of the internet","width":160},{"text":"okay, so, my question is, what's it do and how's it work?","width":755},{"text":"so this is you versus 4chan. what does this program do?","width":452},{"text":"notice its got a fork() in it","width":66},{"text":"[silence]","width":8244},{"text":"okay, I think it's time for a demo. see if your expectations are matched, right. so let me give you some values","width":758},{"text":"yeah lets do that. okay, here we go.","width":798},{"text":"yes, what we have here, ladies and gentlemen, is a sorting algorithm, system programming style","width":431},{"text":"it's clearly O(n), right? all we saw is a single loop","width":333},{"text":"yes this can sort integers. here I have another example","width":881},{"text":"look at that! isn't it brilliant?","width":361},{"text":"badum badum badum badum","width":217},{"text":"it's still calculating...ok. alright.","width":145},{"text":"so how does my order n algorithm work?","width":450},{"text":"alright so it goes by the name \"sleep sort\"","width":878},{"text":"and like I said, this was invented in 4chan, it's not actually published anywhere else","width":320},{"text":"but it's a nice cute example of using fork() and atoi that we've talked about these things and sleep()","width":385},{"text":"so how does this thing work? well it makes a whole lot of processes","width":270},{"text":"in fact, remember that C tells us the number of arguments to our program","width":389},{"text":"so this is going to pause every single integer","width":216},{"text":"when it does, it makes a whole lot of processes that because we're counting down C, it makes enough processes one for each integer that we provide","width":590},{"text":"and each process gets a different value of C","width":211},{"text":"because it exits the while loop at different times","width":223},{"text":"so, each process ends up calling sleep() for the right amount and then prints out the number","width":368},{"text":"so, if you entered 1 it sleeps 1 second if you enter 100 it sleeps for 100 seconds","width":373}],
  // Part 4
  [{"text":"alright, the only other thing I want to say about this. this is the second semester I've presented sleep sort. Before that CS241 didn't have a sorting algorithm","width":714},{"text":"and it kinda felt lonely because 125, 225, every other theory class you take has a sorting algorithm. now we can proudly say, yes, system programming has a sorting algorithm","width":734},{"text":"right, so, questions about this algorithm? other than never use it!","width":578},{"text":"right so clearly it's got some limitations. sleep's going to count for a second in seconds etc","width":490},{"text":"and also it relies on the operating system to implement sleep so it's not truly an order n algorithm. the operator is just delegating all the work to the operating system to make sure the processes sleep the right amount of time. in other wrods, when you call sleep your process gets stuck, it's not going to execute anymore instructions until the operating system wakes it up. we'll be talking about how it does that when we talk about scheduling later on in the course","width":1925},{"text":"let's go back to some more serious questions. what does the child inherit from the parent?","width":509},{"text":"all the money, right, no. ","width":217},{"text":"what've we got? what've we seen so far, what does it inherit when we call fork? what do you think it inherits? what do you get? i'm sorry?","width":832},{"text":"variables, yes! so you get a copy of the memory","width":301},{"text":"all of the processes memory you get a complete copy of that. ok, what else?","width":683},{"text":"that's kind of all in the memory, yes all of your c variables etc, the state of any kind of libraries like the rand. state of the random number generator. what else might you get?","width":929},{"text":"OK, I'll give you two. current directory and open files","width":1036},{"text":"if you've opened a file you'll fork will also be able to read and write into that file. more about that more later in terms of the details in terms of what happens when both the parent and child read and write into the same file","width":1062},{"text":"what's different between the child process and the parent process?","width":290},{"text":"here's a couple of differences. first of all, guess what, if you call getpid you get different numbers","width":816},{"text":"what else is different? the return value of fork ","width":1050},{"text":"if the result is greater than zero you know you have a child and therefore you must be the parent","width":1541},{"text":"oh yes","width":149},{"text":"there's something else that's different","width":538},{"text":"what do you think getppid does?","width":325},{"text":"yes! parents! hey I want to know the ID of my parent","width":356},{"text":"so of course that's going to be different","width":375},{"text":"you could probably write out a program to print the parent ID in two different ways. in the parent if fork returns a number it's easy, it's my ID. if i'm the child then I should be calling getppid to get the parent","width":1023},{"text":"so if I've got these two processes and I've shown you that we can write an if statement so they can do two different things, how can I make it so my parent waits for the child to finish?","width":927},{"text":"easy, we call wait or waitpid. let's have a look at this","width":530},{"text":"I will write a little program that immediately forks","width":516},{"text":"if result is greater than zero..what? I'm the parent","width":584},{"text":"OK, what should we do with the parent? let's wait for our child to do something","width":501},{"text":"so how do we finish? for this we'll look up waitpid","width":917},{"text":"we'll say who are you waiting for? I could pass in minus one to say 'hey I'm waiting for anybody', but actually I care about my child finishing","width":559},{"text":"then I can find out what happened to them, so I can basically do a post mortem on my child here and I can pass in some options but I don't need them for this lecture so I want to put zero","width":922},{"text":"let's have an integer and notice that I'm passing in the address of the integer","width":360},{"text":"if I do that waitpid can write it's notes into that integer because I've given the address of the integer","width":725},{"text":"now we could print something out about the child. percent d... waitpid said","width":1186},{"text":"ah, didn't save it","width":642},{"text":"our program get's result. what does our child do?","width":402},{"text":"our child does nothing. well actually it just gets to the end of the program, it finishes","width":432},{"text":"so the child says 'oh my result is actually zero so let me do what's down here. OK, nothing, I'll just finish, I'll just quit'","width":462},{"text":"we could write some special code for the child though. why don't we say sleep for a little bit like two seconds and then quit","width":928},{"text":"byeee","width":248}],
  // Part 5
  [{"text":"okay so if this works, then what we should see is the child will sleep for two seconds and our parent will then be paused also for two seconds","width":801},{"text":"because it had to wait for the child","width":361},{"text":"okay, so one, two, bye and then our parent can continue right?","width":389},{"text":"so we've made the parent wait for the child","width":312},{"text":"now there's a little bit more to using waitpid","width":321},{"text":"that actually there are some macros down here ","width":389},{"text":"here they are, that actually to put useful information out of this, I should use these macros","width":380},{"text":"so for example, we can find out the exit value of the child but only the lowest seven or eight bits","width":702},{"text":"sorry, eight bits, so if your child return a value 42, great we can see that","width":495},{"text":"if it returns a value 304, I'm sorry you won't see that as a value, you only get the lowest eight bits","width":426},{"text":"we can also check to see if it was terminated by a signal","width":224},{"text":"right, how can you generate a signal?","width":291},{"text":"pull our a whistle from your pocket, yeah but you could also press control c on your keyboard to interrupt a process","width":448},{"text":"and when you interrupt a process, you are sending that process a signal","width":428},{"text":"there's other signals that can happen as well","width":159},{"text":"so if your process tries to write into read only memory, your process dies","width":438},{"text":"how does it die? it gets sent a signal that in cannot ignore","width":285},{"text":"so as you can see, we can actually find out some things about our child","width":303},{"text":"and you'll be using that in this week's little assignment before section","width":488},{"text":"alright so let's make it print something out, right so in this case what we'll do is we will say","width":706},{"text":"if it exited, so let's check the value of status","width":373},{"text":"then we'll print out the exit value","width":528},{"text":"WEXITSTATUS we'll get those lowest bits and we'll make the child return 42","width":1515},{"text":"did it run? one error, what's my error?","width":811},{"text":"oh, okay so I have not included something..","width":1038},{"text":"one two yay, okay great","width":168},{"text":"so this time you can see our waitpid got some arbitrary value","width":288},{"text":"if you actually want to pull out the exit value then you should use those macros","width":453},{"text":"alright so if exited, then we know that we can actually pull out an exit status as well","width":410},{"text":"right, so how do I wait for my child to finish? waitpid!","width":351},{"text":"and on here how do I find the exit value? you should use the if exited then we can use the WEXITSTATUS macro","width":1113},{"text":"and all these macros do is just pull out the relevant bits and do some bit shifting from that original integer","width":697},{"text":"okay, right so are you ready? page 2","width":413},{"text":"how do I start a background process? well a background process is something that we want to run in the background","width":379},{"text":"right we don't care about interacting with it","width":365},{"text":"maybe I want to actually say compile a program in the background","width":227},{"text":"let's do it from the command line here so","width":404},{"text":"for example if I want to look at the contents of /usr/include/stdlib.h","width":522},{"text":"right, I could say that actually I just want to send that to a file","width":609},{"text":"but I don't want to wait for this to finish well I can just put an ampersand at the very end","width":318},{"text":"that means run it in the background","width":206},{"text":"and I can continue doing this whilst that copying happens","width":392},{"text":"we could do the same thing in C by not bothering to wait","width":650},{"text":"so I've got my fork here and I could do other stuff in the background ","width":476},{"text":"sorry I could do other stuff inside the parent and not wait for the child to finish","width":313},{"text":"so this is why fork is very powerful right? now I can fork and start a process to compile something. I could fork and start another child process to connect to the internet","width":563},{"text":"and I don't have to wait for these things to complete","width":164},{"text":"I can do things in parallel yay","width":201},{"text":"right, so now if you've got 4 CPUs you can use all four at the same time to compile different parts of your program for example","width":557},{"text":"there is a problem though","width":397},{"text":"good parents don't let their children become zombies","width":437},{"text":"suppose you created a child process and off it goes and it starts compiling stuff","width":439},{"text":"and then you the parent process finish, you quit","width":252},{"text":"what happens to the child process?","width":142},{"text":"it's still alive! ha ha ha compiling alive, it's still going right!","width":449},{"text":"but it has no parent","width":198},{"text":"uh oh, right, so, uhm, so here's what happens, if nobody is around to wait for the child when it finally finishes","width":1095},{"text":"if you don't call wait on a finished process, you get a zombie","width":277},{"text":"so a zombie is a dead process","width":150},{"text":"that no one cares about","width":228},{"text":"so waitpid is like going to the gravestone and saying yeah I remember you let's do a postmortem ","width":228},{"text":"if you don't do that to a process, the system says well actually somebody might want to know about that process","width":392},{"text":"they might want to know its exit value for example","width":138},{"text":"so it's going to take up some system resources, not a lot, but a little bit to remember what happened to that child","width":557},{"text":"so that's what a zombie is, it's a dead process that nobody cares about","width":506}],
  // Part 6
  [{"text":"alright, doesn't sound too bad, right? but what would happen if we had too many zombies?","width":607},{"text":"eventually, the system says \"I'm not creating any more processes for nobody\"","width":294},{"text":"yes? I will kill another process so your fork(), for example, would fail or another processes fork() would fail.","width":960},{"text":"okay so, you can do that. the child will continue and the child will do what it wants to do. okay?","width":380},{"text":"um, so, uh, the system has one thing it will try to do to prevent zombies. which is that in this situation if the parent finishes, and the child is left running","width":982},{"text":"that child is re-parented","width":265},{"text":"given a new parent","width":51},{"text":"so if it called get ppid(), it doesn't crash, it doesn't explode, no it has a new parent.","width":521},{"text":"I'll tell you who the parent is","width":181},{"text":"process 1","width":253},{"text":"the ultimate of processes. the first process in your system. the first process that ever existed when you booted up: process 1","width":473},{"text":"well, kind of the first process","width":109},{"text":"the first process with a process number anyway","width":206},{"text":"the ultimate of processes","width":78},{"text":"right? which classically has been initially or just initiate or just init","width":614},{"text":"goes by various names","width":213},{"text":"and it calls wait","width":173},{"text":"on the poor little orphans","width":114},{"text":"alright, to ensure that we don't get zombies.","width":292},{"text":"so, life is not too bad if your parent dies right? the children as they finish, they will get reparented onto init. then init will make sure it calls waitpid on any future children that die","width":1190},{"text":"so, we run into problems, though, when we have a long-running parent.","width":494},{"text":"so let's say you made a webserver","width":468},{"text":"well the parent tries to live forever, wheeeeee, it's going to keep going around, hey! lets just run forever, right?","width":525},{"text":"and I'm going to serve the web request. and for each web request, I make a new child","width":604},{"text":"so if we have it so that the child does the work, each web request, each HTTP request we might run into a problem now","width":602},{"text":"because the parent is making all these children and never cleans up after them","width":463},{"text":"so in this scenario, when you've got a long-running parent, you've got to remember to call wait() or waitpid()","width":634},{"text":"because if you don't, you'll have a whole lot of zombies","width":220},{"text":"you'll have a whole load of exit values and other meta information about the process thats still just lying around inside this system","width":593},{"text":"okay, so, you must remember to call waitpid() to clear up or to prevent zombies","width":1215},{"text":"okay, alright, so, we won't talk about signals today. instead, let's see if I've got some notes","width":804},{"text":"okay! right!","width":440},{"text":"just a heads up, we'll shortly be publishing this","width":324},{"text":"so, your assignment for this week is two-fold","width":299},{"text":"first of all, time to jump into android","width":282},{"text":"get the SDK and the NDK installed and working on say, your laptops","width":325},{"text":"or start using the lab if you don't have a laptop","width":307},{"text":"we want you to basically make something simple and [something] to get as many people as board with actually using the NDK/SDK if possible","width":566},{"text":"secondly, you'll be using fork() and exec() and the stuff we've seen today to make your own simple \"make\" program which we've called \"fake\" instead of \"make\"","width":783},{"text":"so, let's have fun with learning to program fork() and exec() and enjoy your weekend! thank you very much! Questions come and see me now or find me in the coffee shop.","width":642},{"text":"questions come down and see me now or 5 minute coffee shop","width":128}],

  //Start Lecture Video 3
  // Part 0
  [{"text":"good morning cs241 people. how are you this morning?","width":1248},{"text":"great, how's everybody else?","width":225},{"text":"alright, let's try this again. okay, alright, yes, good morning! you've enrolled in cs241, for better or for worse, you'll learn a little bit about systems programming","width":470},{"text":"and for the next 50 minutes, we are going to talk about some new stuff, some old stuff, some [something] stuff, some blue stuff","width":286},{"text":"I lied about the blue stuff","width":94},{"text":"alright so, all I have to do is open my mouth and talk and type. all you have to do is open your brain and think","width":403},{"text":"how hard can it be?","width":66},{"text":"let's try again: good morning people, how are you?","width":178},{"text":"great!! good morning class.","width":64},{"text":"alright, so, the reason I do that is because maybe we'll get a few brain cells working before we actually dive into this stuff, okay?","width":448},{"text":"so, here's the exciting news. yes there are exams in this course. there's no single midterm. instead, there are multiple choice exams scattered throughout the course","width":674},{"text":"and the first one will be on Friday","width":321},{"text":"yes, so, please come on friday, bring your icard, bring a pencil, and look forwards to multiple choice questions which go over the things we've covered so far","width":601},{"text":"anything we've done in lectures or you've done in previous sections, it's fair game.","width":424},{"text":"okay, so I'm looking to make sure basically that you understand the basics of C programming","width":314},{"text":"so as a result, some of the questions we've got today are to do with [something] in C.","width":313},{"text":"alright so, where's my handout?","width":281},{"text":"okay, let's have a look at this first question then, right","width":461},{"text":"I've written a C process, or any kind of process really, that runs for a long time and it's creating other processes","width":555},{"text":"so for example, it might call fork() and then the child process that you've just created calls exec","width":479},{"text":"but we never wait for our children to finish","width":296},{"text":"but they do. but we never call wait on them","width":161},{"text":"what have we created?","width":160},{"text":"zombies! yes! we've created dead processes, processes that have finished but no one's cleared up after them","width":492},{"text":"now, if you see any zombie movies, you'll discover there's different ways to kill them. right.","width":314},{"text":"but, running away is usually what's recommended in most zombie movies","width":275},{"text":"but fortunately, what we do in C programming is just call wait, and when we do that, the system can kind of clear up the mess left by the zombie","width":617},{"text":"if we don't do that, then eventually, we're unable to create new processes. the system runs out of space","width":539},{"text":"alright so yes, we've created a zombie in this case","width":342},{"text":"so a zombie's a dead process where all we're returning essentially is it's exit status. but it's still taking up a little bit a system resources because we haven't finished cleaning up after itself","width":768},{"text":"and it only happens if no one ever calls wait","width":193},{"text":"so for that, I need a long running process","width":335},{"text":"so let's see what happens in the other case where my child outlives the parent. would you like a handout?","width":461},{"text":"we have a question","width":479},{"text":"that happens when the parent dies. okay?","width":199},{"text":"so that's why the question up there says \"long running parent\". the parent hasn't died. it just doesn't care about its children","width":422},{"text":"the children have finished, alright, perhaps they've called \"exec\" and done an \"ls\", perhaps they finished doing a computation, perhaps they finished serving a webpage to a client.","width":511},{"text":"the point is, the child processes, once they finish, they're still taking up space","width":466},{"text":"alright so, let's not have a look at a zombie. let's have a look at the other case that you just brought up","width":359},{"text":"which is what happens when the parent finishes first?","width":382},{"text":"ok, so, I've got a little bit of code here, and uh, first of all you could ask, what's it actually print? the answer being nothing! because actually if you look at it, you'll see this #if #endif","width":740},{"text":"those are preprocessor directives to tell the preprocessor to say \"well if this expression is true, then include this, otherwise don't\"","width":586},{"text":"and, so of course right now, there is no main method. compiler would never actually see the code we wrote in here","width":379},{"text":"right, I could write garbage in here. like, alright, you know I could write \"superbowl\"","width":492},{"text":"um, and it's not gonna find an error in there because the actual compiler doesn't check for the syntax. it keeps going until there we go","width":520},{"text":"alright um, so let's fix that, let's just say #if 1","width":295},{"text":"okay, right, and we'll run this and a question for you is, before I run it, how many times is it going to print \"I am process\"","width":759},{"text":"cuz you see it happens before fork()","width":102},{"text":"and secondly, who's sleeping? is it the child that's sleeping or is it the parent that's sleeping?","width":674},{"text":"if you made up your mind, tell your neighbor. see if they agree with you","width":483},{"text":"if you're not sure, at least have a guess","width":2192},{"text":"okay! alright! so, who's sleeping? is it the child or the parent?","width":429},{"text":"the child! remember, fork() returns twice, if you like. because, when we call fork, after it executes, we've now got two processes. we've got the original process, and the clone","width":767},{"text":"the doppleganger","width":64},{"text":"that believes it really is the same original process because it can look back in its mind and say \"yes, I was born in kansas\"","width":335},{"text":"right? it remembers all the variable states but its actually got a copy of everything (well, nearly everything)","width":461},{"text":"but there's one asymmetric difference which is that, if you're the child, your return value of fork() is zero","width":436},{"text":"so we are asking the child to sleep()","width":272},{"text":"okay, meanwhile then, both processes carry on independently, you can imagine them running on two different CPUs","width":482},{"text":"they're completely different processes. just like you can be running Minecraft and working on your chemistry homework at the same time","width":513},{"text":"and we print something out. we print out our pid and our parent's id. so let's run this...see what happens","width":576}],
  // Part 1
  [{"text":"alright, so, the first surpise is that we see 'I am process' twice","width":956},{"text":"that's weird, why did that happen? let's talk about in a moment","width":177},{"text":"and then second thing is one of the processes said:","width":248},{"text":"and my parent is 1","width":289},{"text":"okay, how, why? well remember we made the child sleep. we made it sleep for an extra second. in that second it's original parent finished","width":686},{"text":"it exited. so now what are we going to do with the child now? who's parent should it be?","width":231},{"text":"and now's where the system says 'I know what! we will reparent you back to the ultimate process' parent process id one","width":643},{"text":"so that's what happened there. if we didn't have this sleep then we have a race condition. maybe the parent finished first, maybe the child would've finished first","width":495},{"text":"we cannot say for sure who would finish first so that's why we put the sleep in","width":286},{"text":"okay, but why is it that we saw 'I am process' twice?","width":321},{"text":"OK, if you think you have the answer wave your hand in the air like you just don't care. you care","width":415},{"text":"alright, very good yes. okay! so, a few people know. i'll give you a hint","width":528},{"text":"I'm going to change the program very slightly by putting '\\n' in there","width":802},{"text":"and now you only get 'I am process' once. so by putting ","width":439},{"text":"'\\n' in there I changed the output of the program quite significantly. what does '\\n' do?","width":784},{"text":"yeah! thanks. in our little example here, C decides to flush the buffers. so there's abuffer inside the process and it's just collecting bytes. just collecting the characters to print out","width":920},{"text":"but it didn't bother to actually write them out to the system yet. it only decided to do that when we saw the new lines. so in this example we ended up callling write(), we printed it out, before we called fork()","width":931},{"text":"in the first example it was still inside the process so when we forked it was still there inside the child as well. the child says 'oh yeah,I've still got these bytes to print out. I haven't got round to it yet'","width":798},{"text":"so be wary about this. the other thing to note is that at the very end of the program part of the clean up that the C library does is says 'hey ok any open file descriptors if you have something to write out do it now because this process is closing. it's time to flush all the buffers' so it does that as part of the standard clean up process","width":1464},{"text":"right, so that's a little example there. how much buffering actually happens depends partly on wheter your trying to send it to a terminal or a file","width":1059},{"text":"if you're sending stuff to a file it will actually keep buffering beyond the '\\n' so it tries to have even better performance by buffering stuff out to a larger amount before writing them","width":952},{"text":"questions about this example?","width":207},{"text":"yes?","width":288},{"text":"right, so if we choosed fprintf() ","width":382},{"text":"aha, OK, right, so puts() is equivalent to printf() %s \\n. OK so that would've actually flushed it as well","width":1170},{"text":"and so if I used fprintf() the same thing would've happened if I sent it to standard out because the buffer of standard out by default when I'm sending it to the terminal is to wait until I say new line","width":714},{"text":"if I send it to standard error, well lets just do it. we would have seen it once because the default for standard error is just to push things out. we don't want to wait, we're not trying to get high perforance. you want to know your error messages as soon as possible just in case the process dies very quickly","width":1427},{"text":"alright, so, if we wanted... remember how I said we've got somewhat of a race condition? I've just put in a sleep for a second and that kind of works on this particular system","width":727},{"text":"if we wanted to actually wait for our child ","width":550},{"text":"then I can call waitpid(). so how's waitpid()? let's check the old man page. waitpid","width":1273},{"text":"so, you see we pass in the pid we got from fork. we can get some status information and there's some flags as well that we don't need today","width":872},{"text":"so what we'll change now in our output? ok, what's our little error here? ","width":649},{"text":"oh I didn't declare a little variable. there we go","width":832},{"text":"OK so this time the parent of the child is still the, huh. OK.","width":1420},{"text":"why would that be? so the parent is waiting for the - oh. okay, yeah we called waitpid() on two, we should only be doing that inside the parent, so let's do that for the parent. so if I'm the parent then ","width":1435},{"text":"we'll wait for our child to sleep","width":399},{"text":"OK yeah now thats sorted, that makes sense. right, so, what've we got there? the orignal one is 198 and it's parent is 43 which is probably this little shell program here that's running and the child is 199 and it's child is 198 so we should have two numbers right which are the same","width":1367},{"text":"this is the child saying 'oh look here's my parent 198 and this is our original program 198 saying my parent is 43'","width":624},{"text":"so, you can actually discover all the processes running on your system. this one doesn't have that many and I don't know if you've got pstree involved","width":728},{"text":"you can use ps and pstree to kinda get a hierarchal view of all the processes that a process has. there's different options to say OK, I want to know about my process or everybodys processes but don't worry that's not on the test, okie dokie...","width":1056}],
  // Part 2
  [{"text":"so, now it's time to talk about signals","width":240},{"text":"unless anybodys got any last minute burning questions","width":263},{"text":"ok, right, signals are called. there's a lot to signals we're just going to do an introductory part today","width":446},{"text":"but signals are the software equivalent of hardware interrupts","width":379},{"text":"so, think about hardware for a moment ","width":208},{"text":"i can have things like a clock timer that goes off every say hundred milliseconds ","width":414},{"text":"and interrupts what the CPU is currently doing","width":173},{"text":"and when the CPU sees that it says 'oh I'd better stop doing what I'm currently executing' and run some additional code thats gonna cope with the fact that my little clock timer has gone off","width":692},{"text":"or I've got some bytes from the disk which are ready to read and I want to stop what I'm doing and execute some different code","width":434},{"text":"or some information on the USB bus has arrived like someone plugged in a USB keyboard or typed something and I need to handle those bytes","width":564},{"text":"right, so interrupts allow us to stop doing what we're currently doing and process some different code","width":384},{"text":"we could do the same thing with hardware and that's signals","width":183},{"text":"and, we can send signals to our children and we can get a signal back evern when one of our children dies, which is useful","width":663},{"text":"and we can have a lot of fun with them because they can do differnt things","width":488},{"text":"so, first of all, that's a list of all the processes","width":436},{"text":"let me send a signal to one of these processes","width":299},{"text":"so, uhh, ok, do I have a pid variable here? no I don't. okay so, let me just send -9","width":559},{"text":"to say process 43. what've I just done?","width":548},{"text":"yeah, I've killed myself","width":145},{"text":"ok, the kill command says 'send a singal' and -9 is the ultimate of signals - hint hint - terminate this thing with [something] it can't stop this signal","width":992},{"text":"if you send this signal to a process that process is gone","width":422},{"text":"there's no way to protect against this signal","width":296},{"text":"this is the big weight falling on top of a signal. this is how you can kill processes","width":232},{"text":"so if you know - if you are a superuser and you know a processes id, you can get rid of it","width":645},{"text":"OK, so fortunately I have another processes here. let's see if this one works","width":493},{"text":"unfortunately I can't actually write any code so it's time to reboot my machine","width":896},{"text":"okay, so! we can do something similar in our programs as well","width":391},{"text":"let's pull up some example code here","width":2347},{"text":"alright, we won't do that straight away, ok, so here's some typical fork exec() code","width":375},{"text":"the child decides to run /bin/ls and the parent will do something else","width":758},{"text":"so, let's first of all just start off with this. there's nothing new in this code, I just want to prove to you that the child runs exec() here and should print something out","width":773},{"text":"here we go, so yeah we'll move on it. the child runs","width":205},{"text":"okay now, what we'll do this time is I'm going to make the child sleep for one second because now I'm going to call kill() from my program here. I think you can guess what's going to happen here","width":701},{"text":"alright so, we'll check kill() on section 2 and you'll see that we can send a signal to a process","width":734},{"text":"alright so, we have the id that we wanted to call, there it is, it's called child, and what should we send it? well let's send it signal 9","width":1114},{"text":"oh, we had a sleep there. so this time you'll see the poor child never got to run /bin/ls, we klled it and it didnt' stand a chance","width":637},{"text":"we could also send a signal called SIGINT, in fact, rather than send it to the child, why don't we send it to ourselves","width":893},{"text":"let's do it straight away","width":249},{"text":"I wonder what SIGINT stands for","width":478},{"text":"ok, so the SIG is a standard thing you'll see prepended toward the singal of different names","width":446},{"text":"INT stands for interrupt","width":188},{"text":"remember how you can press ctrl+c and the program stopped? this is how it works","width":441},{"text":"the shell says 'oh look, look, someones trying to press ctrl+c, I will send SIGINT to the running process'","width":488},{"text":"and that's how we break our processes","width":594},{"text":"well, this is where the fun begins. I don't have to see my processes die when you press ctrl+c","width":572},{"text":"we can do other things for the SIGINT and for that we're going to look at SIGACTION","width":649},{"text":"SIGACTION allows us to register a callback function that's going to be run when the signal is given to this process","width":690},{"text":"ok, so, here's how sigaction() works. I didn't want to use sigaction(), I was going to use the simpler version","width":1042},{"text":"yeah, let's use signal() ","width":994},{"text":"we'll talk about sigaction() later on in the course","width":297},{"text":"ok, this is what I wanted to show you. so our typedef here. is that large enough for people? can I make it larger?","width":685},{"text":"can you read that at the back?","width":256}],
  // Part 3
  [{"text":"okay alright so, we've got a typedef that say \"typedef void (*sighandler_t)(int)\"","width":404},{"text":"and then this sighandler underscore t. let's talk about this for a moment. as to how to parse this","width":868},{"text":"alright, so we know that typedef just really means \"hey! I'm an alias\" I'm just defining a new type and in this case, this is a function pointer","width":752},{"text":"so, we can [something] this by unpacking it from the inside out. so, we can have a function that takes an integer","width":586},{"text":"and returns nothing","width":271},{"text":"and, our type goes in the middle (between the parenthesis)","width":196},{"text":"so have a pointer to a function. in other words, just, where do we want to send the CPU to actually execute some code? here's our little function that's gonna happen","width":584},{"text":"and then I can install this handler for a particular signal","width":260},{"text":"so should a certain signal happen, run this handler","width":246},{"text":"alright, so, let's do that","width":513},{"text":"I'm gonna have a signal handle then. and I can call it noway. I can call it anything I want, really.","width":559},{"text":"remember it takes a void. call it agentsmith alright, you'll see why in a moment. and remember it takes an int","width":858},{"text":"so, at this point, we'll write something out. like, \"you can't stop me!\"","width":549},{"text":"okay, how many letters is that? who knows? about 13","width":363},{"text":"and, we want this to run anytime someone tries to stop this program","width":214},{"text":"so, let's use that signal() thing","width":153},{"text":"so we'll say signal when I get a SIGINT, run agentsmith","width":675},{"text":"and, then i'll have a little loop that does a. keeps itself busy. while(1) loop forever","width":460},{"text":"so, while true, keep going","width":117},{"text":"alright so, let's run this little program here","width":851},{"text":"okay, off it goes, and let's try and press Ctrl-C","width":479},{"text":"oh no! alright, you can't stop agent smith here. anytime you press Ctrl-C, that signal is delivered and fortunately, you can press Ctrl-\\ and that should","width":876},{"text":"okay, there we go, alright. I can at least Ctrl-Z it so I can actually stop the program. so something else to show gives me the ability to pause the program.","width":506},{"text":"and if I wish, I could actually put that into the background. does it support it? okay, yeah, it does and now its in the background","width":617},{"text":"and now it's just running and using up my CPU","width":181},{"text":"if I do \"ps\", there it is. it's running. it's used up 32 seconds, now its used up 34 seconds of CPU, I'd better kill it.","width":502},{"text":"okay, kill minus 9 106","width":235},{"text":"it's gone! remember, SIGINT you cannot stop. so you could try to. sorry, SIGKILL or SIGTERM you cannot stop SIGTERM","width":784},{"text":"alright let's go back","width":195},{"text":"right, so let's first see what it's going to do with child processes. here's the whole thing. let's change our message to say \"child finished\"","width":631},{"text":"and this time, we will make our message a string here so char mesg","width":736},{"text":"I can get a signal when one of my children dies","width":325},{"text":"so strlen(mesg)","width":270},{"text":"okay, right, so, write out the number of bytes that's in that message","width":536},{"text":"so now, rather than doing SIGINT, guess what, there's something called SIGCHILD","width":364},{"text":"and let's make this a little larger","width":354},{"text":"and this time rather than looping forever, we'll do our fork() and now when the child is finished running ls, why did it, oh, aha!","width":1672},{"text":"that's not gonna be very useful, okay.","width":329},{"text":"we'll get rid of the sleep() there as well","width":341},{"text":"so, this time, the child runs ls hopefully, oh, no.","width":367},{"text":"SIG, oh, I can't spell","width":195},{"text":"yes, for some reason, CHLD is spelled without the I","width":272},{"text":"I guess bytes were expensive in those days? okay, alright so, hooray! here's what we've got","width":769},{"text":"the child ran and then the parent was notified asynchronously that the child finished","width":506},{"text":"so if you wanted to do some stuff in the background and you're worried about zombies, this is the perfect place to put that waitpid","width":475},{"text":"to say \"hey! I need to clean up my children\"","width":156},{"text":"so that's in fact a very common convention with these kinds of programs","width":334},{"text":"is, if you don't want to just fork() and then wait() immediately, just write yourself one of these signal handlers and then we can put our waitpid in here","width":595},{"text":"so, we'll need to know the child id, we have a status variable, and a zero here, okay","width":724},{"text":"the last thing I need to do here is that child itself [something] out of scope here. so instead, let me declare as a global variable","width":723},{"text":"now, global variables in large programs considered [something] programming practices. however, you will often see them in small, single-file system programming examples","width":943},{"text":"because it's an easy way to communicate with signal handlers","width":401},{"text":"alright so now, okay, well, you can imagine if I was actually able to type, you can see that we're being good citizens and we're cleaning up our children using a signal handler","width":896}],
  // Part 4
  [{"text":"right, so, let's go back and up. what've we got?","width":615},{"text":"alright, what is a signal? It's a software interrupt. it interrupts what the current process is doing","width":801},{"text":"how do they work? that's a good question. there isn't a quick explanation of that that's any good","width":424},{"text":"I suppose a short answer would be 'hey we'll cover more in later lectures' but a slightly more useful answer would be that the kernel delivers a signal to the process ","width":875},{"text":"and I've shown you two kinds of examples","width":146},{"text":"an example where a signal where we can register a handler for that signal and we can change the default process","width":534},{"text":"the default example of the SIGTERM where you cannot register a handler and instead the system will actually destroy your process. will actually quit your process","width":876},{"text":"right, how do I send signals programmatically?","width":369},{"text":"remember?","width":376},{"text":"OK, so it's not signal(). if you call signal() - it's not the right answer - if you call signal() this registers a handler","width":777},{"text":"instead what you need is to say kill()","width":531},{"text":"seems pretty mean, right. all of a sudden we're having a bad day when they designed these things","width":362},{"text":"my assumption is that the very first signal that was developed that was useful was the ability to kill other processes because they got out of control","width":455},{"text":"and then this interface was extended to include other signals like ","width":391},{"text":"'hey my children finished' or 'hey I've got some bytes that need some processing'","width":326},{"text":"so with kill we pass in the process identifer and then a signal name such as SIGINT or SIGTERM","width":1108},{"text":"how do I send a user defined signal? easy! we can call kill and ister them","width":654},{"text":"sigusr1 and sigusr2 ","width":650},{"text":"why should I use signal symbols not the constants? well because the actual constant value varies from operating system to operating system","width":527},{"text":"exception being the early signals that were defined way back in the history before I was born","width":517},{"text":"and the one that everybody knows is that nine is the same as SIGTERM, just kill a process","width":553},{"text":"so it's a common idiom to say 'hey kill -9' meaning this process cannot escape, we're going to stop it","width":663},{"text":"and finally what's the alarm signal? ok, this is fun. when I make a process","width":1098},{"text":"we can set up a process so that it gets a signal in so many seconds. so it can say 'ok I won't have an alarm in 3 seconds'","width":985},{"text":"so now I can have a little program here for - let's do it the old fashion way of C","width":539},{"text":"for i is zero, i less than something, i plus plus","width":615},{"text":"printf %d, i and we'll sleep a bit","width":661},{"text":"OK, so, we've set an alarm and then we just start printing out the numbers to start counting","width":1007},{"text":"this is the evilist alarm clock you've ever seen. it kills your process!","width":442},{"text":"um, most alarms don't do this","width":233},{"text":"yeah, the default behavior for the alarm system is to kill your process","width":300},{"text":"and, where does the word alarm clock come from? that is actually the shell saying I'm going to call waitpid() on the program and then I'm going to use those wait macros that you've seen to determine why my program finished","width":1050},{"text":"or what happened to it. oh look my program finished because it got a signal alarm clock. and so the shell prints out something useful to alarm clock","width":443},{"text":"we of course could do something different form that. we could register a handler for this","width":549},{"text":"ok, so SIGALRM - if I could spell it correctly","width":355},{"text":"ok, and I'll call it thanks","width":338},{"text":"void thanks() takes an int and I'll write one \"Thanks!\"","width":579},{"text":"and how many letters is that? I don't know, about six, right?","width":332},{"text":"so let's run this now and if it works then in three seconds we'll get thanks","width":536},{"text":"hooray! good and now you see our program continues","width":248},{"text":"and now I need to get out of it","width":227},{"text":"so that's the alarm signal","width":98},{"text":"you could use this for example to give a child so many seconds to complete","width":247},{"text":"if it doesn't complete you could deliver the alarm signal to it","width":508},{"text":"questions? ok, page two!","width":128},{"text":"<pause>","width":576},{"text":"alright, so we did this. we did this, right? we talked about how this is inside the process","width":576},{"text":"it's inside the C buffer for standard out","width":576},{"text":"because there's no new line","width":128},{"text":"so when you call fork we end up with two processes which now continue and they both have I'm a process sitting inside the buffer waiting to be flushed, waiting to be sent","width":704}],
  // Part 5
  [{"text":"right, now then, let's say I want to review some C code","width":650},{"text":"let's say that you're trying to write a function called your version of strdup","width":311},{"text":"and it's purpose it to take a pointer to a C string and create a new C string by allocating some memory say on the heap","width":869},{"text":"or yeah, let's say on the heap","width":232},{"text":"and so let's have a look at the following code, perhaps we can figure out what's wrong with this code","width":358},{"text":"so, here's the code so far, we call assert() on source then we write a line of code which is going to be a, b or c","width":534},{"text":"then we say 'ok character p equals result' and then we have this idiomatic C loop here","width":467},{"text":"by idiomatic I mean here's a comon way that you see C code written where we want to copy things written from one side to another","width":532},{"text":"what's it do? and then finally we'll return p","width":145},{"text":"so, here's what it'll do, here's where you come in. I've got three different versions","width":319},{"text":"and also do you notice any errors? ","width":233},{"text":"anything you want to change in this code?","width":208},{"text":"ok, and two other kinda questions down here","width":371},{"text":"alright, have a go with that for five minutes. see if you can answer those questions. what happens for a, b and c","width":413},{"text":"and those other two questions. question two, question three. I'll walk around in case anyone's got any questions","width":18098},{"text":"ok, so, that assert() call at the beginning. the nice thing about assert() in production code it disappears, there's no performance overhead. it's not even evalutated","width":693},{"text":"the macro compiles to nothing, so the purpose of this is during debugging I want to catch early if someone gives me a bad pointer","width":585},{"text":"right, so if we say character result, then anytime we use the variable result in the future it will point to the beginning of the array ","width":432},{"text":"sounds great, we can use up to 256 bytes, in other words a string with 256 pics, 255 letters and a 0 byte at the end which fits","width":490},{"text":"however, this is an automatic variable stored on the stack, which means it's scope is only for the length of this function","width":627},{"text":"and, if we try to store anything in here, that's ok, but it becomes meaningless after the function returns","width":537},{"text":"so, yes, we can return a pointer to this array, but don't expect that memory to be valid after the function returns","width":444},{"text":"so, that's no good. we need memory that's going to exist for longer than that","width":307},{"text":"so we turn to malloc() to say 'hey give me some memory on the heap please'","width":239}],
  // Part 6
  [{"text":"right, okay uh, couple of problems here. one is, size of source","width":316},{"text":"so this tells me the size of a pointer","width":182},{"text":"so that's either going to be 4 bytes or 8 bytes","width":240},{"text":"oops. I didn't want that. I didn't want the size of a pointer.","width":203},{"text":"I wanted the actual number of characters stored at the pointer","width":370},{"text":"so, okay, let's fix this, oh yeah, that should be a pointer in there of course","width":282},{"text":"I want result to be a pointer to some memory.","width":177},{"text":"so let's call strlen on source","width":150},{"text":"hey! keep walking along until you find that zero byte. what's wrong with that code?","width":322},{"text":"yes, we're not going to reserve enough memory. so, in doing the copy, we will put that zero byte into some memory that we don't own","width":677},{"text":"that memory might be being used for something else","width":268},{"text":"so, we have a buffer overrun there","width":142},{"text":"alright, so, and then, the rest of this code walks through copying bytes","width":398},{"text":"and it might seem a little unusual to put an expression like this inside that while(), but this is kinda of a common example in C","width":534},{"text":"where we copy a course of bytes from source to the pointer, we increment both, and we keep going until we've copied the zero byte","width":488},{"text":"and when we've copied the zero byte, the result of this expression is zero, so the while loop terminates","width":384},{"text":"many compilers, by the way, would require us to put an extra set of parenthesis around this. otherwise, it would give us a warning","width":382},{"text":"you will also see similar code inside if() as well. where we assign a result to a variable and we also use it to [something] an if-expression","width":616},{"text":"alright, how are we doing on time, okay, we should keep going.","width":152},{"text":"so what's the purpose of 2? to check that the argument is non-null. when will it have no effect? well, when a macro is a defined so its when no debug happens to be defined...whoops, and you can set that as part of an option to gcc","width":1277},{"text":"and if you do that, then assert compiles to nothing","width":256},{"text":"alright so if malloc returned null, where would our program crash? would it crash at line 4?","width":420},{"text":"if result was null, would this crash?","width":238},{"text":"no, it wouldn't. p would just simply hold the result of 4","width":204},{"text":"we haven't tried to follow the money","width":140},{"text":"okay, so we've got an address (think of an envelope) and we haven't written a valid location on it, but we're not trying to read that memory","width":520},{"text":"we're just pointed something bad. we haven't actually followed the pointer yet","width":222},{"text":"so, it would actually crash when we try to dereference it. when we try to write memory in. so, its when we actually try to write to that location, our program would crash","width":690},{"text":"so how do we fix this? we could say \"well look, if the result is not valid, in other words, if it is 0, then maybe print out an error message and exit or perhaps return nothing\"","width":853},{"text":"just say \"okay, I'm sorry, I could not duplicate this\"","width":165},{"text":"and hopefully whoever calls this code is checking to see if the value is also NULL","width":517},{"text":"right. so. okay. did I ask a question for this one?","width":453},{"text":"right, what will this print?","width":254},{"text":"let's see if we write this out.","width":69},{"text":"so we've made an array of ten bytes","width":350},{"text":"and we, copy in 'ab'. so we've got the following: we've actually copied three bytes: we've got an a, a b, and a NULL byte or a zero byte at the end to mark the end of the string","width":1012},{"text":"and then we make a new variable called p2","width":242},{"text":"which is p1+1","width":69},{"text":"okay, so what type is p1? it's a character pointer. so p2 is pointing at this memory location, where we copied the b into","width":500},{"text":"now we do strcpy into p2 and we copy 1 2 so we're going to copy 3 bytes","width":312},{"text":"we're going to copy the 1, the 2, and a NULL byte","width":481},{"text":"so when we try to print this out, we're going to print a12 and then stop because we get to the NULL byte","width":900},{"text":"alright, oh I've got a few minutes, we'll be okay. alright, what about the next one? is the following code valid? what have I got?","width":733},{"text":"so I've got a pointer a and it's going to point to xyz","width":285},{"text":"I'm not copying it","width":96},{"text":"so think about this for a moment. when you load your program in, and it starts running this process, at the bottom of the memory that we've got, we've got the code!","width":762},{"text":"and then we have our constants","width":428},{"text":"okay so a is pointing to some memory inside this constant. the stuff that we've loaded off disk. the xyz. those bytes. a is looking at that address in there","width":769},{"text":"and then we say \"I've got a pointer to a pointer to a character\"","width":213},{"text":"in fact we read this backwards, so b is a pointer to a character pointer","width":319},{"text":"and it holds the address of a","width":305},{"text":"so b hold the address of a. it holds the memory location of a.","width":498},{"text":"so I could use that, I could use b to change what a is pointing to, and that's what we do here","width":381},{"text":"so, why didn't what b is pointing to \"uvw\" ?","width":373},{"text":"so what have we done? we've changed a. so now a is pointing at a different location","width":409},{"text":"it's now looking at a different constant","width":225},{"text":"inside our memory","width":102},{"text":"so we didn't actually copy any strings. we're just changing pointers around","width":574},{"text":"right, we'll do this one. what's special about sizeof(char) ?","width":565},{"text":"it's defined to be 1.","width":133},{"text":"a character in C is always one byte","width":480},{"text":"yes, uh, oh yes yes, I'm sorry I forgot to, yes, there is one bug in here. which is, we should've returned result","width":1072},{"text":"not p","width":368},{"text":"okay, last two things: printf puts putchar and all those other C macros end up calling write() on stdout","width":535},{"text":"which is 1","width":172},{"text":"and the final question for today: what will the following code print?","width":450},{"text":"we malloc 128 bytes. if it failed, if it gave us NULL, we just exit","width":323},{"text":"so lets assume it didn't fail, and then we do puts","width":162},{"text":"what will it print?","width":432},{"text":"okay, so we can answer this and say \"here's the most likely thing it might do\"","width":235},{"text":"it's the very first byte of this might be zero","width":232},{"text":"so, that's just an empty string","width":192},{"text":"so, all that's going to happen is that it'll try to print an empty string. what does puts do? it prints out the string followed by a new line","width":355},{"text":"so that's probably the most likely thing to happen","width":136},{"text":"however, does malloc zero bytes for us?","width":334},{"text":"no! that could be anything in those bytes. it could print \"I love [insert your worst football team in here]\"","width":665},{"text":"whatever! it could print anything! it could print out more than 128 bytes","width":486},{"text":"it could print \"I am agent smith\"","width":185},{"text":"arbitrarily, what is in those bytes. and with that, have a wonderful week! and I'll see you on wednesday!","width":576}],

  //Start Lecture Video 4
  // Part 0
  [{"text":"alright, good morning class, how are you?","width":4527},{"text":"oh! good! great! how's everyone else?","width":275},{"text":"okay....fine...ehhh...middle of the week blah blah","width":198},{"text":"okay so here we go. in blehh","width":307},{"text":"try again","width":35},{"text":"so, in the next fifty minutes here's what we're gonna do: we're gonna make sure you have a good understanding of fork exec wait, we're gonna look at a couple examples. we're gonna start about some common gotchas","width":732},{"text":"and a reminder that some interesting things are due for tomorrow's section!","width":354},{"text":"so, you might say well hold on a minute, this week's section makes me jump into the deep end with android and commit somehow to subversion. no explicit instructions. yeah, welcome to the real world","width":892},{"text":"or at least, welcome to a simulation of the real world","width":195},{"text":"as we kind of say goodbye to CS125 CS225 ecetera, we lose the training wheels a bit","width":552},{"text":"so yes, we will give you more explicit instructions in the future, don't panic quite so much. I just wanted to give you an experience of saying \"look, this is what its like\"","width":518},{"text":"yeah! It's evil it's tough. instructions are never as clear as you'd like them to be and something strange happens. people start looking at you as if you were the expert in the room","width":641},{"text":"just because you know a little bit more about say the other people working","width":227},{"text":"just because you've taken the time to say read the man pages or do twice as many google searches","width":357},{"text":"or just figure out the best way to work it","width":208},{"text":"and yes, in setting up things like android, it doesn't work first time","width":250},{"text":"so now, you need to be a hacker in that sense. of saying, what can I change? what can I break, what can I unbreak?","width":400},{"text":"perhaps I should try a different device. perhaps I should try plugging it in again. perhaps I should try turning off and on again, right?","width":342},{"text":"perhaps I should learn about uh, trying to, I've got a problem say it doesn't connect to android well. is it my device driver? how have I not set thing up correctly?","width":565},{"text":"perhaps I should I reread the instructions to see if I missed a step","width":225},{"text":"these little basic skills a software engineer has to have","width":389},{"text":"so, one one key skill that I hope you get out of this week's setting up the section is tenacity","width":621},{"text":"damnite you can be more stubborn than it","width":250},{"text":"that you can figure out ways to try and break down the problem. maybe I should try someone else's tablet. maybe someone else should try my tablet.","width":420},{"text":"maybe I should umm, uhh, do an experiment to see if something at the low level of the USB is noticing if the tablet is connected","width":495},{"text":"that kind of thing. maybe I should check to see if it's using the right version of java. etcetera etcetera etcetera.","width":360},{"text":"try to take a problem and breaking it down and using your brain cells to try to make progress.","width":372},{"text":"I didn't say it was going to be easy, yeah, welcome to the real life.","width":219},{"text":"okay, well, welcome to real life","width":105},{"text":"right, so, enough! let's put that aside. the next thing you'll need for section is to make \"make\"","width":490},{"text":"or as we fall it, \"fake\", alright","width":166},{"text":"so, why?","width":81},{"text":"because make allows us to build larger programs and at the end of the day, guess what? it's just a C program","width":450},{"text":"it reads in a set of commands to execute...and executes them!","width":312},{"text":"except it tries to do it with some sophistication","width":216},{"text":"so rather than, for example, compiling all possible programs, why don't we compile the ones which have already recently been edited?","width":574},{"text":"or let's make it so that we can make a debug version and a release version","width":247},{"text":"or let's make it so that it works not just for C programs, but with python. you can even use \"make\" by the way, to generate thumbnails of images","width":522},{"text":"so next time you change an image, you can automatically generate thumbnails","width":271},{"text":"I used it in the videos because when I exported each of the little 7 minute videos as an mp4 file, I wanted to have an old version, I wanted to have a webm version, the basic 3 formats of video on html 5 these days","width":995},{"text":"and so I used \"make\". any time I made a new version of the, uh, I, anytime I exported a new mp4 file, I produced make to say \"oh! look! this source file (my mp4) is newer than the targets (or the targets don't exist)\"","width":1087},{"text":"then I get make to run a transcoding program to generate the other versions","width":330},{"text":"so make is very powerful","width":88},{"text":"and you can also set it up to do things in parallel which is fantastic if you happen to have, say, 8 cores, or 200 cores","width":541},{"text":"you can make things go much faster","width":191},{"text":"alright so, let's turn our attention to some code here. we're playing with fork() and we've got it set up so that after fork returns, I'm going to get the parent and the child to do completely different things","width":1342},{"text":"I put them into two different functions","width":198},{"text":"so, remember, after fork returns, so let's write our little fork here","width":315},{"text":"you've now got two processes, you're writing code for two separate processes, isn't that cool?","width":386},{"text":"they happen to share a common ancestry so all of their variables currently have the same values for example (apart from the return value of fork)","width":609},{"text":"so, now we make them kind of have different futures. different histories.","width":422},{"text":"okay so, that's the kind of first important thing, first importantly to remember is that you're writing code once, but it's going to go for multiple processes.","width":748},{"text":"it just so happens that we can use return value of fork() to do two different things. okay so, I checked so that the value is greater than 0","width":562},{"text":"if it is, then I must be the parent","width":196},{"text":"if it's zero, then I must be the child","width":203},{"text":"so let's run to the code. there's actually one other case. fork() could fail. if it does, what's it return?","width":524},{"text":"negative one, yes","width":88},{"text":"so, we should print an error to say \"hey, fork failed\"","width":324},{"text":"what's the easiest way to do that?","width":287},{"text":"just use perror() !","width":267},{"text":"so print perror prints out whatever you said, followed by a colon, followed by a completely cryptic error message which is completely useless to users but hopefully gives you a little idea about at what point your program failed.","width":967},{"text":"so as you start to write more complicated programs, it becomes important to check for the return values. and in fact it's quite usual (just read the man page) to discover that it returns, say, zero, or more likely negative one","width":821},{"text":"if things fail","width":84},{"text":"so when writing more programs, when it doesn't work, say \"oh okay! when did it stop working?\"","width":406},{"text":"maybe I should actually check return values and discover when it broke","width":252}],
  // Part 1
  [{"text":"ok, so that's the beginning of my program. I've made some gaps in here","width":319},{"text":"and so perhaps you and your neighbor could fill in the necessary code on this program","width":595},{"text":"and figure out what we should write for the child and the parent","width":20311},{"text":"in the child process we want to ask for an alarm signal please","width":408},{"text":"so we can say alarm() one, which means in one second or so the operating system will deliver, will send a SIGALARM to that particular process","width":807},{"text":"and once the - what happens by default when you send a SIGALARM to a process?","width":514},{"text":"it kills it, right! that's a pretty evil alarm signal, yes?","width":329},{"text":"but that's what the default behavior does","width":136},{"text":"we could stop that if we wanted by registering a sig handler, but today we're not going to do that. instead we're merely going to sleep for two seconds","width":701},{"text":"after we sleep for two seconds we're going to print something out and then we want to exit normally","width":234},{"text":"how do I do that? i just say exit() and let's give a return value like 0","width":429},{"text":"so my child process is pretty simple","width":175},{"text":"now the parent is going to wait for the child to finish","width":311},{"text":"how do we do that?","width":112},{"text":"we can call waitpid() pass in the process id of the child","width":479},{"text":"we'd like to collect some information so status and we don't need any flags today","width":240},{"text":"ok, so how do we decide if the child has exited normally or not?","width":499},{"text":"well let's do that one, so that one was - what WIFEXIT or EXITED, I'll have to look it up in amoment","width":619},{"text":"and now we need the exit status so let's find out what it said","width":585}],
  // Part 2
  [{"text":"ok, we can also discover if the child exited due to a signal, so let's do that as well","width":562},{"text":"so let's say 'look if WIFSIGNALED then let's find out what singal it was","width":631},{"text":"okay so how do I pull out that? I think it's WSIGTERM? -TERMSIG, ah. ok","width":772},{"text":"and we can print out a helpful message right because not everyone knows those numbers so what is the number for SIGALARM? it's just this constant here SIGALARM","width":861},{"text":"right, shall we run this? let's try it. see what errors we have here","width":442},{"text":"ok, what have I messed up. SIGALARM, argh, right, let's try that","width":1147},{"text":"ok, where's the mistake? line two","width":1285},{"text":"hooray! ok, so it prints 'Hello World', starts up and then the parent says 'child exited due to signal 14 alarm clock'","width":515},{"text":"let's make another program over here that - let's see, I'll tell you what I'll have a pointer","width":802},{"text":"there we go, and it can be a random number","width":346},{"text":"just cast that into an integer pointer and into p we will write the value 42","width":651},{"text":"will it crash? who knows what it'll do","width":161},{"text":"ok, so this time we go 'child exited due to signal 11' what's signal 11? well ok it's not going to get you invited to any parties","width":474},{"text":"but it's turns out signal 11 happens to be segfault","width":303},{"text":"so, we could keep going with this and say 'look if the thing was' - I'll just write it - 11. I could spend some time - \"oops, seg fault - write a better a program!\"","width":1556},{"text":"so you see those messages like segmentation fault and an error that commonly comes up that says 'segfault write a better program'","width":384},{"text":"right, so, you see those messages like alarm clock, segmentation fault, that kind of stuff. they dont' just appear in the terminal by magic, no!","width":414},{"text":"the shell is doing what we're doing here and that's what your fake program is going to do as well. that after a command finishes use these macros to discover what happened to your child and print out the relevant information","width":1168},{"text":"so, questions about that?","width":412},{"text":"alright, so, now you actually have enough knowledge to write not only make, but a shell","width":511},{"text":"and we're going to have an MP based on that where we can take just user input, what you type onto a keyboard and then start executing programs","width":784},{"text":"so the shell that we normally see is either bash or a simpler version called just sh, but it's just a C program that reads input and then calls exec()","width":663},{"text":"based on what you typed","width":289},{"text":"ok, other questions about this?","width":278},{"text":"alright then, let's have a look at some other questions on here","width":321},{"text":"so, when I start my program and I want to find out what arguments it was given. so for example, suppose someone did this","width":917},{"text":"how would I actually discover the first argument? ","width":792},{"text":"it would be in argv[1]","width":313},{"text":"so what would we expect to see in argv[0]?","width":1301},{"text":"argc","width":592},{"text":"it's ./program and i'll make this the right size","width":380},{"text":"it's just the name of the actual program itself","width":651},{"text":"and let me show you actually how - yes? uh huh. yes. what? yes.","width":1921},{"text":"so a segfault happens because for example your program tries to write into some memory location that it's not allowed to","width":647},{"text":"and this generates a hardware interrupt by the memory controller to say 'ahaha, you are trying to write into say a kernel address space or into a page of memory that doesn't exist. this doesn't look good to me'","width":860},{"text":"at that point the kernel says 'this process is not behaving well, I'm going to shut it down. you never get the CPU again' and so the process is pulled away form the CPU, it's not allowed to execute anymore of your assemlby, anymore of the satemetns","width":1119},{"text":"and instead the kernel makes a note of the fact that this is a bad process. we killed it due to a segfault. yes?","width":785},{"text":"yes. ","width":237},{"text":"the alarm can go off during sleep","width":212},{"text":"all the sleep says is don't allow this process access to the CPU for about two seconds","width":496},{"text":"there are actually some possibilites where it might come back early or - there's no guarantee it will be exactly two seconds","width":395},{"text":"we're not playing here with perfect real time operating system. it's to the best it can do give whatever load the system's under","width":537}],
  // Part 3
  [{"text":"and we'll talk about scheduling later on in the course","width":249},{"text":"okay so, just a quick little bit a fun here","width":258},{"text":"let's have a look at /usr","width":192},{"text":"sorry, /usr/bin","width":167},{"text":"alright, whole load of programs","width":256},{"text":"but I want to show you something slightly surprising about these programs, umm","width":585},{"text":"they're actually, they're all fakes","width":285},{"text":"the programs like who which ls, etcetera, they're all just pointers. they all point to something called \"busy box\"","width":581},{"text":"so, the busy box program is written so to support all these different commands","width":492},{"text":"and the first thing it does when it starts up is it says \"what am I running as?\"","width":239},{"text":"am I running as ls? am I running as wc? or some other command?","width":297},{"text":"in which case execute different code","width":238},{"text":"and so you'll see this in this little example here. you'll see in router boxes. you'll see it in your android phone, because it's a way to include a lot of commands without requiring lots of large programs","width":819},{"text":"all tend to do kind of similar things","width":134},{"text":"so it's a way to save some memory","width":158},{"text":"alright, so that's one use of argv[0]","width":496},{"text":"alright, what's special about argv and argc?","width":302},{"text":"it's a NULL pointer!","width":472},{"text":"so, next time you want to scan through all of the arguments, either just use argc to find out how many are there, or just have a little loop that keeps incrementing through those pointers and when you get to NULL, you know you've got to the end","width":1003},{"text":"so typically, if this is the array, you're gonna ignore the first one because that's not a real argument","width":492},{"text":"you know the first one is the actual arguments it was sent so in this case it would be kind of \"file.txt\"","width":581},{"text":"and then we'll have some other arguments that the user might have supplied, and the last one will be NULL. won't point to anything","width":501},{"text":"so don't try to strcat that, for example, don't try to read from that location or you'll get a segfault","width":759},{"text":"okay, let's do page 2!","width":1213},{"text":"so why do shells exist?","width":451},{"text":"could we have an operating system without a shell?","width":265},{"text":"yes we could. but it would be hard to type stuff in.","width":220},{"text":"right it would be hard to execute anything and it would be hard to call things because before you could call things on the operating system, you'd have to write a C code and compile that in order to call the system calls.","width":992},{"text":"but what I want to impress upon you is that all of the commands that we might call from our shell, are really just more C programs","width":740},{"text":"well, they don't have to be C, but for the system programming stuff, they tend to be and some of those can be, tend to be, very very small","width":402},{"text":"so for example, you might stat that we'll see later to find out something about a file","width":438},{"text":"let me go back to my home directory okay, stat program","width":355},{"text":"and this tells me some basic information about a particular file on disk. when it was last modified. who owns it. where it is. what kind of file it is. etcetera. but guess what. this little program just makes use of system calls","width":1123},{"text":"and if I was to call, find out the manual of stat, uh, you discover that on section 2, there's a call called \"stat\" where I can pass in the name and pass in a pointer to a buffer to get all that information out","width":1250},{"text":"so that stat program, fundamentally just makes this call and then has a couple of printfs in order to format the information inside the buffer","width":863},{"text":"so, the shell exists in order for us to basically make, uhh, to be able to do things efficiently without having to continually create new programs","width":878},{"text":"so how would we get our shell to print \"segfault\" or \"alarm clock\" ? easy!","width":553},{"text":"see page 1","width":89},{"text":"hello let's flip back over we've just done it! alright, call waitpid, find out how the process finished, and then take an appropriate action like \"hey! your child process just quit due to a segfault\" or just quit due to an alarm message","width":1201},{"text":"or just died because uhh, you pressed Ctrl-C and we sent a SIGINT to a process","width":446},{"text":"you can do that. now, just using a fork and exec","width":307},{"text":"alright then, so, here is an attempt of implementing a shell","width":507},{"text":"it's called the lol cat's shell","width":306},{"text":"and but there's a couple things wrong with it","width":211},{"text":"perhaps you could figure out why this is not a good shell. how many errors can you see in this code?","width":392},{"text":"[long pause]","width":7872}],
  // Part 4
  [{"text":"","width":3856},{"text":"alright, so this is an attempt to write a shell","width":145},{"text":"it's attempting to get the users input one line at a time and then call exec() based on what the user entered","width":547},{"text":"the first thing you might conclude is that you need to fire this programmer and get a better one","width":305},{"text":"but let's see if we do better that. let's see if we can actually identify a few specific mistakes here","width":514},{"text":"let's see, does it even run?","width":540},{"text":"ok, so no we at least need to semicolon there","width":1137},{"text":"alright fine good so enter your command and I will exec it. ok, great we've got a shell lets try it! we'll try ls","width":736},{"text":"try cat","width":219},{"text":"ok, this is not a particularly useful shell yet","width":278},{"text":"how can we make it better? for starters let's print out an error message here saying exec() failed","width":947},{"text":"and see if we can figure out what's broken with this","width":341},{"text":"OK, ls. no such file or directory. what? well try /bin/ls. no such file - oops, come back","width":761},{"text":"now it's just sulking. it always prints no such file or directory","width":442},{"text":"what did we do wrong?","width":602},{"text":"OK, so here's a couple points from this. as you know the first argument should be the program name","width":426},{"text":"so let's change args[0] to point to the buffer","width":547},{"text":"what is args? it's an array of character pointers","width":325},{"text":"so we can change the entrance of that array. we're just changing the addresses held inside that array","width":365},{"text":"it's a very simple shell right now and it's just set up to be an array, a very simple array","width":285},{"text":"it's just set up to have two entries","width":129},{"text":"the first one initially points to a character string and then second one is null","width":282},{"text":"we want to change it to it at least points to the buffer. and we'll try this","width":506},{"text":"ok, right, ls","width":142},{"text":"no such file - ah - ok /bin/ls","width":184},{"text":"no such file or directory","width":319},{"text":"Darn <rand chars> still not working, but like what I said, part of being a systems programmer is to be tenacious","width":588},{"text":"your code is no longer the most complicated thing in the room","width":309},{"text":"and if you don't get things right it will bite you","width":167},{"text":"hopefully it will bite you sooner rather than later","width":173},{"text":"then we have a chance of fixing it","width":243},{"text":"maybe we should test our assumptions","width":324},{"text":"like what are we actually sending to execvp()","width":289},{"text":"for example let's actually have a look at the buffer","width":528},{"text":"alright, so let's run something we know exists","width":239},{"text":"look it's printing it out","width":126},{"text":"certainly we're sending it the right thing","width":956},{"text":"I'll even get rid of the fgets()","width":254},{"text":"whoops we've got an error. oh yeah I'm sorry it's an array so I have to strcpy() into the buffer","width":1292},{"text":"and that worked","width":387},{"text":"what is our error? if you think you know tell our neighbor","width":918},{"text":"ok, so here's our mistake. fgets() yes does read everything from the user including the new line","width":503},{"text":"and if I was to put a new line into here we would see the same thing and exec is very simple, it's looking for a program called ls with a new line that's part of it's name","width":766},{"text":"so this would now fail","width":194},{"text":"so what we need to do now is get rid of that new line","width":249},{"text":"okay how can we do that ","width":157},{"text":"well let's find out how many characters that we got into our buffer","width":347},{"text":"we'll assume for now that fgets() worked","width":497},{"text":"it may not, for example if someone closed standard in on us it would return null","width":274},{"text":"so we should do that when we want to write better programs","width":165},{"text":"right, so let's find out the number of characters in now the buffer","width":394},{"text":"how does it do that? it needs to walk along until it finds the 0 byte","width":320},{"text":"so for example we know that buffer[len] is the null byte","width":632},{"text":"yes?","width":236},{"text":"so we actually want to go back one byte","width":662},{"text":"and write in 0 or \\0 the null character","width":541},{"text":"will this work? let's try it ","width":566}],
  // Part 5
  [{"text":"/bin/ls hurray! finally we've got a basic shell that takes a single command","width":618},{"text":"we can't give it any arguments yet but we can execute it","width":233},{"text":"and woah hold on a moment, it stopped!","width":276},{"text":"what happened to my while loop?","width":424},{"text":"perhaps your neighbor knows why it didn't work?","width":258},{"text":"[silence]","width":2556},{"text":"okay we have another problem as well, in our assignment in running about that while loop, we've just written code which is actually kind of dangerous","width":581},{"text":"we made a assumption that the newline is always going to be there","width":363},{"text":"is that true?","width":329},{"text":"so it could appear to be true if we're testing it","width":199},{"text":"but it could be that someone is sending us data from a file and fgets simply returns because there is nothing left to read","width":595},{"text":"so a safer program might check to see what we're actually replacing","width":307},{"text":"so for example, it only make sense to do this if len is at least zero","width":311},{"text":"and the buffer[len - 1] is what we expect, a new line character","width":1284},{"text":"okay so we've now got a safer program, it still works, but our while loop never happens, why?","width":683},{"text":"yes thank you, our little process has had a mind wipe ","width":346},{"text":"its assembly language has disappeared, it's variables have disappeared","width":368},{"text":"basically everything we might have put inside the processes' memory is gone","width":271},{"text":"to be replaced by the code associated with our program ls","width":554},{"text":"so how do we make a shell? how do we make it so that it can execute more things","width":299},{"text":"fork exec, yes! so our plan is to do this","width":320},{"text":"in the child and in the parent we want to play our standard waitpid and then the exited stuff so that we can print out useful messages when our programs finish","width":938},{"text":"and that is the basis of the mp","width":544},{"text":"alright so we're well on our way to having a working shell","width":448},{"text":"in real shells, you can execute things in the background, how do we do this?","width":631},{"text":"don't call waitpid, just in your shell go around again","width":462},{"text":"go back to your line that reads input, either fgets or readline ","width":315},{"text":"and let that child process carry on","width":406},{"text":"how do we make it so that we can read from a file?","width":284},{"text":"well we've got two possible ways to do that","width":169},{"text":"you could use say fopen or if you want to go low level, you could use open","width":480},{"text":"and then when you call fgets you can pass in the file descriptor you get from fopen and you would read from that file descriptor","width":1072},{"text":"there is another way as well, which is to close standard in so you would say hey close zero","width":529},{"text":"and then call open","width":305},{"text":"and pass in the right arguments to read from a file","width":648},{"text":"and we need to read the manpage of open to look at how we can open a file readonly for example","width":496},{"text":"and when we do that, future reads at the C level will be reading from this source file","width":528},{"text":"how about this? suppose I want to execute file.c inside a child","width":488},{"text":"but now I want to redirect the output of this command to a different file","width":516},{"text":"how would I do that?","width":571},{"text":"so how do, ah right, so I'm not going to try and change cat, this is just a command, I want my shell to do this part","width":353},{"text":"I want my shell so that the output goes to a different output","width":661},{"text":"okay and where would I do that?","width":263},{"text":"here's a suggestion: you could after the fork, inside the child code, the child could close one, use open and then call exec","width":1592},{"text":"we saw an example of this in a previous lecture where we made our program send the output of ls I believe to a log file","width":610},{"text":"so all we've really done is taken that idea and put it inside the code that we're writing for the child process","width":677},{"text":"and we've put it inside the child because our parent is going to go around that loop and execute other commands","width":390},{"text":"and we don't want everything to end up inside that log file, inside say output.txt, we only want the child to execute that code","width":852}],
  // Part 6
  [{"text":"what's POSIX?","width":485},{"text":"does anyone know what it stands for?","width":238},{"text":"ok, so, a long time ago back in the '80s the standards committees of IEEE were trying to formalize a standard set of interfaces for an operating system","width":801},{"text":"or what operating systems should support","width":158},{"text":"and it went by an IEEE number which was hard to remember so at some point, i think it was Stormunds said why don't we call it the Portable Operating System Interface, or POSIX for short","width":815},{"text":"so POSIX is just a set of standards","width":264},{"text":"and what do those standards talk about?","width":105},{"text":"well they talk about system of interfaces to the actual operating system","width":544},{"text":"in others words what system calls can I make to control the operating system or request things from the operating sytem","width":464},{"text":"and also it's a set of utilites that you expect to exist","width":345},{"text":"so for example, there should be ls in order to list files or cd in order to change directory","width":582},{"text":"and also it describes what you can expect on the platform","width":254},{"text":"like I can expect to work with files,I can expect to work with the network","width":258},{"text":"so a POSIX operating system provides an abstraction of the low level hardware","width":590},{"text":"I don't need to worry about the exact way to communicate with a flash drive","width":434},{"text":"I can simply say 'oh look well let's assume theres a file system on here' and I want to be able to read or write files to this","width":434},{"text":"and the operating system provides a lot of support for those different pieces of hardware","width":479},{"text":"it also provides security. so what kind of security does an operating system give you?","width":946},{"text":"does it give you a warm blanket and a teddy bear at night? no","width":337},{"text":"so what do we mean by security?","width":115},{"text":"if you were to design an operating system today, right now, what security features would you have?","width":473},{"text":"make it memory safe, what do you mean by that? why?","width":637},{"text":"ok, so what you're saying is you don't trust his programs?","width":370},{"text":"I'm sorry, yeah it's a fact of life. what we want to try to do is provide some insulation between different user programs","width":505},{"text":" so that a malfunctioning program I'm sure you write fantastic code most of the time, but let's say a malfunctioning user program cannot bring down the rest of the system","width":801},{"text":"ok, so how are we going to do that? well one thing you've already seen is memory protection","width":586},{"text":"and if I read up on operating systems give us virtual memory","width":300},{"text":"so each little process runs inside it's own padded shell","width":368},{"text":"sorry padded inside its own padded room","width":168},{"text":"it thinks it can read or write any possible memory address it can think of","width":319},{"text":"of course if it tries to do that","width":151},{"text":"it might crash and we might just kill the process","width":255},{"text":"by the first flush one process cannot actually access another process","width":334},{"text":"they live in completely different universes so they are living in dfiferent virtual memory spaces","width":450},{"text":"ok, what else?","width":307},{"text":"yes? file permissions","width":452},{"text":"yes, so I can make it so you can't delete my file or append to my file","width":273},{"text":"but I will let you read it","width":112},{"text":"or I can make it so that my file is unreadable by anybody that's not inside a certain group","width":514},{"text":"interrupts, what about interrupts?","width":472},{"text":"ok, interrupts - i'm going to talk about processes because I thought that's where you were going to go","width":349},{"text":"that you can't kill my process","width":269},{"text":"you can't just call kill -9 on my processs","width":185},{"text":"so you can only kill processes which you own","width":187},{"text":"unless you happen to be root or super user in which case you can kill any process you want on your system","width":466},{"text":"so, yes, security in terms of process control","width":235},{"text":"the last thing here is scheduling","width":95},{"text":"try to have some fairness","width":426},{"text":"which is an open ended and debated term, but imagine your process tries to take the CPU 100% of the time and never gives it up. just has a while loop","width":729},{"text":"if we were not careful no one else would have access to the CPU, it wouldn't get any work done","width":548},{"text":"so the last thing we'll say in the closing part of lecture","width":145},{"text":"is yes there is a quiz on friday and here's going to be our next topic - how do we allocate memory on the heap","width":585},{"text":"and I will talk about this in a future lecture on monday","width":312},{"text":"alright, great, see you friday, be ready for the quiz","width":326},{"text":"thank you very much, have a good section tomorrow","width":236}],

  //Start Lecture Video 5
  // Part 0
  [{"text":"Okay, good morning class, how are you?  Fantastic, right!  So here's what we're going to start doing now, we're going to start talking about memory.","width":1647},{"text":"You could imagine if we went back into the early, early hours of computing, we had it easy, right?  Well, there's proper instructions here, and we'll use location 100 to mean this and 112 to mean that, and we won't have to worry about dynamic memory allocation; we'll just make all those decisions upfront as we actually design the program.","width":1606},{"text":"Then later, we say, \"Well actually, we want to have functions.\"  And later, we want to have functions that can call themselves and be able to recurse.  So, for that we need a stack.","width":782},{"text":"And for that, then, as we make function calls, our stack pointer needs to move.  And inside the stack we'll store our temporary variables and also our point where the CPU should go back to when it returns from the function.","width":1256},{"text":"So our stack... we'll start a lot higher up in memory and as we make more recursive calls our stack will get larger and larger and larger and larger, of course - until we run out of memory.  And then we said, \"Well actually, we don't want to decide what memory we'll need upfront either, we want to be able to have dynamic memory allocation, and we don't know when we're going to free up that memory.  We don't know when we've finished with it.  We want to make that completely dynamic and it's part of our program.","width":1836},{"text":"And thus, the idea of the heap was born.","width":173},{"text":"The idea that at any point, we can say, \"Oh!  I need more memory!  And give it to me now and this is how much I want and I'm not going to tell you when I'll be finished with it.\"","width":703},{"text":"So it's very different from the stack memory.  Stack memory: you know you'll be finished with that memory when you return from the function.","width":530},{"text":"So with stack memory, you've got automatic variables.  They automatically disappear - no more work...","width":335},{"text":"With the heap, of course, now we actually have to say, \"Okay, give me the memory\" and \"I'm finished with it.\"","width":452},{"text":"So you've used the heap of course in Java and in C++ when you said 'new' and 'delete' in C++.  Typically, they go on the heap memory.","width":732},{"text":"I say 'typically' because C++ can do some amazing optimizations when you're not looking the compiler will quickly say, \"Hey!  You didn't need to write that!\"","width":554},{"text":"\"Here!  I'll optimize your code, so that actually there's no code written at all.\"","width":251},{"text":"When you write new/delete you explicitly create, well, we'll just simplify it and say \"Yes!\"  We're making things on the heap.  So we need some memory, so let's call malloc().","width":705},{"text":"So malloc() is part of the C-library.  It's part of your process.  It decides where your memory's going to be.","width":616},{"text":"If you like, it says, \"Oh look!  Table of four.  Right, I need  four seats.  You can sit over here.  This table over here is free.  You sit over here.  Oh, you've finished with that table?  Oh, great!  Get out of there because I'm going to reuse this table for something else.\"","width":815},{"text":"Alright, so malloc() has to very quickly decide where it can assign you some memory.","width":479},{"text":"Now, it gets harder because we don't know in which order our memory is going to be allocated, and in which order memory is going to be freed.","width":1070},{"text":"And even if you knew that order, it's an NP hard problem to do it well.","width":534},{"text":"Called the Knapsack Problem.","width":148},{"text":"So even if you knew exactly which order the malloc()s and free()s were going to come in, how would you do it efficiently is a non-trivial problem.","width":594},{"text":"That sounds computationally expensive, right?  If we made our malloc() perfect, it's going to take a long time.  \"Yeah, I could put this table of two here, but you know what there's a big order coming in in a moment and so I don't actually want to put them there I want to put them over there.\"  There's an infinite number of possible ways that we could arrange things in memory.","width":1304},{"text":"So malloc() has to be efficient but fast.","width":360},{"text":"So this is the basic game we have to play.","width":320},{"text":"*picture problems*","width":1298},{"text":"Don't write this down, this is just a visual.  You don't need to copy this down.","width":425},{"text":"Here's how it works: let's suppose our process has some memory to play with.","width":441},{"text":"You promise me you're not writing this down?  Good.","width":199},{"text":"So my little blocks here indicate 1 kilobyte blocks.","width":311},{"text":"And during the execution of my program it says, \"Well, I'm gonna make a linked list or I'm gonna make an image, and I need some memory.\"  So part of your code says, \"I need say 2 KB.\"","width":1099},{"text":"So malloc() now has to look through the memory and say, \"I tell you what, I'll give you these two blocks here.\"","width":515},{"text":"If anyone else calls malloc() I promise not to return any pointers that point to this memory in here.","width":449},{"text":"So malloc() is going to return the address of the first few bytes and internally it has to do some book-keeping.  It has to make a note that these first 2 KB are being used.","width":845},{"text":"And then your program decides to malloc() some more memory.  So it says, \"Okay, I'll have 2KB now please.\"  What should malloc() do now?","width":874},{"text":"Well, it can't use this area of memory.  It has a choice: it could put it here and here.  It's not going to allocate here and here, though.","width":1030},{"text":"Why not? Why does it not say, \"I'll give you some memory there and there\"?","width":585},{"text":"Yes! Thank you, we've fragmented the memory, but also when malloc() returns a pointer, your assumption is that all the bytes you've been given are contiguous.  You might want to use it as just a simple array, for example.","width":1232},{"text":"So we've got a problem here.  We have to allocate memory that is in the same area so let's say we put these little x's in here.  And then of course someone says, \"malloc(2 KB)\".  What happens now?","width":1455},{"text":"We can't! right? We don't have enough spare memory.","width":320}],
  // Part 1
  [{"text":"Now if this was a very small... two things could happen: our program could just crash - malloc() could just give a bad answer.  But we want to be a bit more systematic than that.  So at this point we'll go back to the operating system and say, \"Hey!  You know that memory stuff that's really valuable?  Give me some more, I need some more.\"  So actually malloc() at that point has to go back to the operating system and say, \"Hey, you know that memory you gave me?  I've run out.\"","width":2033},{"text":"I need some more. I'm addicted to the stuff, right? So, I need more memory.  So malloc() can get some more memory from the operating system. there we go.","width":733},{"text":"How does it do that?  Well, classically it would call something like sbrk().","width":640},{"text":"What is sbrk()? You can write this bit down if you want to.  Let's jump into the rabbit hole for a moment and think about our process where we've got all these memory addresses to play with.  ","width":1328},{"text":"So what do we find inside memory?  We've got our code, we've got our global variables or the static variables... up here we've got the environment and the stack...where's our heap live?","width":2355},{"text":"Just here.  It starts off just here.","width":547},{"text":"So it can grow, right?  We can say, \"Excuse me, system.  I actually need some more space.\"  And that's what sbrk() does.","width":596},{"text":"It says, \"Look, you've got this watermark (this threshold) of what the maximum address is.  I want to bump it up, I want to play with some more room.\"","width":1329},{"text":"So this means we could write a really, really simple memory allocator.  Here it is.","width":521},{"text":"Any time the program asks for more memory (x bytes) all we will do is say to the system, \"Hey!  I need more bytes.  This is the number I need.\"","width":999},{"text":"And anytime the program decides it's finished with some bytes, what should we do?","width":932},{"text":"Nothing!","width":119},{"text":"That's the simplest memory allocator we could write.","width":332},{"text":"It's not a very good one, though.  We're not re-using any memory.","width":608},{"text":"Because we're not keeping track of which pieces of memory are actually being allocated.  We're just simply saying, \"Oh look!  I've got some more passengers on my boat, I need a bigger boat.\"  Or, \"I've got more people on my bus, I need a bigger bus.\"","width":682},{"text":"And not keeping track of how many seats are actually unoccupied.","width":330},{"text":"So it's really, really fast but completely inefficient.  We're very quickly going to exhaust all of our memory.","width":500},{"text":"And so this sets the stage now for our memory allocator.  We actually need to start keeping track of which bytes are currently being used and which bytes are available for suitable calls to malloc().","width":854},{"text":"So we only want to call this sbrk() thing when we truly are out of memory.  When we have no way to allocate any more memory.  ","width":984},{"text":"So the MP (which will be out maybe the end of the week or maybe next week) is actually going to ask you to write an efficient malloc().  And it fact it's going to be a competition.","width":1056},{"text":"So there'll be a page with results and you can see if your malloc() is faster than your neighbor's malloc().","width":616},{"text":"So remember when they step away from the keyboard to put a sleep() call into their code.","width":505},{"text":"Okay, so what's to stop you from doing this all the time?  Easy: the competition is actually going to put a hard limit on the amount of memory that you are allowed to play with.","width":839},{"text":"So now we have to start coping with the fact that memory's being freed.","width":975},{"text":"So if we are working with writing a good malloc(), let me show you a little problem that we might run into.","width":1025},{"text":"Here's some memory that's been allocated.  Here's some other memory that's been allocated at different times.  And then our program says, \"You know what?  I'd like 2 KB.\"","width":1354},{"text":"Now you can see from my little diagram that I've actually got 3 KB of memory which are unused.","width":631},{"text":"But I cannot give you 2 KB.  I cannot find any space which is 2 KB because my spare space has all been fragmented.  It's no longer in a contiguous block.","width":1202},{"text":"So why can't I just take all the contents of this memory and just move it into there, and then carry on?","width":673},{"text":"Why can't I just move that?","width":232},{"text":"Why can't my malloc() just start shuffling stuff around?","width":365},{"text":"Yes, thank you! Yeah, I can copy stuff!  My malloc() can copy it to there.  However, the rest of my process is using pointers.  It assumes that the stuff that's inside here is where it is so it assumes that if I've got a variable that's pointing to a linked list that it's using this area.  ","width":1401},{"text":"So all those pointers will be invalid.","width":256}],
  // Part 2
  [{"text":"So malloc() by itself cannot do that.","width":763},{"text":"Java does a little trick here, by the way.  What Java does is its pointers are actually pointers to pointers.","width":645},{"text":"So remember when you had a pointer to something, like an object pointer?  And next time someone says, \"But there are no pointers in Java!\"  And then you say to them, \"Well why does Java have a 'null pointer exception?\"","width":1157},{"text":"So how does this work internally?","width":462},{"text":"This pointer points to a pointer which points to the actual memory that Java's using.","width":623},{"text":"Why does Java do that?  So that it can shuffle things around.  So that it can deal with this fragmentation problem.","width":661},{"text":"So here's what we're trying to solve here is fragmentation.","width":545},{"text":"And the reason I mentioned this thing about Java is because when you are using the JNI, on the Android NDK, you are going to discover that you have to pin and release things.","width":1334},{"text":"As part of your C code.  And what you're doing is you're saying (to this intermediate pointer), \"Oh no no no, I've got a bunch of C code right now that is using this data, so you can't start moving these things around.  You can't shuffle this block of memory around right now because my C code is using it.\"","width":1655},{"text":"So Java uses a counting mechanism to note that C code is currently using these pointers and can't shuffle the memory contents.","width":709},{"text":"You'll discover this stuff when you start working on the Android NDK challenge.","width":559},{"text":"Right, so, our game then is to try to avoid this fragmentation.","width":406},{"text":"This fragmentation's bad, right?  Now we have memory that we can't use for large allocations.","width":366},{"text":"Our game is also to do this efficiently.","width":212},{"text":"So, here's where we're gonna look at three little problems.","width":810},{"text":"So this is actually an exam question.  It's one of the easier exam questions.  And what we're gonna do is forget for a moment this whole stuff about sbrk() and going back to the system to get more memory.","width":941},{"text":"We'll just say that we've got a heap initially of 13 KB.","width":798},{"text":"And we've got an order of calls.","width":670},{"text":"So as new calls come in, we can decide where to put them.  And here's three different placement strategies.","width":667},{"text":"Best fit, worst fit, and first fit.","width":392},{"text":"And we'll see as we do this that they lead to different assignments, that our malloc() will decide to place these requests in different parts of memory and so we'll have different fragmentation so that if our program continued, we might discover that future large allocations are impossible.","width":1537},{"text":"ok, so what do we need to know about this?","width":302},{"text":"First of all, if you've got a choice, you choose the earliest segment.","width":521},{"text":"Okay, so what that might mean is let's say with best fit, let's say I've got space here of 2 (which happens to be a perfect fit; in other words, I'm trying to find space for 2 K, then I would just choose the one with a smaller memory address.","width":1982},{"text":"Worst fit.  Oh, how contrary can you be?  The idea here is that if I've got a space which gives me the maximum amount of space after I've done the allocation, I'll use that.","width":1351},{"text":"Okay, so let's have a look at worst fit, where I've got a 2K space here and a 10K space there and I'm trying to allocate 2 KB.","width":776},{"text":"Worst fit would not put it in this spot here, it would break apart this 10 KB space and say, \"I'll tell you what: here's how we'll change.  I'll allocate my 2 KB there, giving me a remaining space of 8.\"","width":1213},{"text":"What do you think first fit does?","width":291},{"text":"Pretty obvious, right, from it's name.  We're simply going to walk along our free spaces until we find the one which is sufficiently large, and use that.","width":1125},{"text":"So, if I'm looking for 2K, oh look!  There it is, I'll use that one.  If I'm looking for 3K, oh, it's not gonna work for me, I'll have to keep searching. Okay?","width":762},{"text":"So they're very obvious placement strategies (from their names).  Now, it's up to you to actually run them.","width":534},{"text":"So here's the actual order of calls to malloc() and free().  Where do the allocations end up?","width":320}],
  // Part 3
  [{"text":"There was a question about best fit.  Best fit will scan through, looking at all the possible holes.  Obviously we can ignore all the holes (or spaces) which are too small.","width":961},{"text":"And it will use the space which is at least as large as the request, but hopefully no larger.  And if it so happens that there's two spaces that satisfy that search, then we use the one lowest in memory.","width":1372},{"text":"So, question?","width":1072},{"text":"You would split it at the beginning. Right so, anytime you've got a space, you do the allocation at the beginning of the space.","width":1472},{"text":"*nothing happens here*","width":4224},{"text":"*again nothing, class discussion, Angrave filling out sheet*","width":6458},{"text":"Okay, so.  Let's have a look at this.  So first fit: I've gotten as far as filling out A, B, and C and now I've called free() on B, and now I need to allocate another 3 KB.  Where could we put it?","width":768},{"text":"Well, we've got space here and we've got space at the end.  And we're trying to do best fit.  So best fit is going to put it in here because it's a perfect fit.  If I put it starting at 3K, I would've had a space of one left over, so that's not quite as good.","width":1221},{"text":"And then we free A, and we allocate one KB.  Where could we put this?  Well, there's only one place.  There's one big giant space over here.","width":780},{"text":"So we'll put E there.","width":548},{"text":"What happens in worst fit?","width":542},{"text":"Nothing changes at the beginning here.  C, C, C.  Okay, so.  Now we free() B.","width":812},{"text":"And we allocate 3 KB.","width":160},{"text":"So: where's our choice?","width":68},{"text":"We could stick it here, or we could stick it at the end.  Which one is worst fit gonna use?","width":467},{"text":"B, yes!","width":42},{"text":"Because we have the largest space if we allocate it there.","width":245},{"text":"So let's put our D in here.","width":520},{"text":"And now we free() A.","width":304},{"text":"And we want to allocate one byte.  So what are our choices?  We've got a space of 3, space of 1, and space of 3.  Where's worst fit gonna put our final allocation?","width":747},{"text":"Yeah, it's a tie-up between the first few blocks here and the last few, so we'll put it just here.","width":313},{"text":"Okay, and first fit","width":93},{"text":"Okay, let's do this quick. ","width":829},{"text":"Right, so, we'll do the D.  3KB.  First fit is the Scrappy-Doo of fits.  As soon as we find enough space, we'll stop.  And we've just cleared out our space of four so yes, we can put D in here.","width":1258},{"text":"And now we'd free A, and finally we allocate 1 KB.  So we run along our spaces - oh, look!  Here's our free one.  And we'll stick E in here.","width":821},{"text":"I'm sorry, yes, you're right.  We'll stick it just there.","width":606},{"text":"Okay, so this was a pretty trivial exercise.  But what I wanted to show you is the mechanics of these programs, and that they also lead to spaces in different places.  Also, there's a little thing that we did quite easily but you'll have to remember to do in code, which is: look at this, we had A and B, and at some point we freed up two allocations next to each other.  And so we had to go from thinking that this is a space of two and a space of four into think that this is just one big space of 6.  And if we didn't do that, then if somebody asked for a malloc() of 6, then your algorithm would say, \"I'm sorry, I don't have space to allocate 6B because counting will keep this as a space of 2 and a space of 4.\"","width":3621},{"text":"We could coalesce those two free areas together into a single block, and so that is a common gotcha when implementing malloc().","width":610},{"text":"That you have to look at the space beforehand and the space afterwards to see if you can coalesce them.","width":448}],
  // Part 4
  [{"text":"Right, um..","width":152},{"text":"No need to need to remember that until you actually write your own allocator","width":308},{"text":"Okay, so let's just think about some of the comparisons of these then","width":265},{"text":"So what we'll do first here: what's one of the advantages of first fit?","width":403},{"text":"It's fast! As soon as it finds some space, hey we're done! We don't need to do any more","width":574},{"text":"Okay, what's one of the advantages, say of best fit? Or any disadvantages? Yes?","width":698},{"text":"Okay, so, think it's least amount of fragmentation","width":621},{"text":"Because it's ideal!","width":685},{"text":"Okay, so that is uh, do we know that for sure?","width":389},{"text":"It appears to be from this example, right?","width":248},{"text":"But is it true? In all possible uses?","width":643},{"text":"What about disadvantages?","width":303},{"text":"It's slower than what? first fit","width":471},{"text":"Because we have to check all spaces","width":630},{"text":"Okay, let's do worst fit and I'll come back to this one","width":122},{"text":"Right, what about worst fit?","width":370},{"text":"Yes, it's slower than first fit again because now we have to go through","width":615},{"text":"Any advantages to it?","width":180},{"text":"Any other disadvantages to it?","width":378},{"text":"Let's think about what we're doing for a moment.","width":61},{"text":"So worst fit is always going to find the largest space and use that","width":401},{"text":"So that means in a longer-running program, if you've got a giant space, it's going to quickly be eaten up","width":348},{"text":"So with worst fit, what you find is that you end up with lots of kind of medium-sized spaces","width":536},{"text":"Yes? Uh yeah, we can always go back to the system and say, \"Hey, system, I need some more memory\"","width":587},{"text":"But what we're trying to do is see what our fragmentation looks like given the space we've got","width":340},{"text":"Okay? so, because we keep attacking the largest space, means that we don't have one large area should a giant allocation request come in","width":766},{"text":"Alright, now we've got these medium-sized holes, these medium-sized spaces, scattered all over our memory space","width":588},{"text":"So we cannot satisfy very large requests","width":257},{"text":"Yes? But we keep attacking that large block, right? It's um","width":809},{"text":"I'm trying to think of a good analogy, but uhh","width":226},{"text":"You always can say, \"Oh look, I've got this really really big block at the end, I'll keep using that\"","width":307},{"text":"Now what we haven't talked about is think about the fact that our memory gets freed up as well, okay?","width":339},{"text":"So, this large block keeps getting attacked, and we end up with smaller, medium-sized blocks scattered through our memory if we run this process for long enough","width":913},{"text":"We're always attacking the largest space, we're always kind of nibbling bits off it","width":356},{"text":"So best fit seems to be, \"Hey, we're not going to get much fragmentation, we're always trying to find the perfect jigsaw puzzle\"","width":488},{"text":"The problem with, yeah?","width":423},{"text":"Yeah, yeah there are some interesting caching issues, yes","width":2476},{"text":"Okay, okay, okay, so the question's about, \"hold on, we've got virtual space, with virtual memory you can actually do some interesting mapping to real memory\"","width":560},{"text":"Yes, that is true","width":124},{"text":"However, that mapping happens at four kilobyte chunks","width":238},{"text":"Um, so, we can't completely get away from our fragmentation issue","width":584},{"text":"So, yes, underneath this for the real memory, we can avoid some fragmentation","width":477},{"text":"Given that malloc actually has some space, you know it's got a low address and a high address, our question is how can we efficiently use this memory?","width":410},{"text":"Right, so, I want to address this least fragmentation thing","width":185},{"text":"It appears to be ideal. It can be, if you set up your simulation correctly, but when you, uh, run it under more realistic conditions, what tends to happen is you end up with lots and lots of tiny, tiny, tiny little holes. Or tiny pieces of spaces.","width":1079},{"text":"So you could imagine that you've got, say, a request comes in four 15 kilobytes and you happen to have a 16 kilobyte space free, so you'll use that","width":758},{"text":"Now you end up with this tiny 1 kilobyte unused space","width":301},{"text":"So, in practice, best fit tends to give you these tiny, tiny spaces which are difficult to reuse","width":799},{"text":"So, quite often, some variant of first fit actually turns out to be a pretty good choice","width":363},{"text":"What first fit tends to do is the size of the holes tends to vary as you walk further down your list of free spaces","width":636},{"text":"So, this is actually often a pretty good choice","width":434},{"text":"Okay, so that was placement strategies","width":324},{"text":"Let's talk about a few other things with memory","width":373},{"text":"So we talked about where it's stored in memory","width":122},{"text":"It's stored just above the code and the global variables","width":267},{"text":"And we can call sbrk to say, \"oh we need some more space\"","width":436},{"text":"So what then are the challenges of actually writing a good malloc?","width":211},{"text":"How are we going to keep track of which parts of our memory have been allocated and which parts are free?","width":499},{"text":"What would you use?","width":271},{"text":"If I said to you right now, \"Okay, start writing a malloc\", how would you keep track of","width":526},{"text":"Say again?","width":131},{"text":"An array of what?","width":476},{"text":"Okay","width":248},{"text":"A disjoint set of regions in memory, okay","width":401},{"text":"Okay, so here's what I'm going to ask you to start with is just a simple linked list","width":340},{"text":"We can start with just a linked list of what's been allocated","width":318},{"text":"And what's been freed","width":192}],
  // Part 5
  [{"text":"So if we go back to our picture that we were drawing","width":555},{"text":"To say 'Oh, look, this has been allocated, this has been freed, this has been allocated, this has been freed.'","width":610},{"text":"What we need is a way to say, 'Okay these are just entries inside a linked list.'","width":688},{"text":"And I can walk along these looking for blocks which are, say, large enough.  And then when I find a block (let's say I'm going to use this one), I need to update my data structure so that I've now got an entry to say 'Hey, this part has now been allocated, and'","width":1644},{"text":"'I've got some remaining space.'","width":476},{"text":"And we go back.  So we can choose to take a block out and turn it into some space and some remaining free space.'","width":527},{"text":"Which of course if that's zero, you don't need to have this entry.","width":835},{"text":"When you call free someone's going to give you a pointer to one of these used areas.  ","width":638},{"text":"And we have to go through our linked list then to update our counting - to say, 'Okay let's turn this now into some free area.'","width":1090},{"text":"Remember how I gave a little advert about coalescing blocks?  Well, our work may not be done because you can imagine that, over here, I've got a free block, and on this side I've got a free block.","width":1127},{"text":"So I now need to update my counting on my linked list to say 'You know what this is now just one giant block if I've got it on both sides, a huge block of free space that can be reused.'","width":1389},{"text":"We could do this really, really inefficiently by having a linked list and then when someone says, 'Oooooh!  Free a pointer.'","width":634},{"text":"I'll just walk through my linked list until I find my entry that corresponds to that pointer.  Oh my gosh, that'd be really slow.  Okay, I'll tell you what, I'll use a hash to speed it up.  I'll have a quick hash so that I can find my pointer and go back to my pointing structure and update my linked list structure correctly.'","width":1519},{"text":"When actually we can do a lot better than that.","width":339},{"text":"We can store our linked list structure as part of the memory that we allocate.","width":689},{"text":"Here's a clever trick.","width":275},{"text":"Let's allocate some memory and we'll allocate a little bit too much.","width":431},{"text":"So if the user says, 'Hey, malloc() 100 bytes we're going to malloc() say 120.'","width":496},{"text":"And we won't tell them, okay?  As far as the caller is concerned, they're just getting 100 bytes.'","width":495},{"text":"But the reason we did this is because we're going to store some secret information back here that's actually our linked list information (our pointer to where to go next).","width":927},{"text":"Wheeeee!","width":421},{"text":"When we return, don't return the pointer to the beginning of here.  No, make sure you bump up the return value so that the return value from your malloc() actually says, 'Okay, user program: here's a little space, here's the 100 bytes that you wanted.'  So we'll add our twenty bytes or however large you made it.","width":1594},{"text":"And when the user later says, 'Okay!  I'm done with my pointer.'  When they call free(), we have to play the other trick and go the other way and say, 'Okay now where did that block REALLY start?'  Let's subtract our 20 bytes again.","width":1045},{"text":"And if we do that, we can find our pointer.  Our linked list structure.","width":315},{"text":"So we're hiding the link information inside the allocation.  Pretty sneaky, huh?","width":663},{"text":"It gets even sneakier than this.","width":288},{"text":"We're going to do two more little things to make it really, really sneaky.","width":323},{"text":"First of all, we'll discover that we actually need to be able to go the other way.  If we start with a block over here, I actually want to be able to kind of have a doubly linked list.  I want to be able to go back to the previous block.","width":1001},{"text":"So not only do I want to store the pointer to the next, I want to store the pointer to the previous.  So I'm going to put that over here.","width":434},{"text":"And I'm also going to actually store this information at the end as well..","width":725},{"text":"So that if I come over here, I can always look at the previous block and say, 'Okay, where are you?  Where's your start?'","width":431},{"text":"The other thing that we can make use of is rather than storing actual addresses (pointers), we can just store numbers.  We can store the number of bytes and then use pointer arithmetic.  If you know that this is 120 bytes long, and we're looking at the beginning here, then we can just add 120.  We can just store 120 as the size of this thing.","width":1502},{"text":"And we can jump to the next entry.","width":260},{"text":"Or if we look back here to the previous value, then actually we're looking back at the previous block.  And if this makes a note of how big it is, like this one's 200, then we know that we can jump back 200 bytes.","width":960}],
  // Part 6
  [{"text":"This sounds really easy when I'm presenting it in lecture.","width":497},{"text":"Writing malloc is a rite of passage","width":388},{"text":"Meaning that you too can have gray hair and fuzzled eyes and look just like me...no","width":472},{"text":"What I mean is that it's tricky because now we have to start dealing with pointer arithmatic","width":432},{"text":"Now we have to start dealing with multiple pointers","width":147},{"text":"A little error like writing pa instead of pb or adding instead of subtracting can bite you big time","width":623},{"text":"And worse it won't bite you in an obvious way","width":244},{"text":"For example suppose that you didn't actually add enough bites","width":310},{"text":"You didn't add 20. You added a smaller number.","width":237},{"text":"Then the user program just overwrites your pointer values, KABOOM!","width":263},{"text":"Of course it crashes","width":94},{"text":"Later when someone calls free and you try to read these values and these values are just garbage","width":380},{"text":"Like what happened to my values!","width":134},{"text":"Why aren't my values correct?","width":167},{"text":"The only thing that can bite you is...","width":258},{"text":"sizeof","width":204},{"text":"So remember if you've got a struct for example","width":169},{"text":"That you've set up to hold these values","width":183},{"text":"Or an array","width":155},{"text":"The sizeof an object or struct is very different from the sizeof a pointer to something","width":661},{"text":"Or sizeof a pointer to an array is different from the sizeof an array","width":309},{"text":"So one little character here can really really bite you","width":269},{"text":"So my advice is to get started early when we put this out and to program slower than you've ever programmed before","width":638},{"text":"Make each line a work of art that you would trust your life to","width":454},{"text":"It still won't work, but at least you've tried really really hard","width":271},{"text":"Yes Question","width":458},{"text":"sizeof doesn't work like that","width":74},{"text":"sizeof is a compiler thing that runs at compile time","width":245},{"text":"so it uses the type ok so sizeof says \"oh look I'm looking at a pointer\"","width":312},{"text":"Pointers on my machine are 4 bytes or 8 bytes","width":222},{"text":"Ok it does not do anything at run time","width":307},{"text":"Alright how are we doing for time","width":264},{"text":"Ok","width":79},{"text":"We will finish with something really really easy. calloc and realloc","width":329},{"text":"calloc and realloc easy after you've done malloc","width":424},{"text":"These are easy. You can implement them in terms of malloc and free","width":570},{"text":"So realloc says \"guess what...I need some more space\"","width":431},{"text":"Here's a pointer that I previously got from my malloc call or calloc call","width":293},{"text":"Basically a heap pointer, a pointer to some memory. And here's how much memory I need now on the...","width":367},{"text":"I've decided that my array needs to be larger","width":205},{"text":"Realloc will do that for you","width":202},{"text":"But be careful, here's how realloc is supposed to work","width":158},{"text":"It says \"look, I'll try to find some bigger space.","width":152},{"text":"If you're asking for more space, then if necessary I will copy everything across and return a pointer back to you","width":487},{"text":"If it fails however, it returns NULL","width":195},{"text":"So be careful when using realloc. Always check it's return value.","width":250},{"text":"Because it may have decided to shuffle things around for you.","width":220},{"text":"I couldn't extend this. I have something else using the memory just next to you.","width":398},{"text":"So I had to allocate a new block.","width":150},{"text":"But you can implement realloc directly just using malloc and free","width":315},{"text":"Calloc","width":273},{"text":"Calloc is very similar to malloc","width":487},{"text":"What calloc does is it zeroes memory","width":354},{"text":"So it's a bit slower than malloc","width":258},{"text":"Also you give it 2 parameters","width":221},{"text":"You say this is my element size and this is the number of elements","width":290},{"text":"And so the amount of memory it's going to allocate is size times number","width":301},{"text":"Why somebody thought calloc needed two arguments, I have no idea","width":236},{"text":"They should have just made it with just a single argument","width":163},{"text":"The first thing it does just multiply these two numbers together, that's it","width":266},{"text":"Except it has to do it the hard way because you could get integer overflow","width":343},{"text":"But anyway, calloc is essentially malloc plus it zeroes the memory","width":229},{"text":"Fastest way to zero memory is to use memset","width":527},{"text":"And we are out of time. Yes! And with that it's 11:50. Have a wonderful week. I will be going down to the lab now.","width":435},{"text":"After I've answered questions incase people want to help setup the android ndk","width":448}],

  // Start Lecture Video 6
  // Part 0
  [{"text":"morning cs 241. how are you this morning","width":673.1818182468414},{"text":"great. okay. so here's what we're going to do today. we are going to talk about memory allocation","width":342.18181824684143},{"text":"we're going to look at some code that some ta's wrote last semester","width":226.18181824684143},{"text":"and then we're going to jump into a new topic called threads","width":337.18181824684143},{"text":"and this is where we can actually get more than one CPU to work on our process at a time","width":608.1818182468414},{"text":"let's start with this. let's have a look at this code that the TA's wrote","width":330.18181824684143},{"text":"they actually wrote a version of malloc() and free()","width":242.18181824684143},{"text":"i want to show you that it is possible to write some code that works and we'll see how it goes","width":574.1818182468414},{"text":"first we'll define a struct and we use typedef because we're lazy and we don't want to have to keep writing struct everytime we refer to this memory object","width":825.1818182468414},{"text":"and so in the future we can just say metadata_entry_t, that's just a shorthand","width":364.18181824684143},{"text":"typedef is just saying here's an alias","width":175.18181824684143},{"text":"and this is what we're going to have inside our little struct. we have a ptr that we'll be using for the user memory","width":391.18181824684143},{"text":"we want to know how many bytes to use","width":103.18181824684143},{"text":"we want to know are we talking about memory that's currently in use by the program or is it free. is it available for a future malloc()","width":570.1818182468414},{"text":"and finally here is what we're using a linked list so we can walk through these things","width":531.1818182468414},{"text":"so this is going to be our metadata, our information about what memory our malloc() has actually created or freed","width":412.18181824684143},{"text":"and so this will be the beginning of our linkedlist","width":229.18181824684143},{"text":"ok, so now let's have a look at the malloc() implementation","width":256.18181824684143},{"text":"we want to know how many bytes do they want. so we're going to look through our linkedlist and look for the appropriate block that we can reuse","width":821.1818182468414},{"text":"let's walk through our list and we can obviously we only care about entries which are free. we don't want to use a block that is currently in use that's currently been allocated for some purpose","width":605.1818182468414},{"text":"but i've missed out some code here so it's going to be your job to figure out what code is here","width":351.18181824684143},{"text":"also what placement strategy is this using. remember we talked about different strategies in the last lecture","width":588.1818182468414},{"text":"which one is this using and how do we change the code to implement a different placement strategy so you choose a different one and then figure out how to alter it","width":586.1818182468414},{"text":"and then there's more code down here. so what's this second half of the code do","width":271.18181824684143},{"text":"so that's going to be our challenge for the next 5 minutes: what's the missing code","width":263.18181824684143},{"text":"change the strategy that this is using and what does the rest of the code do. why is it doing what it's doing?","width":488.18181824684143},{"text":"and you may also want to have a look at the free() and i'll walk around and answer any quesitons  on this or this week's assignment","width":953.1818182468414},{"text":"silence","width":12169.181818246841}],
  // Part 1
  [{"text":"silence","width":10418.181818246841},{"text":"so here's how this works","width":160.18181824684143},{"text":"we're calling malloc() and we're going to look through all the previous allocations that we've ever made","width":517.1818182468414},{"text":"and we're going to see if any of those allocations we've made are free","width":447.18181824684143},{"text":"so we want to check if they're free","width":113.18181824684143},{"text":"and we want to make sure that the block of memory is of sufficient sie","width":430.18181824684143},{"text":"so let's check into our entry that size is at least equal to the requested size","width":891.1818182468414},{"text":"if it is, then maybe we can use that use that block. now we could at this point say hey great i've found a block but instead we're going to change our chosen pointer if the following is true","width":965.1818182468414},{"text":"either we haven't chosen anything yet or the size of the allocation we're looking at is even smaller then the previous block we've found","width":983.1818182468414},{"text":"in other words what kind of placement strategy are we using","width":288.18181824684143},{"text":"best fit! yes, this is best fit","width":413.18181824684143},{"text":"if i was using a tinder analogy, this would be like a best match you go through all the matches okay yeah","width":736.1818182468414},{"text":"of course sometimes you don't want to take that long and we could do a first fit: oh, yeah, that'll do","width":600.1818182468414},{"text":"so at that point we could say break out of this loop as soon as chosen is non-null so we could change our code somehow","width":460.18181824684143},{"text":"so for example if i were to put break in here then i can break out of the loop","width":337.18181824684143},{"text":"or i could have changed the conditions of the while loop to say while chosen is non null","width":338.18181824684143},{"text":"but yeah this is best fit and we go around and look at those allocations until we've actually exhausted all of them","width":893.1818182468414},{"text":"so it could be that we've found some space some previously allocated space that is not being used and in which case life is easy","width":524.1818182468414},{"text":"so if chosen is free then all we need to do is update that entry to say actually it's no longer free its being used","width":494.18181824684143},{"text":"and we can immediately return and we'll tell the user code to use the memory found at that pointer","width":1035.1818182468414},{"text":"so that was the easy case","width":81.18181824684143},{"text":"let's take a break for a moment and now let's look at how free works because later on when the C code is finished with the memory, it's going to have to do the same trick again once with the meta data, so here we are going to that linked list","width":1047.1818182468414},{"text":"eventually we find the entry that the user was using and we can mark it as available","width":711.1818182468414},{"text":"this works but its not very efficient. you can see that as we have more allocations in our linked list this code is going to get slower and slower","width":768.1818182468414},{"text":"our free is order n","width":413.18181824684143},{"text":"so this is not a very good implementation. which is why you get it for free","width":405.18181824684143},{"text":"maybe we can do better than this. rather than having a separate linked list maybe we can actually come up with a better solution. but anyway, now let's go back to our malloc","width":793.1818182468414},{"text":"now let's actually see what this code does. if we weren't successful in finding in any memory","width":462.18181824684143},{"text":"instead we call this sbrk() thing we say okay if chosen equals sbrk then sbrk and we pass in the size of the struct","width":680.1818182468414},{"text":"whenever you use sizeof() stop and pause and think come back come back, are you actually pausing in the right thing to sizeof()","width":479.18181824684143},{"text":"sizeof() works at compile time. the compiler uses the type that you give it","width":323.18181824684143},{"text":"the sizeof a struct is not the same thing as the size of the pointer to a struct and it's a common error to pass in the wrong thing","width":563.1818182468414},{"text":"sizeof() an array is not the same thing as an entry of that array","width":264.18181824684143}],
  // Part 2
  [{"text":"alright so here's what these two lines do","width":257.18181824684143},{"text":"they're basically saying hey operating system, I need some extra bytes","width":181.18181824684143},{"text":"heres how many","width":93.18181824684143},{"text":"talking to your operating system is very slow","width":156.18181824684143},{"text":"thats gonna take several microseconds to complete","width":411.18181824684143},{"text":"and then we're gonna say here, chosen","width":217.18181824684143},{"text":"im going to set this pointer to be sbrk and then call sbrk on size","width":274.18181824684143},{"text":"guess what that does. that also says to the operating system i need now size bytes","width":313.18181824684143},{"text":"they're actually calling sbrk 4 times","width":227.18181824684143},{"text":"to say alright give me some byte not only for the struct but give me some bytes in order for to satisfy the users request","width":507.18181824684143},{"text":"and what we're doing with the asterisk each time is raising the rule to mar raising the threshold for where our heap finishes","width":610.1818182468414},{"text":"so now we're gotten set up our little struct","width":137.18181824684143},{"text":"we'll set it's size","width":113.18181824684143},{"text":"we'll set that it's free","width":108.18181824684143},{"text":"and we'll set the next pointer to equal to metadata and we change the metadata chosen to the pointer","width":397.18181824684143},{"text":"so what we've done here is insert our new entry into the beginning of the linked list","width":515.1818182468414},{"text":"so the next time we call free or malloc we're gonna see this newly created entry inside our linked list","width":497.18181824684143},{"text":"and then finally we say back to the user here's the memory of size bytes that you needed","width":908.1818182468414},{"text":"questions about this code?","width":368.18181824684143},{"text":"yes?","width":531.1818182468414},{"text":"if chosen is bigger than the amount of space that you need","width":153.18181824684143},{"text":"yes","width":51.18181824684143},{"text":"so","width":64.18181824684143},{"text":"what this code does not do","width":133.18181824684143},{"text":"is do anything without spare space","width":293.18181824684143},{"text":"it's got a very simple view of the world","width":116.18181824684143},{"text":"its view of the world is","width":120.18181824684143},{"text":"yeah i've got a block here that was previously allocated, a block here, some memory here","width":412.18181824684143},{"text":"and if you want to say to this much memory then it's obviously not going to give you that one and it would give you say this block","width":703.1818182468414},{"text":"and you'd say well what about this space back here","width":149.18181824684143},{"text":"can we use that","width":69.18181824684143},{"text":"should we add another entry because maybe in the moment someone will malloc and attempt to make a smaller space","width":457.18181824684143},{"text":"ah too bad","width":128.18181824684143},{"text":"okay so we've got some fragmentation inside each of these allocations","width":282.18181824684143},{"text":"if we dont have a perfect fit","width":598.1818182468414},{"text":"yes?","width":558.1818182468414},{"text":"ah right","width":36.18181824684143},{"text":"okay","width":32.18181824684143},{"text":"so","width":47.18181824684143},{"text":"before this line","width":214.18181824684143},{"text":"we've got metadata","width":271.18181824684143},{"text":"pointing to our first entry","width":238.18181824684143},{"text":"yes this is my little struct now","width":108.18181824684143},{"text":"which then has a next pointer which points to another one which has a next one which points to another one","width":291.18181824684143},{"text":"and so on and so on and so on","width":140.18181824684143},{"text":"so what we do","width":160.18181824684143},{"text":"is ","width":93.18181824684143},{"text":"we set up our new struct","width":147.18181824684143},{"text":"so its next pointer ","width":365.18181824684143},{"text":"points to the old beginning of the linked list","width":294.18181824684143},{"text":"alright so when you see equals","width":146.18181824684143},{"text":"just remember","width":24.18181824684143},{"text":"your copying bit patterns","width":63.18181824684143},{"text":"you're just changing one pointer to look at the same thing as another pointer","width":360.18181824684143},{"text":"and then the next line is meaningful","width":148.18181824684143},{"text":"we've changed that variable metadata","width":142.18181824684143},{"text":"to look to our new brand link","width":970.1818182468414},{"text":"any other questions","width":232.18181824684143},{"text":"alright then","width":119.18181824684143},{"text":"so","width":898.1818182468414},{"text":"okay yes","width":41.18181824684143},{"text":"get your spectacles on","width":86.18181824684143},{"text":"i did this too small today and it was tiny","width":337.18181824684143},{"text":"when can a system use COW","width":91.18181824684143},{"text":"moooo","width":57.18181824684143},{"text":"that's a moot point","width":38.18181824684143},{"text":"no","width":69.18181824684143},{"text":"COW","width":54.18181824684143},{"text":"cow stands for copy on write","width":381.18181824684143},{"text":"here's the idea","width":169.18181824684143},{"text":"you and I can share a resource","width":158.18181824684143},{"text":"providing neither of us actually tries to change it","width":336.18181824684143},{"text":"and we can do that very quickly","width":97.18181824684143},{"text":"well the day that one of that you and i actualy need to write to that resource, that's when we're asked to duplicated it","width":497.18181824684143},{"text":"we'll do it very quickly before the other person notices","width":311.18181824684143},{"text":"so you can defer the actual copying process, the duplication process, until a change or modification happens","width":510.18181824684143},{"text":"ah this is a common idea for performance because quite often it turns out that we don't actually need to write to something or modify something","width":670.1818182468414},{"text":"so if you can detect when something is about to change","width":193.18181824684143},{"text":"maybe you're writing an alloc class or youre the operating system","width":238.18181824684143},{"text":"we dont actually need to initialize stuff or copy stuff until it actually is required","width":500.18181824684143},{"text":"and so","width":130.18181824684143},{"text":"a little brain teaser i have to today","width":136.18181824684143},{"text":"is how can we improve calloc performace here","width":285.18181824684143},{"text":"so COW is just copy on write","width":563.1818182468414},{"text":"so its a way to have shared data structures until something mutable happens","width":318.18181824684143},{"text":"until a change happens, and that way, we can use our resources efficiently","width":504.18181824684143},{"text":"right lets just see what you remember from previous lectures","width":177.18181824684143},{"text":"what's realloc","width":367.18181824684143},{"text":"it's when you change your mind","width":90.18181824684143},{"text":"you say, oh okay remember those bytes i malloc, actually i decided i need more bytes","width":393.18181824684143},{"text":"so we can use realloc when i say i'm creating an array","width":292.18181824684143},{"text":"and i keep going around a loop","width":93.18181824684143},{"text":"and i decide to say remember that array i made","width":125.18181824684143},{"text":"turns out it's not large enough","width":152.18181824684143},{"text":"okay so realloc works but there's a big caveat","width":355.18181824684143},{"text":"as you've just seen how malloc actually places things","width":210.18181824684143},{"text":"it could be that we can't keep the user data inside the same memory address anymore","width":356.18181824684143},{"text":"so when you call realloc be prepared to update your pointers with the return result of realloc","width":465.18181824684143},{"text":"so if i've got an array","width":153.18181824684143},{"text":"that i previously created say from realloc or malloc or calloc","width":457.18181824684143},{"text":"then don't just say you know what im gonna make it larger","width":786.1818182468414},{"text":"i'm gonna make it say 100x 100 entries larger","width":476.18181824684143},{"text":"infact, let me just change this code a little bit","width":143.18181824684143},{"text":"let's say that ","width":206.18181824684143},{"text":"you called calloc","width":126.18181824684143},{"text":"and","width":126.18181824684143},{"text":"i've got like a size of thing","width":222.18181824684143},{"text":"something","width":82.18181824684143},{"text":"and i've got like 50 entries here","width":362.18181824684143},{"text":"and then you say you know what actually 50 wasn't enough","width":122.18181824684143},{"text":"im going to double my space","width":165.18181824684143},{"text":"i've just managed to write two errors in 2 lines","width":508.18181824684143},{"text":"actually both of those were in the second line","width":140.18181824684143}],
  // Part 3
  [{"text":"so here's two gotchas the first is that my variable, array i didnt build it to update","width":820.1818182468414},{"text":"and so it could be that during testing everything is fine but later one it turns out that im trying to change the size of realloc and actually had to move my array to different memory and i didnt update it","width":812.1818182468414},{"text":"so make sure you use a return value","width":193.18181824684143},{"text":"this second error is awful","width":153.18181824684143},{"text":"and im going to tell you know its because life is short","width":216.18181824684143},{"text":"and please please never make this error","width":183.18181824684143},{"text":"unless youre trying to confuse someone else","width":184.18181824684143},{"text":"this is a fantastic gotcha","width":367.18181824684143},{"text":"does that code really allocate enough things for 100 entries","width":482.18181824684143},{"text":"no it allocates 100 bytes","width":187.18181824684143},{"text":"what we forgot to do was multiply it by the sizeof() our entries","width":696.1818182468414},{"text":"so don't just plug in N here or number of items remember that calloc realloc and malloc work with bytes","width":477.18181824684143},{"text":"and we didnt allocate enough bytes","width":139.18181824684143},{"text":"which means later on","width":74.18181824684143},{"text":"when we start putting things in our array we're going to go past the end of the array","width":285.18181824684143},{"text":"and exciting things can happen called segfaults and data corruption","width":405.18181824684143},{"text":"so start and pause whenever you see realloc are you actually passing the right number of bytes","width":351.18181824684143},{"text":"and when you see sizeof() are you calculating the size of the right type","width":443.18181824684143},{"text":"okay","width":58.18181824684143},{"text":"thankfully now no one in this room is ever going to mkae that error again","width":194.18181824684143},{"text":"we'll just let university of whatever make those errors","width":277.18181824684143},{"text":"okay","width":29.18181824684143},{"text":"so","width":80.18181824684143},{"text":"what do remember about calloc?","width":105.18181824684143},{"text":"what does calloc do","width":164.18181824684143},{"text":"okay it takes two arguments","width":140.18181824684143},{"text":"and it multiplies them together to determine the number of bytes","width":179.18181824684143},{"text":"what else? how is it different from malloc?","width":289.18181824684143},{"text":"it clears the memory","width":68.18181824684143},{"text":"yes","width":112.18181824684143},{"text":"calloc now only gives you back a pointer to some memory","width":194.18181824684143},{"text":"it zeros out all that memory as well for you","width":242.18181824684143},{"text":"so we go back to java arrays","width":120.18181824684143},{"text":"we said hey i need a new integer array","width":159.18181824684143},{"text":"a great way to implement that would be to use calloc","width":371.18181824684143},{"text":"so of course then","width":48.18181824684143},{"text":"calloc is much slower","width":83.18181824684143},{"text":"we actually have to write to all those memory locations","width":104.18181824684143},{"text":"and you remember talking to memory is really slow","width":187.18181824684143},{"text":"especially when you need to talk to lots of it","width":167.18181824684143},{"text":"so the reason that we dont necessarily always call calloc is because sometimes we know that our program is going to write into every memory location","width":505.18181824684143},{"text":"we don't even need to waste time zeroing it out first","width":498.18181824684143},{"text":"so it zeros the bytes","width":800.1818182468414},{"text":"so you can write a loop to do this","width":228.18181824684143},{"text":"but ill give you a little hint","width":138.18181824684143},{"text":"if youre ever writing a calloc and you want it to be performant","width":233.18181824684143},{"text":"then remember when you do the operating system and say hey i need some new bytes","width":358.18181824684143},{"text":"i guarantee you those bytes will be zero","width":304.18181824684143},{"text":"because the kernel the operating system does not want to give you some memory that is being used by a different process","width":517.1818182468414},{"text":"maybe its got a password in it","width":73.18181824684143},{"text":"maybe its got a secret key in it","width":85.18181824684143},{"text":"maybe its got stuff that you shouldnt have access to","width":156.18181824684143},{"text":"so for security","width":134.18181824684143},{"text":"you will get bytes which are zero","width":315.18181824684143},{"text":"so if you know that you're getting new bytes","width":183.18181824684143},{"text":"you can reliably","width":114.18181824684143},{"text":"you dont actually have to zero those out","width":139.18181824684143},{"text":"but only if you know that youre getting them fresh from the operating system","width":201.18181824684143},{"text":"youre not just using memory thats already part of your process","width":687.1818182468414},{"text":"boundary tags we haven't talked about much","width":159.18181824684143},{"text":"but we have talked about indirectly","width":207.18181824684143},{"text":"the last lecture","width":78.18181824684143},{"text":"i gave you an idea about whenever we did an allocation","width":220.18181824684143},{"text":"we could actually store the size of our allocated area","width":463.18181824684143},{"text":"at the beginning and the end of each part","width":270.18181824684143},{"text":"so rather than having a separate struct like we saw at the beginning of this lecture","width":223.18181824684143},{"text":"we could actually hide inside here how many bytes this is","width":280.18181824684143},{"text":"so this say is 16 bytes","width":158.18181824684143},{"text":"put 16 here","width":71.18181824684143},{"text":"this is 20","width":212.18181824684143},{"text":"so if we do these tags at the beginning and end","width":272.18181824684143},{"text":"then when we come to do something like a free","width":359.18181824684143},{"text":"i know that because these are like train couches becuase theyre next door to each other if i just go backwards enough bytes","width":438.18181824684143},{"text":"i can actually read how big the previous allocation was","width":236.18181824684143},{"text":"and that allows me to manipulate these values","width":149.18181824684143},{"text":"and to maintain a list what's been allocated","width":334.18181824684143},{"text":"as part of this train","width":174.18181824684143},{"text":"as part of these tags which are next to each other","width":369.18181824684143},{"text":"alright","width":55.18181824684143},{"text":"so when actually return from malloc","width":193.18181824684143},{"text":"we wouldn't return the beginning of the carriage if you like, no we look a few bytes in","width":383.18181824684143},{"text":"and say okay here's that area for you to play with","width":240.18181824684143},{"text":"you can put whatever data you want inside this bit here","width":246.18181824684143},{"text":"because you asked for 8 bytes in the middle","width":258.18181824684143},{"text":"but becuase the users code was broken","width":296.18181824684143},{"text":"it kept going","width":140.18181824684143},{"text":"say someone didn't actually request enough bytes","width":238.18181824684143},{"text":"so as a result of that","width":101.18181824684143},{"text":"the user code just destroyed our metainformation inside here","width":329.18181824684143},{"text":"in fact it could've kept going as well","width":527.1818182468414},{"text":"things might seem to work until the day the code calls free","width":446.18181824684143},{"text":"becuase now you're free implementation assumes that it can read these values correctly","width":417.18181824684143},{"text":"but as we've just seen the values here are gone","width":473.18181824684143},{"text":"they've been replaced by whatever the user code happened to write in there or the rest of the program actually did","width":467.18181824684143},{"text":"so now you linked list manipulation and your calculations","width":267.18181824684143},{"text":"ha ha ha","width":240.18181824684143},{"text":"might be updating arbitrary pieces of memory","width":144.18181824684143},{"text":"and you're adding whatever the values were in here","width":255.18181824684143},{"text":"heres an example where a buffer overflow could make your perfectly reasonable code do bad things","width":478.18181824684143},{"text":"now it could make it say write arbitrary values into arbitrary different locations","width":339.18181824684143},{"text":"which is why buffer overflows are so dangerous","width":275.18181824684143},{"text":"of course most likely whats going to happen is when you call free your program crashes","width":385.18181824684143},{"text":"so when your program crashes during free its probably because something bad happened earlier to the heap","width":546.1818182468414},{"text":"so how can we stop that?","width":229.18181824684143},{"text":"what can we do?","width":364.18181824684143},{"text":"lets say youve inherited a program where it just crashes strangely on free","width":350.18181824684143},{"text":"how could you try to figure out what's going on?","width":693.1818182468414}],
  // Part 4
  [{"text":"OK. So, programmers took inspiration from miners.","width":403.18181824684143},{"text":"When you go down in the mine you take a canary, yes?","width":185.18181824684143},{"text":"The nice thing about canaries is they die before you, if there's poison gasses.","width":343.18181824684143},{"text":"Or at least then they stop singing as all is well.","width":164.18181824684143},{"text":"So here's what we can do. We can actually put some values into our heap barrier.","width":433.18181824684143},{"text":"And then we just check that those values are still correct.","width":172.18181824684143},{"text":"like there special hexidecimal values, like deadbeef, deadcode, or a value that is a quick hash of the values we want to store.","width":643.1818182468414},{"text":"So we can at least verify that things haven't been overwritten.","width":254.18181824684143},{"text":"So debug versions of malloc and free will do this. They'll take some extra space to write begging and endpoints.","width":473.18181824684143},{"text":"And then before they do anything, they'll check those values to see if they've been overwritten.","width":453.18181824684143},{"text":"So we can't stop the override, but we can at least detect it afterwards.","width":567.1818182468414},{"text":"Any questions?","width":435.18181824684143},{"text":"By the way this idea of putting the size inside as part of the allocated area, this was developed by, I think, Donald Knuth, many years ago.","width":835.1818182468414},{"text":"We've been living inside the user process. Now let's step back a moment and talk about virtual memory.","width":610.1818182468414},{"text":"What do we mean by virtual memory? We've virtualized memory. Ok, what do we mean by that?","width":229.18181824684143},{"text":"We mean that the addresses that our processes uses can have very little connection with the actual addresses that the RAM sees.","width":725.1818182468414},{"text":"That, in essence, there's a mapping.","width":219.18181824684143},{"text":"So ya, we can keep talking about the process address space.","width":200.18181824684143},{"text":"It goes from zero up to some high number, let's say 7fffffff.","width":310.18181824684143},{"text":"And we can think of it in terms of little blocks.","width":143.18181824684143},{"text":"And in fact, our virtual memory likes to work with pages called, and there typically about 4096 bytes, or 4k","width":666.1818182468414},{"text":"So, anytime you read or write into your virtual memory, we've got to take that address.","width":653.1818182468414},{"text":"Some magic happens.","width":217.18181824684143},{"text":"And say ok, which piece of RAM, which physical address, should I read or write to?","width":785.1818182468414},{"text":"This side will have virtual memory, and and this side we have real addresses.","width":730.1818182468414},{"text":"And it's the MMU, the Memory Management Unit, that has to convert one to the other.","width":530.1818182468414},{"text":"Now today we're just doing the quick two minute version, because there's a lot more to say about this","width":316.18181824684143},{"text":"I just want to give you an idea we can actually step outside the matrix.","width":248.18181824684143},{"text":"Once we start playing these tricks, there's some amazing things we can do with this, as system programmers.","width":608.1818182468414},{"text":"This is a fundamental piece of any reasonable hardware that runs a modern operating system will have a memory management unit,","width":698.1818182468414},{"text":"in order to convert virtual memories into physical addresses.","width":195.18181824684143},{"text":"And here's the cool thing is that now these don't need to be contiguous.","width":284.18181824684143},{"text":"That this mapping can be all over the place.","width":254.18181824684143},{"text":"So this 4K can go to some lower memory and this 4K can go to some other piece of RAM.","width":422.18181824684143},{"text":"So this allows us to use our physical memory much more efficiently.","width":307.18181824684143},{"text":"We don't have to worry about fragmentation, now, and having holes or having spaces inside our physical memory that we can't use.","width":670.1818182468414},{"text":"[So if it's stored on the hard drive...] Ah yes, I wasn't going to mention that but ya.","width":181.18181824684143},{"text":"Here's the cool thing is that now we can now say to every process, \"Hey! you want 4GB? No problem!\"","width":264.18181824684143},{"text":"\"You want 4GB? No problem! You want 16GB? No problem!\" Ok my machine only has 1GB but don't tell them.","width":444.18181824684143},{"text":"Because what we can do is, ya, we can actually secretly store some of the information they want on the hard drive.","width":508.18181824684143},{"text":"It's basically like this, imagine only the bits of the world your currently looking at exist.","width":457.18181824684143},{"text":"Any time you turn around and look behind you, I'm going to put you on pause and quickly recreate everything that you intended to look at.","width":563.1818182468414},{"text":"When I finish doing that, I'll release you again.","width":243.18181824684143},{"text":"So that's what the virtual memory, that's what the operating system does for you.","width":273.18181824684143},{"text":"You think you got 4GB of space. I just promised you that.","width":359.18181824684143},{"text":"Promises are easy because I know you can't actually look at it all at the same time.","width":313.18181824684143},{"text":"I'm going to intercept any time you try to read or write memory to make sure that what you're trying to read or write actually appears to be there inside RAM.","width":473.18181824684143},{"text":"But it's all conjuring. It's all fake. And it's up to the operating system to do this for your process and any other process that's currently running.","width":776.1818182468414},{"text":"Right, that's enough of virtual memory today.","width":333.18181824684143},{"text":"But it's a wonderful system. It's one of the best parts of an operating system today, I believe.","width":353.18181824684143},{"text":"Instead, let's talk about something which is just as powerful and is going to separate your programs from mere novice programmers.","width":863.1818182468414},{"text":"And that is being able to use threads effectively.","width":152.18181824684143},{"text":"This is the beginnings of the major part of this course here, is to understand how to work with synchronization and work with multiple threads. ","width":493.18181824684143},{"text":"This is the coolest bit so here we go.","width":315.18181824684143},{"text":"Let's put on some basic ideas here.","width":202.18181824684143},{"text":"How many heaps does a process have?","width":344.18181824684143},{"text":"That was easy. One.","width":151.18181824684143},{"text":"Inside your process memory a heap is used for all those malloc and free calls and there's only one heap. ","width":641.1818182468414},{"text":"So it's just a BIG area of space that anytime you want memory from you can just call malloc, or calloc or realloc.","width":418.18181824684143},{"text":"But you can just say \"Hey I need some memory and this is how many bytes I need.","width":178.18181824684143},{"text":"It's stored in the heap.","width":330.18181824684143},{"text":"How many stacks?","width":110.18181824684143},{"text":"When we first introduced our program modal we had just one","width":223.18181824684143},{"text":"We said, \"What's a stack?\"  Well, anytime you call a function I need some space for those automatic temporary variables","width":398.18181824684143},{"text":"And also a bit of space to say where the CPU should go back to when it finishes calculating anything we need to do inside that function.","width":470.18181824684143},{"text":"And if the function is recursive then my stack is going to get lower, bigger and bigger, because I'm going to keep calling myself and I need more space on the stack.","width":510.18181824684143},{"text":"And if my function calls other functions, ya agian, my stack is going to get bigger.","width":297.18181824684143},{"text":"That's a stack.","width":266.18181824684143},{"text":"What if I had two CPUs working inside my process at the same time?","width":609.1818182468414},{"text":"Each one needs a stack. Yes?","width":187.18181824684143},{"text":"Because each one will be inside a function; that function might be calling things.","width":331.18181824684143}],
  // Part 5
  [{"text":"So here is the basic idea","width":237.18181824684143},{"text":"I'm going to have one per thread [gibberish]","width":760.1818182468414},{"text":"So our processes have at least one thread of execution","width":233.18181824684143},{"text":"And it would start in main, as far as we are concerned","width":138.18181824684143},{"text":"And finish when you either called exit or returned from main","width":334.18181824684143},{"text":"And now I'm going to show you how we can have multiple threads going inside each process","width":565.1818182468414},{"text":"So let's start on the stack. All the automatic variables, also known as temporary variables,","width":420.18181824684143},{"text":"(the reason they are called automatic is because they automatically disappear when we return from a function and our stack gets shorter)","width":763.1818182468414},{"text":"You'll find the return address for the CPU, in other words what code you want it to execute when it finished calculating the current function","width":810.1818182468414},{"text":"and the last thing we'll see is the previous stack pointer, or the previous SP","width":699.1818182468414},{"text":"Because we want our stack to shrink when we return from the current function","width":759.1818182468414},{"text":"So what happens if our stack gets too large?","width":294.18181824684143},{"text":"It's.... Stack Overflow. Yes! You've probably heard of the website called Stack Overflow.","width":412.18181824684143},{"text":"I actually registered as the username Infinite Recursion, I couldn't believe it wasn't already taken","width":679.1818182468414},{"text":"So we have a limited amount of memory so in a single threaded model, our stack would meet the heap. Kaboom, and we're out of space","width":933.1818182468414},{"text":"Our program crashes. In fact, by the power of Virtual Memory, what we can do is set up little pages of memory that are like quicksand","width":610.1818182468414},{"text":"If our program attempts to read them, then it will crash the program deliberately, we send it a Segmentation Fault. Yes? ","width":452.18181824684143},{"text":"[Student asking question]","width":201.18181824684143},{"text":"Can you sbrk more memory for the [stack]. No, no you cannot. Sbrk represents the top of the heap.","width":434.18181824684143},{"text":"[Another student question]","width":257.18181824684143},{"text":"No, but where they meet depends how big your heap is and how big your stack is","width":425.18181824684143},{"text":"What we're going to do is make multiple threads though, supposing we have multiple CPU's working at the same time","width":474.18181824684143},{"text":"So what we'll have to do is make our stack start in different places","width":212.18181824684143},{"text":"So there is actually a possibility of one stack hitting another stack if it gets too large","width":483.18181824684143},{"text":"Now let's have a look at some code, let's play with some code","width":450.18181824684143},{"text":"Here we go. C'mon. Great.","width":353.18181824684143},{"text":"We are going to be working with a thread framework called pthreads","width":250.18181824684143},{"text":"It's very popular, you can run it on Android machines as well","width":291.18181824684143},{"text":"Here's the plan: We are going to make our program do some CPU cycles","width":470.18181824684143},{"text":"We agree that our program will never print Hello World, it will just go around this loop forever","width":401.18181824684143},{"text":"But what I would like to do is have a second CPU working on my machine","width":316.18181824684143},{"text":"And for that, I can call pthread_create","width":243.18181824684143},{"text":"There's four arguments, let's have a look at them","width":233.18181824684143},{"text":"First, we have a pointer to pthread_t, some attributes which can just be NULL, this scary looking thing and finally an arg","width":939.1818182468414},{"text":"Let's talk about each of these","width":222.18181824684143},{"text":"First of all, this is a function pointer. It looks pretty scary, void star start routine ahhhhh!","width":505.18181824684143},{"text":"Here's how to read this: You see where it says start routine?","width":214.18181824684143},{"text":"Just interrupt that as the name of your function and then work backwards. It's going to return a pointer to a void* and it takes an argument void*","width":813.1818182468414},{"text":"And then we wrap the name of the function with an extra set of parenthesis. Let's take this and write our function","width":931.1818182468414},{"text":"Cool beans","width":506.18181824684143},{"text":"Alright, what should we do inside cool beans?","width":133.18181824684143},{"text":"Let's sleep for 2 seconds, then we will print out the pointer","width":902.1818182468414},{"text":"And a new line. Ok, so now let's call pthread_create","width":357.18181824684143},{"text":"We can have a pthread id. So we pass in the address of that stack variable, we aren't doing attributes today","width":781.1818182468414},{"text":"Now we can just pass in the function name. If you ever pass in a function name without the parenthesis, it means \"Tell me the address of this code\"","width":725.1818182468414},{"text":"And finally we can pass in a void *, so we write (void *) 12345","width":922.1818182468414},{"text":"Let's write something in hex. I need a hex value. How about 0xdeadcode?","width":857.1818182468414}],
  // Part 6
  [{"text":"okay","width":277.18181824684143},{"text":"right lets run this, see what happens","width":232.18181824684143},{"text":"and it wont quite work, cus uhhh gcc will say \"hey I've no idea.. what\"","width":765.1818182468414},{"text":"uhhh doesn't know what sleep is, and shouldn't know what pthread is either","width":281.18181824684143},{"text":"so lets fix this","width":76.18181824684143},{"text":"we need uhmm","width":152.18181824684143},{"text":"pthread.h","width":93.18181824684143},{"text":"and also on our options down here","width":173.18181824684143},{"text":"we have to tell the compiler","width":93.18181824684143},{"text":"please","width":28.18181824684143},{"text":"I really wanna compile with pthread","width":275.18181824684143},{"text":"there we go","width":586.1818182468414},{"text":"... what. okay! ","width":144.18181824684143},{"text":"right great","width":58.18181824684143},{"text":"so it printed out..","width":198.18181824684143},{"text":"dead code..","width":187.18181824684143},{"text":"so what I want to show you is...","width":76.18181824684143},{"text":"look we passed in a pointer to something over here","width":218.18181824684143},{"text":"and then inside our function called beans, we just printed the pointer value","width":276.18181824684143},{"text":"we did not try to follow the pointer value","width":117.18181824684143},{"text":"if I tried to print out the string of deadcode","width":172.18181824684143},{"text":"my program will probably crash","width":96.18181824684143},{"text":"thats probably not a valid memory address to read","width":296.18181824684143},{"text":"okay ","width":33.18181824684143},{"text":"and now my machine is getting hot","width":196.18181824684143},{"text":"why? because there a cpu","width":64.18181824684143},{"text":"we're running","width":123.18181824684143},{"text":"uhmmm it it it, my program never finished","width":183.18181824684143},{"text":"right, the first cpu is still running","width":373.18181824684143},{"text":"so what have we just proved","width":71.18181824684143},{"text":"we proved","width":33.18181824684143},{"text":"that we can do two things at the same time","width":212.18181824684143},{"text":"inside one process","width":290.18181824684143},{"text":"what do you think happens","width":73.18181824684143},{"text":"if I make a hundred threads","width":526.1818182468414},{"text":"my machine ","width":53.18181824684143},{"text":"might only have say a couple of cpus","width":195.18181824684143},{"text":"so how is it going to run","width":146.18181824684143},{"text":"those threads","width":44.18181824684143},{"text":"if I've only got 2 actual cpus. yeah?","width":388.18181824684143},{"text":"so what I do, is it","width":123.18181824684143},{"text":"lets one thread run","width":80.18181824684143},{"text":"and when it finishes","width":66.18181824684143},{"text":"it says","width":23.18181824684143},{"text":"next thread I know youve been waiting for a while","width":133.18181824684143},{"text":"you can have the cpu next","width":87.18181824684143},{"text":"actually its cleverer than that","width":125.18181824684143},{"text":"every 10 milliseconds or so","width":194.18181824684143},{"text":"a little hardware timer goes off","width":110.18181824684143},{"text":"and the operating systems scheduler comes up","width":120.18181824684143},{"text":"and it says","width":37.18181824684143},{"text":"you have been having chocolate for too long. in other words you've been having the CPU for too long","width":266.18181824684143},{"text":"Im going to put you on pause and let this other thread","width":255.18181824684143},{"text":"that has been waiting for a while have access to the CPU and so that thread gets to run","width":256.18181824684143},{"text":"so the operating system","width":95.18181824684143},{"text":"treats memory, the cpu and other resouces","width":181.18181824684143},{"text":"as scarce resources","width":93.18181824684143},{"text":"and tries to allocate them very efficiently","width":123.18181824684143},{"text":"and the different parts of the running system","width":158.18181824684143},{"text":"that wants to have access","width":165.18181824684143},{"text":"and how we schedule that ","width":171.18181824684143},{"text":"is actually an area of research","width":206.18181824684143},{"text":"so we have passed in something. you've seen that","width":113.18181824684143},{"text":"what we have passed in here arrives as the pointer though here","width":281.18181824684143},{"text":"lets make our program","width":98.18181824684143},{"text":"return something","width":63.18181824684143},{"text":"so ","width":35.18181824684143},{"text":"I'll return another void pointer","width":139.18181824684143},{"text":"lets call it one two three four","width":193.18181824684143},{"text":"how do I get that from another thread?","width":290.18181824684143},{"text":"Well, this time I'm going to","width":85.18181824684143},{"text":"pthread join","width":555.1818182468414},{"text":"so pthread join","width":70.18181824684143},{"text":"is a bit like","width":116.18181824684143},{"text":"wait","width":98.18181824684143},{"text":"it says","width":86.18181824684143},{"text":"don't continue","width":65.18181824684143},{"text":"until this thread has finished","width":193.18181824684143},{"text":"and uhh","width":96.18181824684143},{"text":"lets just grab it","width":72.18181824684143},{"text":"okay","width":351.18181824684143},{"text":"here is the thread I care about","width":62.18181824684143},{"text":"so lets just pass in the id number","width":118.18181824684143},{"text":"that we have before","width":96.18181824684143},{"text":"and uhmm","width":80.18181824684143},{"text":"I better have","width":331.18181824684143},{"text":"somewhere to store it","width":72.18181824684143},{"text":"right","width":11.18181824684143},{"text":"so now I just need a void pointer","width":366.18181824684143},{"text":"and I need the address of that void pointer","width":253.18181824684143},{"text":"and so lets finally print out the value of that","width":751.1818182468414},{"text":"okay, so","width":24.18181824684143},{"text":"what did we see of it here","width":255.18181824684143},{"text":"we still have two threads","width":143.18181824684143},{"text":"then the new thread","width":42.18181824684143},{"text":"the second thread","width":44.18181824684143},{"text":"slept for 2 seconds","width":176.18181824684143},{"text":"meanwhile, the main thread","width":111.18181824684143},{"text":"the first thread say","width":86.18181824684143},{"text":"okay","width":22.18181824684143},{"text":"I'm just going to join","width":87.18181824684143},{"text":"so it gets paused","width":138.18181824684143},{"text":"because its waiting for that second thread to finish","width":146.18181824684143},{"text":"and then the second thread finally prints out something","width":267.18181824684143},{"text":"prints out what it is given and then returns a vlue","width":247.18181824684143},{"text":"which we can then get back fromthe first thread using pthread join","width":392.18181824684143},{"text":"theres another way to exit threads","width":177.18181824684143},{"text":"and that way is called pthread_exit","width":319.18181824684143},{"text":"right","width":11.18181824684143},{"text":"so lets exit with something","width":97.18181824684143},{"text":"uhhh","width":46.18181824684143},{"text":"lets exit with","width":160.18181824684143},{"text":"ohh I dont know","width":217.18181824684143},{"text":"hello!","width":605.1818182468414},{"text":"oh, wrong way","width":733.1818182468414},{"text":"did I...","width":630.1818182468414},{"text":"ohh, yes","width":140.18181824684143},{"text":"okay and we'll","width":63.18181824684143},{"text":"cast it as a void ** pointer","width":56.18181824684143},{"text":"there we go","width":244.18181824684143},{"text":"if you call pthread_exit","width":128.18181824684143},{"text":"you're never going to execute, that thread is never going to execute more code after that point. you're telling the system","width":326.18181824684143},{"text":"Im done with this","width":77.18181824684143},{"text":"but my cpu for this thread","width":96.18181824684143},{"text":"does not need to execute","width":86.18181824684143},{"text":"any more","width":178.18181824684143},{"text":"so this time","width":80.18181824684143},{"text":"my thread called pthread_join","width":153.18181824684143},{"text":"prints out","width":25.18181824684143},{"text":"hello world and hello","width":136.18181824684143},{"text":"instead of the other return value","width":211.18181824684143},{"text":"soo","width":199.18181824684143},{"text":"pthread_join","width":104.18181824684143},{"text":"the exit here basically says","width":152.18181824684143},{"text":"I'm done","width":81.18181824684143},{"text":"and with that","width":77.18181824684143},{"text":"we've finished","width":113.18181824684143},{"text":"have a wonderful section tomorrow","width":138.18181824684143},{"text":"if you have any questions about it come down and ask me now","width":291.18181824684143},{"text":"there were three students","width":60.18181824684143},{"text":"that failed to put their exam key","width":118.18181824684143},{"text":"and by the way your quiz scores are in your subversion","width":267.18181824684143},{"text":"if you are one of those students that didn't buble in your exam key","width":204.18181824684143},{"text":"come down and we'll sort that out now","width":194.18181824684143}],

  // Start Lecture Video 7
  // Part 0
  [{"text":"Ok, it's 11 o'clock. Good morning class how are you?","width":777.1818182468414},{"text":"Alright how's your shpar looking?","width":209.18181824684143},{"text":"I imagine some of you are celebrating that shpar is finished.","width":229.18181824684143},{"text":"Except of course you know it's not,","width":114.18181824684143},{"text":"because what we expect you to do now is actually not just make code that appears to work, but code that you are proud of.","width":472.18181824684143},{"text":"Code that is probably commented, code that has nice variables, code that you give someone else and they could maintain it.","width":397.18181824684143},{"text":"Some of the worst things about writing sloppy code is someone has to come back to you and say,","width":191.18181824684143},{"text":"\"What was this going on here?\" \"I have no idea I wrote that yesterday.\"","width":331.18181824684143},{"text":"Now's your chance to put your coding skills to test, not just to make something that works, but to make something that works well.","width":435.18181824684143},{"text":"And we'll do a finally code review next week on Thursday.","width":288.18181824684143},{"text":"We'll have some other things for you to do before that, but we'll announce that via email. ","width":483.18181824684143},{"text":"Here's what we're going to talk about today. We're going to talk about using threads.","width":238.18181824684143},{"text":"Threads are cool because we can now make our single process do multiple things.","width":368.18181824684143},{"text":"And threads are cool because they allow multiple threads to share the same memory and the rest of the state of your process.","width":592.1818182468414},{"text":"So if you've opened a file descriptor in one thread, you can use it inside another thread.","width":351.18181824684143},{"text":"The exciting thing happens, though, when you have to wait for one thread to complete something.","width":323.18181824684143},{"text":"And for that, we need to worry about synchronization.","width":289.18181824684143},{"text":"And that's what sets your programming apart from things you've seen inside CS 225 and 125, earlier courses and other people that might have just picked up some programming.","width":637.1818182468414},{"text":"The ability to work with multiple threads correctly so that it always works when not just ten users are on your website, but a thousand users are on your website","width":499.18181824684143},{"text":"or you've got multiple CPUs inside your tablet, or your phone, or your watch, then that's where synchronization comes in.","width":519.1818182468414},{"text":"But anyway, let's get started. Little question, little memory question for you.","width":346.18181824684143},{"text":"My thread calls pthread twice, pthread_create twice, how many stacks does my process have?","width":797.1818182468414},{"text":"Ok, let's pick someone at random. Hi! What's your answer?","width":585.1818182468414},{"text":"If you said one, guess again.","width":301.18181824684143},{"text":"Any advances on one?","width":293.18181824684143},{"text":"If you said two, thanks for playing, but almost correct, off by one.","width":240.18181824684143},{"text":"It's three! Why?","width":531.1818182468414},{"text":"Thank you, yes! We get a thread for free at the beginning.","width":236.18181824684143},{"text":"One thread must be calling main, our CPU must be executing code at main","width":308.18181824684143},{"text":"All we did by calling pthread_create twice is we got ourselves two additional threads.","width":412.18181824684143},{"text":"And remember, each thread needs a stack. Why?","width":243.18181824684143},{"text":"Well we're calling functions. We have to put those automatic variables somewhere.","width":236.18181824684143},{"text":"And, when we return from a function, we have to remember where we're going to go back to. So again, that goes on the stack.","width":385.18181824684143},{"text":"So for each thread there is a stack and we have three threads in our process.","width":549.1818182468414},{"text":"So if my code called created twice, that means I could be doing three things at the same time.","width":416.18181824684143},{"text":"Ok, so I've been talking about processes for quite a bit, and talking about threads. What are some of the differences between them?","width":645.1818182468414},{"text":"Which is bigger?","width":132.18181824684143},{"text":"A process, yes. How much bigger?","width":393.18181824684143},{"text":"It's HUGE! Our process is a massive object!","width":204.18181824684143},{"text":"It's got file descriptors. It's got a big virtual memory space.","width":427.18181824684143},{"text":"Threads are tiny. they live inside a process.","width":303.18181824684143},{"text":"If you killed a process, that's it for all of your threads. They don't have anywhere to run anymore.","width":425.18181824684143},{"text":"So your process represents the sandbox. Everything that your threads can do will live inside a process.","width":554.1818182468414},{"text":"So our process has security.","width":341.18181824684143},{"text":"It's got virtual memory.","width":182.18181824684143},{"text":"It's got an exit status.","width":208.18181824684143},{"text":"Threads live inside a process, and they just represent what you want the CPU to do.","width":591.1818182468414},{"text":"They represent the code, the position in the code that is currently being executed.","width":538.1818182468414},{"text":"So that means if you kill a process, ha ha that's it. All of your threads are done.","width":219.18181824684143},{"text":"So if you send, say, an alarm signal to your process, all of your threads will disappear.","width":635.1818182468414},{"text":"If the process disappears, all of them have gone. This is an important point. They just live inside.","width":604.1818182468414},{"text":"So if we've created all these threads, perhaps we want to stop them.","width":331.18181824684143},{"text":"Guess what, you can do that and here's what you'd call. You'd call pthread_cancel.","width":390.18181824684143},{"text":"Let's have a look at pthread_cancel.","width":172.18181824684143},{"text":"How could I cancel a thread?","width":294.18181824684143},{"text":"Easy, just send in that id that we got from pthread_create and you can cancel a thread.","width":394.18181824684143},{"text":"I don't want to spend too much time on this because, in practice, no one bothers to use this.","width":528.1818182468414},{"text":"Here's why. Imagine you are making a fantastic meal for Friday night your potential boyfriend, girlfriend, dog is coming over,","width":794.1818182468414},{"text":"and your cooking like a storm here. And then suddenly, BAM! your activity is cancelled.","width":364.18181824684143},{"text":"The kitchen is in complete disarray. It hasn't been cleaned up. What a mess!","width":379.18181824684143},{"text":"It's extremely rare that we can just cancel something and not have to clean things up.","width":298.18181824684143},{"text":"So what examples might we have.","width":119.18181824684143},{"text":"Well let's say you have a thread that's kind of calculating new digits of pi, or discovering prime numbers,","width":541.1818182468414},{"text":"or trying to mine bitcoins like you've come up with a new currency called CS241coins or something.","width":441.18181824684143},{"text":"You can probably cancel that. It was just a CPU intensive job.","width":262.18181824684143},{"text":"But if there's any kind of resources, then maybe we shouldn't just call this cancel and leave everything in disarray.","width":419.18181824684143},{"text":"So in practice what we tend to do is actually make a variable to tell our threads, \"Oh by the way, you should stop at some point.\"","width":585.1818182468414},{"text":"And if you call this pthread_cancel, things don't even stop immediately.","width":244.18181824684143},{"text":"Typically they will stop when that particular thread makes a system call, like open or read.","width":418.18181824684143},{"text":"We can discover all of the calls just by looking at the man pages.","width":243.18181824684143},{"text":"So this will be like the moment that your chef opens the oven door we say, ","width":314.18181824684143},{"text":"\"ok, you're out of here, we've quit you, we've cancelled you, no more work for you.\"","width":372.18181824684143},{"text":"So what a mess. We don't tend to do that.","width":173.18181824684143},{"text":"So let's write something that can be cancelled.","width":285.18181824684143},{"text":"We want to call pthread_create. What do we pass in? A pointer to our little identifier.","width":357.18181824684143},{"text":"We don't need any parameters. What's next? Oh yes, the function.","width":302.18181824684143},{"text":"I called it my funct, and an initial value. Let's just pass in NULL to begin with.","width":436.18181824684143},{"text":"And this will go on forever.","width":325.18181824684143}],
  // Part 1
  [{"text":"Alright, so, this little function can say initially we are going to just sleep for one second","width":566.1818182468414},{"text":"and then put something like \"HI!\".","width":263.18181824684143},{"text":"Ok, right, so its gonna print \"HI!\"","width":192.18181824684143},{"text":"So, now, I've got a program that is going to use two CPU's, if I have two CPU's.","width":535.1818182468414},{"text":"Uh oh, what happens if I only have one CPU?","width":365.18181824684143},{"text":"The scheduler!  The Linux Kernel is going to say \"okay, you get access to the CPU for say 10 milliseconds or 100 milliseconds","width":651.1818182468414},{"text":"and after that amount of time, I'm going to take you off the CPU and let the other thread use it.","width":378.18181824684143},{"text":"And if we do this faster enough, like 10 milliseconds or so","width":226.18181824684143},{"text":"then those slow humans will never notice, that actually only one thread at a time is on each CPU core","width":583.1818182468414},{"text":"And if it turns out that you make a system call like \"open\" or \"read\" and it takes time for us to read that stuff from the disk","width":455.18181824684143},{"text":"Then you don't need the CPU because you are waiting for stuff so I can give the CPU to someone else.","width":265.18181824684143},{"text":"So the scheduler has to make those decisions and make them well.","width":183.18181824684143},{"text":"Ok, so for example this sleep, you don't need any CPU to sleep.  I can let another thread use that.","width":454.18181824684143},{"text":"So, what were we going to do here...","width":162.18181824684143},{"text":"Oh yes, let's change this so we can cancel our little \"HI\" function.","width":273.18181824684143},{"text":"We'll sleep for 3 seconds here and then change to something like \"please_stop\".","width":495.18181824684143},{"text":"And then I will just loop forever.","width":228.18181824684143},{"text":"So, what do were want to do here?  We want to say \"while (!please_stop)\" keep going around.","width":404.18181824684143},{"text":"And finally, let's have a global variable...there we go.","width":281.18181824684143},{"text":"We know in C that our global variables are initialized to zero.","width":239.18181824684143},{"text":"Let's run this and see what mistakes we made.","width":128.18181824684143},{"text":"(waiting)","width":642.1818182468414},{"text":"Ok, alright.  Whoops, we didn't declare the thread id.  So, what's that?  \"pthread_id\" I believe.","width":512.1818182468414},{"text":"(waiting)","width":869.1818182468414},{"text":"(grumbling)","width":113.18181824684143},{"text":"","width":218.18181824684143},{"text":"Oh, I just put a \"t\"","width":181.18181824684143},{"text":"","width":227.18181824684143},{"text":"How about that?","width":71.18181824684143},{"text":"","width":284.18181824684143},{"text":"Yay!.  Ok, alright.","width":127.18181824684143},{"text":"","width":54.18181824684143},{"text":"So we print \"HI!\".  Our main thread sleeps for a bit and then calls \"please_stop\"","width":409.18181824684143},{"text":"And our little thread that is going around the loop says \"oh, look at that global variable, I better stop\".","width":224.18181824684143},{"text":"Now I use global variables for a quick demonstration. Obviously we could put that inside a struct.","width":257.18181824684143},{"text":"We could pass something to the working thread inside here and we could use that to communicate with the other struct","width":653.1818182468414},{"text":"so we could have some control if we agree to share some memory.","width":256.18181824684143},{"text":"","width":90.18181824684143},{"text":"Now I can hear my CPU fan going.","width":173.18181824684143},{"text":"(fan noises)","width":117.18181824684143},{"text":"Do you hear that?  Good.","width":213.18181824684143},{"text":"Because the CPU is constantly doing that little while loop in the main thread.","width":230.18181824684143},{"text":"So let's do something better than that.","width":232.18181824684143},{"text":"","width":3.1818182468414298},{"text":"What we would like to do of course is wait for the other thread to finish.","width":252.18181824684143},{"text":"One way to do that is to say \"pthread_join\" and say \"here is the thread that we want to finished\"","width":370.18181824684143},{"text":"And we would like to know it's exit value.","width":197.18181824684143},{"text":"There we go.  We can find out what it is.","width":153.18181824684143},{"text":"Alright, here is my exit value and we can say return something here","width":588.1818182468414},{"text":"So what when we call \"pthread_join\" again, this second thread is going to not require anymore CPU time.","width":441.18181824684143},{"text":"Because not it is waiting for the other thread to exit.","width":256.18181824684143},{"text":"","width":398.18181824684143},{"text":"So that is one way to write this program.","width":127.18181824684143},{"text":"","width":153.18181824684143},{"text":"I can also talk about \"pthread_exit\"","width":642.1818182468414},{"text":"Let's write a very dangerous program.","width":196.18181824684143},{"text":"This is the \"_killer_monsters_take_over_the_world\".","width":782.1818182468414},{"text":"You will agree that we probably should not run that function, yes?","width":373.18181824684143},{"text":"Well that's okay, because I am going to call pthread_exit before it.","width":497.18181824684143},{"text":"And I do not need a return value.","width":237.18181824684143},{"text":"\"pthread_exit()\" says \"hey, I am the chef and I am done.  I'm leaving the kitchen for good\".","width":615.1818182468414},{"text":"If you call pthread_exit then, you are saying \"this is the thread's return value\" and no more code will be run by that thread.","width":597.1818182468414},{"text":"\"_killer_monsters_take_over_the_world\" will never happen.","width":193.18181824684143},{"text":"","width":269.18181824684143},{"text":"This stuff about having \"exitvalue\" and \"pthread_join\" in this case, that is never going to happen.","width":437.18181824684143},{"text":"\"pthread_exit()\" simply means \"I am done\".","width":323.18181824684143},{"text":"","width":20.18181824684143},{"text":"A little bit of knowledge for you, if you call \"pthread_exit()\" inside the main thread, the original thread, like we did just did","width":561.1818182468414},{"text":"the rest of the process will actually keep on running.","width":193.18181824684143},{"text":"The pthread library actually says \"you know what?  I am actually not going to quit this process immediately","width":227.18181824684143},{"text":"I am going to wait until ALL threads have finished\".","width":255.18181824684143},{"text":"","width":326.18181824684143},{"text":"Let's prove that.  Let's call \"pthread_exit()\" here.","width":320.18181824684143},{"text":"","width":89.18181824684143},{"text":"I'm going to comment this out so it compiles.","width":193.18181824684143},{"text":"","width":163.18181824684143},{"text":"Instead I will call ... nah, this is good.","width":514.1818182468414},{"text":"So then, what will my program do now?","width":320.18181824684143},{"text":"","width":200.18181824684143},{"text":"That's right, it is just going to keep printing \"HI!\".","width":146.18181824684143},{"text":"It is not going to take over the world.","width":283.18181824684143},{"text":"Instead what we did is we created another thread and our main thread exited.","width":448.18181824684143},{"text":"","width":254.18181824684143},{"text":"So, let's go back to this.","width":128.18181824684143},{"text":"","width":157.18181824684143},{"text":"Let's answer some of these questions.","width":143.18181824684143},{"text":"What is the difference between exit and pthread_exit?","width":191.18181824684143},{"text":"What does exit do?","width":260.18181824684143},{"text":"It kills the whole process.","width":75.18181824684143},{"text":"Yes, it says \"Hey, this process is done and here's the exit value.","width":380.18181824684143},{"text":"By the way, it also does a little few extra things for you.","width":195.18181824684143},{"text":"If you've written to the C output buffers, like stdout and stderr or anything else","width":303.18181824684143},{"text":"those get flushed and those file streams get closed for you.","width":192.18181824684143},{"text":"","width":420.18181824684143},{"text":"So if you call exit, all of your threads are gone.","width":353.18181824684143},{"text":"\"We're done\"","width":232.18181824684143},{"text":"Your process is done.  And it doesn't matter which pthread calls exit().","width":382.18181824684143},{"text":"You are saying \"This whole process is done. Wrap up the shop, close all of the kitchens.  We're gone.\"","width":390.18181824684143}],
  // Part 2
  [{"text":"pthread_exit that just means no more for this thread","width":697.1818182468414},{"text":"that particular chef has walked out of the kitchen","width":259.18181824684143},{"text":"and will never come back","width":157.18181824684143},{"text":"so before you call pthread_exit","width":141.18181824684143},{"text":"make sure your thread has cleaned up any resources that it might have acquired","width":369.18181824684143},{"text":"questions?","width":169.18181824684143},{"text":"yes?","width":268.18181824684143},{"text":"ok so umm when a thread finishes","width":352.18181824684143},{"text":"it can finish in two different ways, it can..","width":275.18181824684143},{"text":"call pthread_exit","width":243.18181824684143},{"text":"or can return","width":73.18181824684143},{"text":"in fact, they are actually equivalent","width":490.18181824684143},{"text":"so this is a way to send some information back to the rest of the process","width":373.18181824684143},{"text":"and we had an example down here calling pthread_join","width":207.18181824684143},{"text":"and saying \"what did that thread say at the end?\"","width":173.18181824684143},{"text":"and you don't have to use this mechanism","width":202.18181824684143},{"text":"is actually common to make a struct and pass that to pthread_create","width":572.1818182468414},{"text":"That's the purpose of pthread_exit and this return here is that you can get the exit value","width":675.1818182468414},{"text":"let's say that you wanted more than just a void pointer","width":260.18181824684143},{"text":"what we can do here is","width":255.18181824684143},{"text":"define some sort of struct","width":190.18181824684143},{"text":"umm i won't bother the struct definition","width":180.18181824684143},{"text":"i'll say hey, let's have some memory and i'll call it \"my to do struct\"","width":589.1818182468414},{"text":"ok so","width":205.18181824684143},{"text":"calloc( sizeof(todo)) and i just need one of them","width":339.18181824684143},{"text":"and then i would set..oops","width":396.18181824684143},{"text":"set things up on this","width":91.18181824684143},{"text":"hey like..umm..","width":120.18181824684143},{"text":"you know.. start.. blah blah blah","width":200.18181824684143},{"text":"please stop..umm zero","width":168.18181824684143},{"text":"exit value in here, etc.","width":93.18181824684143},{"text":"so i could use this struct","width":97.18181824684143},{"text":"because both my main program and my thread that knows about this struct","width":236.18181824684143},{"text":"cause i can..","width":143.18181824684143},{"text":"pass in it","width":160.18181824684143},{"text":"so that allows me to assemble a whole body of information that i want to pass to the other thread","width":560.1818182468414},{"text":"ok let's get back to our little questions here","width":177.18181824684143},{"text":"why would you call pthread_exit in your main method","width":232.18181824684143},{"text":"well, this is typically done in kind of simple or small programs","width":213.18181824684143},{"text":"where we say most of the work is actually going to happen by all of my other threads","width":255.18181824684143},{"text":"and my program can finish after all of those other threads have finished","width":485.18181824684143},{"text":"so we would do this if there was no clean up in the main thread","width":652.1818182468414},{"text":"and we'll be happy just to wait","width":330.18181824684143},{"text":"until","width":132.18181824684143},{"text":"all thread are done","width":313.18181824684143},{"text":"so this is equivalent of saying hey last person out of the kitchens turn out the lights","width":315.18181824684143},{"text":"and the process will finish","width":253.18181824684143},{"text":"so I gave you two ways that a thread can be terminated just now, I said it could return from its function","width":494.18181824684143},{"text":"so.. we could .. return a value and i gave you that 0x12345 thing","width":375.18181824684143},{"text":"so..","width":158.18181824684143},{"text":"if you return from the function that was originally started by the thread","width":223.18181824684143},{"text":"i also showed you that you could call pthread_exit","width":336.18181824684143},{"text":"but apparently there's four ways","width":218.18181824684143},{"text":"What other two ways might a thread exit?","width":219.18181824684143},{"text":"and i have mentioned them already in this lecture","width":671.1818182468414},{"text":"yes!","width":142.18181824684143},{"text":"yes! if someone calls pthread_cancel() on that chef","width":218.18181824684143},{"text":"they're done, okay yes","width":103.18181824684143},{"text":"so if a thread is in a cancelled state, it may exit","width":358.18181824684143},{"text":"and how else might a pthread ... yes?!","width":242.18181824684143},{"text":"yeah, the whole process dies","width":117.18181824684143},{"text":"so if another thread for example, segfaults","width":173.18181824684143},{"text":"that's it for all of your processes","width":143.18181824684143},{"text":"segfaults if like blurring up the entire chemistry lab or the entire kitchen","width":343.18181824684143},{"text":"the whole thing is gone","width":68.18181824684143},{"text":"the whole process is gone","width":110.18181824684143},{"text":"we need a valid process in order for our threads to finish","width":263.18181824684143},{"text":"let's talk about pthread_join","width":131.18181824684143},{"text":"it actually has two purposes.. we can wait ","width":363.18181824684143},{"text":"for a thread to finish","width":412.18181824684143},{"text":"and get its exit value","width":473.18181824684143},{"text":"the other thing it does is..free up resources","width":733.1818182468414},{"text":"okay what resources might that be?","width":219.18181824684143},{"text":"well","width":42.18181824684143},{"text":"every thread has some space in its process memory for its stack","width":418.18181824684143},{"text":"and every thread has an exit status, an exit value","width":367.18181824684143},{"text":"the library is going to keep them around","width":200.18181824684143},{"text":"because who knows, someone will call pthread_join on the thread","width":246.18181824684143},{"text":"so we can only release those resources after pthread_join has been called","width":426.18181824684143},{"text":"if you're writing a short simple program and you don't about these things then fine","width":239.18181824684143},{"text":"but when you want to write longer running programs that don't have resource leaks","width":227.18181824684143},{"text":"you should call pthread_join on every process, i mean, every thread yes","width":851.1818182468414},{"text":"so pthread_cancel, you're giving a chef another thread the marching order to say hey leave","width":492.18181824684143},{"text":"okay. I'm canceling you, i don't want any more of your work","width":152.18181824684143},{"text":"I'm canceling..you know that stuff i told you to do? don't do it anymore, okay?","width":388.18181824684143},{"text":"so..","width":77.18181824684143},{"text":"pthread_exit says","width":137.18181824684143},{"text":"i'm done","width":83.18181824684143},{"text":"and by the way, here's my result","width":68.18181824684143},{"text":"and i ..","width":44.18181824684143},{"text":"so it's an act by the thread that says i don't want to do anymore work","width":415.18181824684143},{"text":"yes?","width":493.18181824684143},{"text":"yes!","width":236.18181824684143},{"text":"oh okay, right","width":259.18181824684143},{"text":"the point i was making here is..","width":245.18181824684143},{"text":"that you know that when you return from main, the process is done","width":233.18181824684143},{"text":"you know that when you call exit, the process is done","width":388.18181824684143},{"text":"okay","width":57.18181824684143},{"text":"pthread_exit has a supple part of the specification","width":319.18181824684143},{"text":"that says the main threads is finished, but the process continues until all threads are finished","width":1571.1818182468414},{"text":"corrrrrrect! yes","width":113.18181824684143},{"text":"so, if i called pthread_exit() after printing  - eh","width":445.18181824684143},{"text":"hi","width":62.18181824684143},{"text":"right? now the process is done","width":204.18181824684143},{"text":"so it's the last chef out that turns out the lights to the whole process","width":315.18181824684143}],
  // Part 3
  [{"text":"So, i have thrown pthread_exit at you, pthread_join, pthread_cancel, etc","width":575.1818182468414},{"text":"This is an exposure to the words in the vernacular, this stuff is not going to sink until you play with it","width":342.18181824684143},{"text":"So, i encode to play a lot with these things and to write little programs and see what happens","width":732.1818182468414},{"text":"Okay, if we don't call pthread_join on a thread, we get a resource leak","width":488.18181824684143},{"text":"And eventually","width":162.18181824684143},{"text":"We wouldn't be able to make anymore threads","width":311.18181824684143},{"text":"We can't reuse the same memory address from the original stack","width":210.18181824684143},{"text":"We are still hanging on to the exit value so we are using up more memory","width":831.1818182468414},{"text":"Okay so the next thing","width":403.18181824684143},{"text":"Take a look at this kind of typical kind of code here","width":445.18181824684143},{"text":"And the...this..something wrong with it","width":289.18181824684143},{"text":"What question is: What?","width":98.18181824684143},{"text":"And how could we fix it? How could we make it valid?","width":228.18181824684143},{"text":"Now your first instinct might be .. HOLD ON IT TAKES A VOID STAR POINTER","width":220.18181824684143},{"text":"That's okay","width":82.18181824684143},{"text":"All i'm doing is passing in a pointer","width":224.18181824684143},{"text":"To start","width":116.18181824684143},{"text":"So that..","width":126.18181824684143},{"text":"My new thread can read a value","width":165.18181824684143},{"text":"Presumably, this 42","width":293.18181824684143},{"text":"So, what do you think might be wrong with that?","width":195.18181824684143},{"text":"Just take a moment to talk it over with your neighbors or neighbor and see how we might fix it","width":507.18181824684143},{"text":"I'll walk around in case you got any questions - [silence]","width":6393.181818246841},{"text":"What did your neighbor say?","width":105.18181824684143},{"text":"What did YOUR neighbor say?","width":100.18181824684143},{"text":"*whisper from student*  - It was out of scope","width":95.18181824684143},{"text":"Ok we got a scope problem","width":177.18181824684143},{"text":"Yeah, so, first of all there is no security","width":290.18181824684143},{"text":"It's okay for one thread to access another thread's stack, it's not like we're going to get a segmentation fault","width":545.1818182468414},{"text":"The hardware doesn't know or doesn't care two threads are stomping over each other's stacks","width":558.1818182468414},{"text":"But we do have a scoping problem","width":183.18181824684143},{"text":"And it's this: we're passing in the address of start","width":327.18181824684143},{"text":"And start, as we know, lives on the stack","width":187.18181824684143},{"text":"How long is that address going to be valid for?","width":280.18181824684143},{"text":"Answer: Not very long, we're about to return from this function","width":353.18181824684143},{"text":"So, when will my funct start?","width":344.18181824684143},{"text":"Answer: I don't know, it's up to the kernel to eventually decide get around this other thread","width":523.1818182468414},{"text":"Maybe we'll put this first thread on pause beforehand and give pro to the new thread","width":283.18181824684143},{"text":"Or maybe this new thread will start much later on .. 100 milliseconds time","width":443.18181824684143},{"text":"By which point, what will be at this particular address?","width":249.18181824684143},{"text":"Could be anything right?","width":81.18181824684143},{"text":"It could be our original value, it could be being reused by a completely different function at this point","width":409.18181824684143},{"text":"So our problem is with time","width":115.18181824684143},{"text":"Our problem is that we gave the address something and that variable is no longer in scope","width":457.18181824684143},{"text":"Alright, how can we fix this?","width":130.18181824684143},{"text":"Well","width":66.18181824684143},{"text":"One trick is to say: I'm going to put this magic word static in here","width":375.18181824684143},{"text":"And if I do that, it's no longer an automatic variable","width":153.18181824684143},{"text":"It lives just once as a global variable inside my whole process","width":498.18181824684143},{"text":"But that is pretty heavy handed","width":406.18181824684143},{"text":"Alright, now I only use this start variable and I better keep its value until i'm sure another thread is run","width":809.1818182468414},{"text":"How else can we fix it? We could use malloc()","width":357.18181824684143},{"text":"And allocate some memory in the heap","width":307.18181824684143},{"text":"We would have run into the same problem if we immediately called free","width":387.18181824684143},{"text":"In this thread","width":135.18181824684143},{"text":"Because we would have created some heap memory","width":216.18181824684143},{"text":"Passed a pointer to it and immediately freed it. OH NO WHOOPS","width":223.18181824684143},{"text":"I didn't give my new thread any time to actually read that memory","width":357.18181824684143},{"text":"So if you do use malloc() ","width":213.18181824684143},{"text":"Don't immediately free it, instead..","width":228.18181824684143},{"text":"Let this function","width":169.18181824684143},{"text":"Free it after it runs","width":239.18181824684143},{"text":"One thread can create heap memory and another thread can actually free it","width":213.18181824684143},{"text":"That's perfectly fine, they all live inside the same process","width":293.18181824684143},{"text":"And there's one heap","width":357.18181824684143},{"text":"I think another way this might be valid is before we turning","width":335.18181824684143},{"text":"We could call pthread_join","width":299.18181824684143},{"text":"On the thread","width":194.18181824684143},{"text":"If we did that, we know that the new thread that is going to run my funct will actually finish before this function returns","width":684.1818182468414},{"text":"So we've solved our timing problem","width":128.18181824684143},{"text":"We've made sure that we don't finish that this variable doesn't go out of scope","width":326.18181824684143},{"text":"Until the other thread has finished","width":216.18181824684143},{"text":"We have just encapsulated from a time point of view","width":221.18181824684143},{"text":"The running time of this other function and made sure that the running is within the scope of this start thread's function","width":516.1818182468414}],
  // Part 4
  [{"text":"Yes","width":398.18181824684143},{"text":"Yeah","width":155.18181824684143},{"text":"Ok right. So what happens if you put static inside a function?","width":271.18181824684143},{"text":"Yes, so the variable itself lives forever, but static makes it a secret variable.","width":413.18181824684143},{"text":"yes the scope of it, the name start, is only available inside that function","width":403.18181824684143},{"text":"but the actual storage of that variable is for the lifetime of the process","width":300.18181824684143},{"text":"thats like one of those awful interview questions","width":200.18181824684143},{"text":"hey whats on page 37 of the C standard?","width":156.18181824684143},{"text":"i dont know. I didn't write it","width":323.18181824684143},{"text":"Knowing precisely how static works is an exercise left for the advanced C programmer","width":424.18181824684143},{"text":"But by defining static, the life time of the memory is for the duration of the process. other questions? yes?","width":1094.1818182468414},{"text":"To cast an int to a void pointer, no that's the other way of solving, if you're sure that a void pointer has enough bits to represent the parameter you're trying to pass in","width":883.1818182468414},{"text":"You can also just say, look void","width":255.18181824684143},{"text":"Let me choose a different value like 71","width":272.18181824684143},{"text":"That means, I gotta type as a pointer to some memory","width":212.18181824684143},{"text":"I'm not going to say what kind of pointer yet","width":140.18181824684143},{"text":"Im going to pass in this value 71","width":223.18181824684143},{"text":"you can do that providing you write the code to the other end to simply cast it","width":330.18181824684143},{"text":"if you attempt to read at memory 71","width":261.18181824684143},{"text":"oops, you'll get a segfault","width":516.1818182468414},{"text":"I will not talk about that right now, but yes, that's another way of solving this problem","width":630.1818182468414},{"text":"How about this one?","width":247.18181824684143},{"text":"So what I want to do here is that I want to send","width":261.18181824684143},{"text":"my value of i from 0 to 9 to some new threads","width":595.1818182468414},{"text":"So each one can get a value","width":266.18181824684143},{"text":"Why does this code not work?","width":280.18181824684143},{"text":"So take a moment with your neighbor to review it and I'll start writing it up as a demonstration - [silence]","width":6108.181818246841},{"text":"Ok so here's a version of that code","width":432.18181824684143},{"text":"The first thing we might comment is what might this code print out?","width":213.18181824684143},{"text":"It might jsut print out hello world and nothing else","width":152.18181824684143},{"text":"it could be that we return from our main before those other threads ahave  a chance to start up","width":399.18181824684143},{"text":"Before those chefs can be employed and waltz into our kitchens, the process itself is exited because we've returned from main","width":579.1818182468414},{"text":"alright, how should we stop that?","width":124.18181824684143},{"text":"Well we could just call pthread_join on every one of those ids","width":232.18181824684143},{"text":"But you and I know we can call pthread_exit() here and leave it up to the system to finish a process when all the other threads have exited. ok right, so let's run this","width":1308.1818182468414},{"text":"And this is the output we get","width":223.18181824684143},{"text":"Im printing out the value that's actually sent to each new thread and also the actual pointer we've got as well","width":705.1818182468414},{"text":"the first comment is look at all these numbers! They're all the same","width":245.18181824684143},{"text":"And it seems to work.","width":125.18181824684143},{"text":"If we only tested this with 6 threads, we think our code is fantastic! look at the all the threads I'm starting","width":368.18181824684143},{"text":"But instead I get 0,1,2,3,4,5 and four 10's. Why? yes?","width":1343.1818182468414},{"text":" So the for loop finished","width":286.18181824684143},{"text":"So, for the early threads, what happened?","width":169.18181824684143},{"text":"well we ran our loop, we start a thread. well we ran our loop, we start a thread. well we ran our loop, we start a thread","width":360.18181824684143},{"text":"For the remaining threads, it so happened we went around the loop and those threads did not start. ","width":303.18181824684143},{"text":"They weren't scheduled on the CPU","width":177.18181824684143},{"text":"They're going to be. It's just they didn't start straight away","width":341.18181824684143},{"text":"Eventually they do start","width":193.18181824684143},{"text":"And theyre all given the same address","width":190.18181824684143},{"text":"the address of i","width":129.18181824684143},{"text":"it just happens to be a stack variable in my main thread","width":211.18181824684143},{"text":"by the time they started, we've already incremented the value","width":250.18181824684143},{"text":"it had already been incremented up to 10","width":439.18181824684143},{"text":"and we saw that they really are looking at the same variable because we've printed out the variable that was given to us","width":464.18181824684143},{"text":"and that address, 7fe blah, blah, blah","width":405.18181824684143},{"text":"is just part of the stack of the main thread","width":523.1818182468414},{"text":"So let's to fix it","width":188.18181824684143},{"text":"We could make a struct for each of our threads using malloc()","width":311.18181824684143},{"text":"Or we can make an array in global","width":159.18181824684143},{"text":"but let's do the trick that you suggested","width":236.18181824684143},{"text":"lets just cast this","width":225.18181824684143},{"text":"to a void pointer","width":170.18181824684143},{"text":"because we're C programmers and we know what we're doing. said every C programmer. and what do we get? whoops","width":1019.1818182468414},{"text":"Absolute garbage, yes","width":120.18181824684143}],
  // Part 5
  [{"text":"Ok, so this time, yeah, look each address","width":417.18181824684143},{"text":"that was given to our program","width":133.18181824684143},{"text":"is valid. But we shouldn't try to dereference it. ","width":246.18181824684143},{"text":"We should actually just try to say, ","width":187.18181824684143},{"text":"look, I know you gave me a pointer to","width":104.18181824684143},{"text":"some memory, but I was kidding.","width":119.18181824684143},{"text":"i'm not actually interested in ","width":88.18181824684143},{"text":"using as a pointer to some memory","width":91.18181824684143},{"text":"I just want to cast it back.","width":75.18181824684143},{"text":"Change that current bit pattern","width":77.18181824684143},{"text":"you got as a pointer to a bit pattern that","width":145.18181824684143},{"text":"now represents an int.","width":81.18181824684143},{"text":"Do not pass go.","width":74.18181824684143},{"text":"Do not attempt to read memory at that location","width":173.18181824684143},{"text":"otherwise bad things will happen","width":91.18181824684143},{"text":"So, here's another way of actually getting the right results.","width":223.18181824684143},{"text":"So there we go. Now we have all of our numbers","width":237.18181824684143},{"text":"And something you might notice thats surprising","width":171.18181824684143},{"text":"is that it doesn't count up","width":187.18181824684143},{"text":"0 8 7 6 5 4 3 2 1 9","width":360.18181824684143},{"text":"Why?","width":547.1818182468414},{"text":"Does someone dare speak that hasn't spoken yet in CS241?","width":517.1818182468414},{"text":"Yes, in the back!","width":329.18181824684143},{"text":"Yes, thank you.","width":35.18181824684143},{"text":"There's no guarantee when that thread is going to stop.","width":182.18181824684143},{"text":"and in fact it might be paused half way","width":110.18181824684143},{"text":"the scheduler might say ","width":80.18181824684143},{"text":"actually, I know I was going to give you the ","width":116.18181824684143},{"text":"kitchen","width":52.18181824684143},{"text":"I was going to give you the CPU, but actually I've decided to give the CPU to another thread, so ","width":351.18181824684143},{"text":"we don't know when they're going to start, we don't know how much time they're going to get","width":233.18181824684143},{"text":"because the scheduler is part of the operating system","width":275.18181824684143},{"text":"is trying to make best use of all possible resources","width":191.18181824684143},{"text":"so we have something running but we don't necessarily know in what order those threads","width":193.18181824684143},{"text":"are going to run. yes?","width":472.18181824684143},{"text":"if I had 10 CPUs it could be that every thread is given a separate CPU","width":383.18181824684143},{"text":"of course it depends on what else is happening on your system, right? it could be that I've SSH'd into your box, it could be that your tablet is also using one of those threads update the screen at the same time. maybe check your email, etc.","width":748.1818182468414},{"text":"so it is possible to try to schedule threads on different CPUs, but in practice it doesn't always happen the way that you actually specify it. yes?","width":1068.1818182468414},{"text":"yes, you can set the priority of different threads. anyway, enough of this, let's have a look at page two ","width":1833.1818182468414},{"text":"there are various C library functions that you've probably played with already like strtok() when we wrote our shell, or \"hey I actually wanna know what the error number is as a string\"","width":893.1818182468414},{"text":"and if you read the man pages of these, you'll say \"oh they're not thread safe\". ok everythings broken. what does it mean that not everythings thread safe? it means here be demons. here's where you can write code that looks fine, pases code reviews, passes simple tests and breaks when you put it into the next hart monitor","width":1559.1818182468414},{"text":"so let's see an example of this","width":283.18181824684143},{"text":"here's some kind of typical code, let's find out if it's thread safe or not","width":562.1818182468414},{"text":"and perhaps you could figure out what might happen if this little two message function was called using multiple threads. so what might happen if two threads happened to call this function at the same time? why's it not safe? why could bad things happened?","width":6748.181818246841},{"text":"yes?","width":123.18181824684143},{"text":"[silence]","width":639.1818182468414}],
  // Part 6
  [{"text":"So if you don't have enough CPUs to run all the threads, the scheduler says \"I've got this stuff to do\", and puts them in a queue. And we'll  be talking about that when we talk about schedulers.","width":879.1818182468414},{"text":"Every thread, every process from the scheduler's point of view is either in a runnable state or running, or finished, or about to start so part of its job is to keep track of that","width":827.1818182468414},{"text":"Okay so we've got a little function. Its job is to turn a number into a string, and we wrote some implementation, we've got some memory, and it's not thread safe. Why? Yes, at the back?","width":1559.1818182468414},{"text":"Yes! So if you make something static there can be only one. This is the highlight of the variables. So we've got a single piece of memory, called result. And all threads if they call this will therefore be writing over the same piece of memory. So if you have two threads that are doing this about the same time then they're going to corrupt each other's result. It's like you and I trying to share a secret piece of paper, and I come back to it and I'm like \"what's this writing on it? I didn't write it before.\" We need to make sure that doesn't happen in our program.","width":2508.1818182468414},{"text":"So we've got a problem here. How can we fix it? I know! Let's just make a temporary variable, an automatic variable, and be done. Yes? It's Friday, the best code is always written on Fridays. It's actually not true. You can actually do data analytics on check-ins and see how many bugs are generated by code on Fridays. Fridays and Monday mornings are the worst. So what mistake have we made now? Okay yes we are returning the pointer to some local memory and after the variable goes out of scope that is not longer valid, that area on the stack is going to be reused for other functions we call","width":3186.1818182468414},{"text":"So we can't just do that","width":119.18181824684143},{"text":"Okay, so how can we fix this? Well one thing we can do is not use any memory inside here at all. Instead we'll change this to take a pointer to some external memory.","width":1187.1818182468414},{"text":"And if you look at the c-library, you'll actually see this has happened over time. There were early versions of functions which just declared things, say, using static. The nice thing about that is it's cheap. We don't have to wait for malloc() to find us memory. ","width":1007.1818182468414},{"text":"But the bad news is that it's not thread safe. So later versions of similar functions allow us to pass in a pointer to some memory that can be used.  ","width":919.1818182468414},{"text":"So I'll come back to twelve in a moment. First of all, there's a quiz on Monday!","width":522.1818182468414},{"text":"What? What? Yes, it will be about fork(), exec(), basic synchro stuff and I/O. ","width":678.1818182468414},{"text":"Here is a hint about some stuff that might be on the quiz, and you can find references to all these things inside the wikibook.","width":1246.1818182468414},{"text":"Is it comprehensive? I'm not quite sure what you mean by that. Will there be things on there which are challenging questions? Absolutely, yeah. They will include gotchas so know the difference between sizeof() a type and sizeof() pointer of a type. It will include code that is good and bad, you are expected to notice when it is bad. ","width":1462.1818182468414},{"text":"I have a habit of writing multiple choice questions which state things like \"hey which one of the following statements is not true?\" So that means you have to recognize false statements which are not true","width":659.1818182468414},{"text":"Right, let's just finish of with these then. The advantage of threads over forking processes: Hey, they share memory, so it is easy for us to communicate between threads. Very very easy","width":1135.1818182468414},{"text":"They're also very cheap. And you too can create a new thread, just call pthread_create()! It's trivial, it's easy! So can I fork a process with multiple threads? ","width":1060.1818182468414},{"text":"Yes, but don't. ","width":668.1818182468414},{"text":"Unless you know what you're doing. Unless you're really sure you know what you're doing. Unless you're crazy and you're really sure you know what you're doing","width":376.18181824684143},{"text":"And you want to maintain this code for the rest of your life","width":146.18181824684143},{"text":"So here's why: when you do this, the only thread which survives this cloning is--you know how I said \"Fork, you're gonna clone everything\"? I lied! --the one thread that calls fork() continues. ","width":914.1818182468414},{"text":"In the copy, in the clone. All of the other threads have disappeared. They no longer run","width":460.18181824684143},{"text":"So now all of the other threads in the clone that were doing things have just disappeared. They may have been in the middle of calling malloc(). They may have been in the middle of doing something important. And now the good work that they were doing has disappeared. So that's why in practice it's extremely difficult to write good programs that fork() AFTER they've created more than one running thread.","width":1569.1818182468414},{"text":"So yes, if you want a world of pain.  Otherwise, try not to.","width":375.18181824684143},{"text":"So let's finish with this: condition variables, semaphores, and mutexes. ","width":297.18181824684143},{"text":"This is the meat of the couse","width":381.18181824684143},{"text":"This is the cool stuff. This is the stuff that is going to make your head explode","width":276.18181824684143},{"text":"These are the primitives we are going to learn about so we can communicate with our threads.","width":433.18181824684143},{"text":"So we can make sure that our threads pause while another thread finishes its work","width":285.18181824684143},{"text":"So that we can make sure that threads don't step on each other's memory structures.","width":323.18181824684143},{"text":"So that we can have ten threads write to a single structure and know that the result is valid at the end. ","width":408.18181824684143},{"text":"So that we can have threads that don't fill up buffers then spin and use up CPUs, instead intelligently use the CPU","width":571.1818182468414},{"text":"And we'll be talking about those next week. Have  a wonderful weekend.  Look out for an email from me about the next assignment and the MP. Thank you very much and I'll be here for questions. For those of you that forgot to write down your exam key on the last exam we can find your exam script right now. I know there was like two of you. One percent of the class failed to write down their exam key. So let's fix that","width":1663.1818182468414}],

  // Start Lecture Video 8
  // Part 0
  [{"text":"[background noise]","width":4403},{"text":"good morning you gin lads and welcome to the bountiful C","width":269},{"text":"the wonderful c, the giver of life, the platform that allows us to compile our codes on new hardware","width":481},{"text":"you wanna take a program, you wanna put it on your new hardware, don't worry you just need to make a C compiler","width":373},{"text":"the wonderful C","width":83},{"text":"perhaps you've written it in python, doesn't matter, python itself is written in C","width":300},{"text":"perhaps you've written Minecraft","width":271},{"text":"ahhh,well don't worry about that, that's written in Java, well Java of course is written in, well c++, but nevermind, it's almost C","width":556},{"text":"perhaps you've written a ruby program, well guess what? ruby the interpretter is written in C","width":281},{"text":"yes, so C is underneath it all","width":201},{"text":"and that is partly why C is such a powerful and potent language","width":342},{"text":"it is also a fantastic langauge for working directly with hardware because we can create memory structure that map directly onto bytes and bits","width":688},{"text":"of our hardware","width":84},{"text":"so C gives you tremendous power because it's so close to assembler","width":344},{"text":"but a lot easier to write than assembly code","width":244},{"text":"alright, so","width":108},{"text":"we've been talking about making our c programs run with say two processes or doing two things at the same time","width":347},{"text":"well this is where things start to get interesting","width":171},{"text":"for example, let's count our gold ","width":243},{"text":"I've got a little function here called countgold() and you can see this is going to effect ","width":413},{"text":"so let me run this, i'll make a separate thread to do it","width":342},{"text":"alright, how do I do that? ","width":63},{"text":"well I need to pass in some sort of identifier and then I've got some options I don't care about","width":482},{"text":"what next?","width":52},{"text":"and then the function countgold and finally I want to give countgold a parameter of nothing, so I can just pass in null here","width":593},{"text":"and of course we want to wait for this to finish","width":213},{"text":"this time I'll call pthread_join() because I don't want to just finish at this point, I want myself to print out the value of the sum","width":600},{"text":"great, so, let's wait on this","width":301},{"text":"and I can, I'll have to put my little pthread_t type in here tid1","width":420},{"text":"and I can actually have an exit value as well","width":208},{"text":"so what did it say?","width":186},{"text":"that can just be a, whoops, void pointer and I'd better give it the address of that thing","width":523},{"text":"so let's compile this and see what we get","width":457},{"text":"arlight, argh, sum is zero","width":213},{"text":"now why was that?","width":334},{"text":"that's a good question, why was that? ","width":178},{"text":"we should've waited on this so let's first of all check that I'm using this correctly","width":533},{"text":"so we'll check the value of tid and see what it is","width":484},{"text":"and we should have ","width":503},{"text":"ok we've got a valid value","width":66},{"text":"so why did pthread_join() not ","width":430},{"text":"join terminate","width":327},{"text":"OK, alright, so at this point","width":387},{"text":"OH, yes, hahaha","width":351},{"text":"what did I pass to pthread_join()? the address of tid1","width":420},{"text":"not the value of tid1","width":193},{"text":"so, we needed the address up here because we wanted pthread_create to push the id into that variable","width":536},{"text":"but pthread_join() we just said here's your address and pthread_join() says thank you very much for that address, I'll take that as your thread identifier","width":411},{"text":"no, we wanted the value","width":250},{"text":"ok, so normally because that would take us about four or five days to discover","width":467},{"text":"good, so this time now it's waiting","width":140},{"text":"and finally it prints out the sum is a million","width":224},{"text":"fantastic","width":39},{"text":"now let's not just have one part that's going to count the gold, we want two","width":394},{"text":"so we'll have two threads going ","width":219},{"text":"they're both going to run the same function, but you and I know they both have their own threads","width":241},{"text":"so they both have their own stacks","width":207},{"text":"so each thread has it's own value of i","width":320},{"text":"OK, so, we'll, of course if we didn't do any waiting","width":591},{"text":"ah, thank you","width":290},{"text":"we didn't do any waiting, then our value is just some other value","width":276},{"text":"happens to be 56,000","width":154},{"text":"in other words we had two of these other threads running at the same time","width":195},{"text":"and our main program just decided to carry on and by the time we actually read the values ","width":482},{"text":"those other threads had already incremented it","width":196},{"text":"so we'll change this now to actually wait and any time that we copy paste code be very very careful to make sure you change everything you need to change","width":757},{"text":"I don't need two exit values, I don't care that both of them are going to write from the same thing","width":326},{"text":"so, now my program says OK,wait until the first thread is joined and then our main thread says now wait for the second thread to join","width":480},{"text":"and there we go","width":57},{"text":"my sum is about one and a half milliion","width":359},{"text":"whoops, I did not get two million even though both threads were just adding one to the sum","width":507},{"text":"perhaps you can see why","width":95},{"text":"we'll surely then we can fix this by saying rather than sum plus equal one, I'll just say sum plus plus","width":678}],
  // Part 1
  [{"text":"ok, what would our value be now?","width":503},{"text":"again, about 1.5 million, certainly not two million","width":318},{"text":"our pyrax cannot count","width":262},{"text":"OK, so why did it fail? why did my sum not get two million?","width":504},{"text":"thank you! yes! two threads are touching the same memory location","width":262},{"text":"so even though we wrote sum++, sum++ is not an atomic operation","width":413},{"text":"now life would be easy if our threads were like gorillas","width":262},{"text":"if they walked up to a memory location mine!","width":455},{"text":"they changed it, they added one to it","width":247},{"text":"they asked it any other thread","width":181},{"text":"and they threw it back","width":168},{"text":"ok, but that's not how it works of course, no instead we're copying bit patterns","width":301},{"text":"we're copying bit patterns from main memory into the CPU ","width":207},{"text":"we're running through our model adding machine and then we're putting the value back into memory","width":268},{"text":"during that time another thread may have come along and coppied the original bit pattern from memory and done it's thing inside its CPU","width":619},{"text":"and then put it back","width":112},{"text":"so hopefully you can see that it's possible that the value could be less than two million","width":720},{"text":"if it turns out that are trying to add at the same time","width":405},{"text":"in fact it's possible for  the value to be much smaller than that","width":622},{"text":"but let's talk instead about how we can actually fix this","width":392},{"text":"we've made it deliberately interesting by making sure that each threads are touching the same memory","width":457},{"text":"it would be pretty boring if they were working inside their own stack space","width":337},{"text":"or we'd give them different memory locations to play with, say if we'd give them sum one and sum two then of course everything would be fine","width":358},{"text":"life gets interesting when we actually have two threads competing and working on the same memory","width":387},{"text":"so what we'd like to do is say 'oh I've got a problem and here's a piece of my code that I only want one thread to play with at time'","width":574},{"text":"in other words, I've got a critical section","width":131},{"text":"and inside this little example here this single line is my cirtical section","width":381},{"text":"it's the piece, it's the lines of code, where you say 'I only want one process or one thread to read this memory or modify this memory'","width":639},{"text":"because if I have two threads working then they may see things or leave things in an inconsistent state","width":552},{"text":"now we're programming with a very simple exaple with integers and sums","width":224},{"text":"but now think about your other data structures you wrote in say CS 225","width":266},{"text":"where you've got multiple memory structures, you've got pointers to arrays, integers which reperesnet the number of things in an array","width":481},{"text":"if you didn't write that thing directly than the STL library did it for you","width":294},{"text":"all those things need to be in a consistent state","width":151},{"text":"if you wrote linked lists then you'd better make sure that you're sentinal value is actually present","width":432},{"text":"and there's a few nanoseconds where that's not true","width":210},{"text":"so whilst you'll updating a data structure you don't want anybody else to touch it","width":297},{"text":"you don't want anybody else to read it and you certainly don't want anybody else to try and update it at the same time","width":276},{"text":"so that's where mutex locks come in ","width":487},{"text":"so a mutex is a very valuable thing","width":360},{"text":"it's like having a girlfriend or a boyfriend or a dob","width":280},{"text":"it's yours","width":101},{"text":"and you're not going to let anybody else own it","width":199},{"text":"very objective thing","width":152},{"text":"it's mine, I'm jealous","width":113},{"text":"don't let if you are holding a mutex, you don't want anybody else","width":254},{"text":"any other thread to try to lock that mutex","width":276},{"text":"if they do they have to wait until you've finished with it","width":454},{"text":"now to be procise we are locking and unlocking","width":166},{"text":"I just wanted to give you some ideas so that in your next jealous outburst you can remember this lecture","width":586},{"text":"alright, so, let's have a look to see how we can do this, what we'd like to do is around this critical section we'd like to lock a mutex and afterwords we'd like to unlock it","width":895},{"text":"unlocking doesn't take anytime at all","width":118},{"text":"locking usually doesn't take anytime at all unless somebody else has locked the same mutex","width":384},{"text":"in which case you're out of luck","width":146},{"text":"it's a bit like trying to walk up to a counter, the clerk is currently busy, you'd have to stand there and wait and twiddle your thumbs","width":461},{"text":"in fact you might actually use up a bit of CPU time while still twiddiling thumbs, it's often called a spin lock","width":415},{"text":"which is how this thing is implemented underneath but we don't need to talk about that","width":230},{"text":"but essentially we've got a little piece of code that says ok, i have to wait i have to wait i have to wait i ahve to wait until the mutex lock has been unlocked","width":606},{"text":"but they're designed to be efficient for when you want to lock them and unlock them in the very near future","width":468},{"text":"so let's actually have a look at the code for that, how do we do that?","width":207},{"text":"we'll it's part of the pthread library","width":119},{"text":"and we can say I've got a pthread_mutex, here it is, it's a pthread_mutex_t type","width":525},{"text":"and I'll just call it my mutex one","width":360},{"text":"so now we want to lock it","width":182},{"text":"how can I possibly write that code if pthread_mutex_lock()","width":291},{"text":"what do I need to give it? the address of the mutex","width":280},{"text":"and guess how I unlock it","width":169},{"text":"you write pthread_mutex_unlock()","width":293},{"text":"OK, so now we think we've got working code","width":256},{"text":"let's try it and just for fun I'm going to reduce the number I wrote by an order of magnitute to make it run a bit faster","width":806},{"text":"tick tick tick","width":78},{"text":"suddenly we noticed even though I made the for loop to help with the speed I think it returned","width":504},{"text":"OK, heres, here's to the first surprise, it shouldn't have worked","width":448},{"text":"[laughs]","width":142},{"text":"it appeared to work, but that's just lulling us into a false sense of security","width":392},{"text":"the second surprise is that it took a bit longer","width":221},{"text":"so at least I'm sorry I took the loop down by an order of magnitude yet it still took a long time","width":427},{"text":"so this is a not free the lock and unlock are not free, it takes a certain amount of time","width":298},{"text":"especially if you look at how much overhead we're doing in this example","width":186},{"text":"we're just incrementing and getting them out of a loop. so they don't take a small amount of time to run","width":548},{"text":"the second thing is that they may not work if you've forgotten to initialize them","width":280},{"text":"and this time for a lecture demonstration i was unlucky that it did work","width":254},{"text":"what we should do is make sure that our mutex locks are properly initialized","width":338},{"text":"alright, so how can I do that?","width":127},{"text":"well before using them we should call pthread_mutex_init","width":437},{"text":"and let's look at the man page","width":275},{"text":"we can pass in a pointer to our mutex as some attribrutes if we'd like as well","width":361},{"text":"so I can say 'ok initialize my mutex and here's some additional attributes I could set up for them as well","width":410}],
  // Part 2
  [{"text":"ok there's another way to initialize them","width":393},{"text":"which is to actually set an equal to this magic macro pthread_mutex_initializer","width":784},{"text":"ok, so, if I do that then I've got an initialized mutex and now I've got this object not in a c++ cense, but in terms of something conceptually I can think of as an object","width":904},{"text":"that I can lock","width":56},{"text":"and remember, the lock means that no other thread can lock the mutex","width":399},{"text":"so I'm using it as a way to serialize who gets access to my sum variable","width":507},{"text":"if your thread comes a long and tries to lock this mutex one then it has to wait until I've finished with that mutex","width":414},{"text":"and similariliy if you've locked mutex then I have to wait","width":353},{"text":"yes?","width":334},{"text":"then we go back to the original problem we have arbitrary values","width":521},{"text":"ok, so yeah, we could do that, we could have another little loop down here for example","width":1139},{"text":"yes","width":64},{"text":"and we're back to our same problem that the CPUs are now stepping over each other in trying to read and write to this memory location","width":566},{"text":"pthread_mutex doesn't give you any magic, it's a very low level way just to stop two or more threads form continuing","width":560},{"text":"it's up to us to do some code analysis and say 'yeah, actually I've got a problem with this code'","width":331},{"text":"I forgot to put a pthread lock around that other loop","width":242},{"text":"[student question]","width":593},{"text":"correct, yes, you can just think of it as a very simple little busy loop","width":258},{"text":"the lock thing says 'hey whilst it's mutex is locked by someone else I'm going to wait'","width":385},{"text":"that's all it does","width":87},{"text":"it doesn't magically say and the code in here is amazing and bug free","width":289},{"text":"it doesn't say that other pieces of memory are especially locked, it's just a loop","width":524},{"text":"it just happens to be a clever loop to be sure that there can only be one ","width":276},{"text":"if two threads called mutex lock at the same time","width":242},{"text":"only one of them wins","width":117},{"text":"only one of them gets to go to into the bathroom","width":218},{"text":"the other one has to wait","width":55},{"text":"a bit","width":316},{"text":"but eventaully that first thread will presumably unlock the mutex at which point the waiting thread can say 'oh great, it's my turn to lock it' and continue","width":692},{"text":"so it's a busy loop, it tries to be efficient in the case that the lock is unlocked","width":473},{"text":"because most of the time there isn't a conflict","width":134},{"text":"most of the time it's pretty unlikley that two threads are reading the same data structure","width":343},{"text":"it's just that one percent of the time or .1 percent of the time we're lucky and our CPU, or two or more CPUs are trying to read the same memory when we don't want them to","width":708},{"text":"yes? [student question]","width":309},{"text":"yes, in this tiny example we would actually get a better performance if we did that","width":596},{"text":"if we just locked the whole thing for the entire time","width":281},{"text":"in other words for this silly little tiny example","width":301},{"text":"there's absolutely no point running two threads","width":162},{"text":"yes","width":62},{"text":"trying to have two threads accessing the same memory we might as well of just had a single thread that weant up to two million","width":601},{"text":"ok, so the parallelism in this case or the speed of it just isn't worth it","width":396},{"text":"the reason I've chosen this example is because it's trivial to show a problem with two threads incrementing the same piece of memory","width":811},{"text":"it would not be a problem if sum was the local variable because local variables are stored in the stack","width":395},{"text":"and the stack is per thread","width":137},{"text":"and so presumably they'd be updateding their own variables","width":612},{"text":"what happens if you forget to unlock?","width":117},{"text":"ok, imagine this, imagine the person in front of you goes into the bathroom and never comes out","width":788},{"text":"what we've discovered ladies and gentlemen","width":132},{"text":"is something called dreadlocks - nah - no, actually deadlock","width":302},{"text":"nothing to do with dreadlocks or bad hair","width":150},{"text":"or goodhair if you like dreadlocks","width":116},{"text":"so we've got a problem of deadlock","width":137},{"text":"we've got one thread waiting for another thread to unlock a mutex and it never happens","width":377},{"text":"right, our poor thread is stuck","width":560},{"text":"alright, so let's do that to our poor little program","width":619},{"text":"and you can tell me how quickly my program will finish","width":746},{"text":"three years later we're still waiting","width":356},{"text":"what happened? well I had one thread that locked the mutex and a second thread that said 'ok, i'm going to wait because i need to lock this mutex' ","width":677},{"text":"so it never proceeds, it never gets into the for loop","width":187},{"text":"meanwhile our main thread is waiting for both threads to finish","width":313},{"text":"when does that happen? never","width":318},{"text":"so if you think C code and programs have been hard to debug so far","width":390},{"text":"you ain't seen nothing yet. baby no because","width":230},{"text":"our program stalls, it gets stuck if we were to debug this we'd discover that the main thread is here, it's waiting","width":519},{"text":"it's waiting for soemthing that never happens","width":130},{"text":"we have to say while why is it waiting? what happened to that other thread?","width":185},{"text":"so like sherlock holmes you have to say look this thread ever unlocked a mutex","width":623},{"text":"yes?","width":1139},{"text":"are you taking about the mutex or the sum variable?","width":253},{"text":"so in the - we had the code before","width":398},{"text":"ok, so the code, the code as written right now allows one thread to work through the whole for loop","width":447},{"text":"and the other thread is just spinning there waiting for the mutex to be unlocked before it can lock it","width":317},{"text":"so it doesn't do anything","width":458},{"text":"now you've got the case where each thread before they can increment the sum had to lock the mutex","width":382},{"text":"has to own that mutex","width":108}],
  // Part 3
  [{"text":"ok, only one of them will win that fight if they happen to try and lock at the same time","width":560},{"text":"one of them still wins and the other one has to wait","width":159},{"text":"if the other thread comes around and tries to lock it whilst you've got the lock it has to wait","width":508},{"text":"and it keeps going around, yeah, so you take the lock, you increment it and give the lock back","width":689},{"text":"goes around again, yes","width":233},{"text":"yes? [student question]","width":661},{"text":"yeah, it's not a very good program I agree","width":334},{"text":"correct, in some cases the only reason to do parallesism is simply to add it to your resume","width":352},{"text":"it may not actually give you a speed up","width":167},{"text":"and this is an example of that. it's just a silly little example","width":374},{"text":"we'll get to to more complicated examples soon in the course where we talk about multiple threads spawning to read and one thread wanting to write","width":658},{"text":"now, I'm showing you code but I want you to stop for a moment and think about this conceptually","width":353},{"text":"we're talking about threads, but this could apply to real life. this could even apply to processes","width":509},{"text":"now I'm not going to show you any code with processes but there are certainly times when multiple processes are asking the operating system to do things at the same time","width":591},{"text":"'hey I'd like to write to disk at the same time' sorry, I'm not going to let you do that","width":303},{"text":"'oh I want to open a file descriptor at the same time as someone else'","width":191},{"text":"now the operating system has to play these same kinds of tricks to make sure that the data structures are valid whenever a different process tries to read it","width":668},{"text":"so the operating system is full of code like this to make sure that we correctly work with our data structures even when different processes are trying to run, or use them or read them or write to them at the same time","width":1076},{"text":"right, so, the other thing we can do is talk about this pthread_mutex_lock()","width":318},{"text":"yes, it's just a little data structure here pthread_mutex_t but behind it there's additional resources","width":738},{"text":"this elusive thing I just called a spin lock is behind it","width":252},{"text":"and so we're tying up system resources in creating a mutex lock. not much, just a tiny bit","width":349},{"text":"so good C programs will free up a mutex when they've finished using it","width":761},{"text":"OK, so, down here we can call pthread_mutex_destroy() and pass in our mutex","width":952},{"text":"that doesn't do anything to the C variable, but it does say to the pthread library 'hey any resources you've connected to my little C variable can be released and reused'. a question? [student question]","width":1185},{"text":"aha, that's a great question","width":275},{"text":"if one thread locks a mutex, can another thread unlock it?","width":341},{"text":"no","width":106},{"text":"this is where the bathroom analaogy is great. if you lock the bathroom door you don't want anyone else unlocking it","width":430},{"text":"no, the idea of a pthread mutex is that you lock it and then a few nanoseconds later you've finished updating your data structure and then you're going to unlock it","width":706},{"text":"it's an error for another thread to actually try to unlock it","width":461},{"text":"also with a simple mutex like this unless we give it additional options it's an error to lock it twice","width":617},{"text":"if you try to do that the most likely thing to hapen is that the pthread library will say 'that mutex is locked, I'm just going to sit here until it's unlocked'","width":750},{"text":"but there's a problem becasue you locked it so it's never going to be unlocked, so now you've got code that's hit a deadlock again","width":461},{"text":"that this poor little thread is waiting for itself but it can't continue because it can't execute anymore code because it's waiting for the lock","width":420},{"text":"yes, so don't try to lock it twice","width":247},{"text":"you can give more arguments to pthread mutex locks to say add some more debugging and checking and it will complain to you if you do things like that","width":630},{"text":"but in practice we don't do that because a) it slows our mutex locks down and b) we should just write correct code anyway","width":482},{"text":"right, good luck with that","width":173},{"text":"yes? [student question]","width":321},{"text":"aha, ok, let's suppose the mutex is locked and you try to call destroy","width":389},{"text":"the answer is, don't do that","width":226},{"text":"it can lead to undefined behavior ","width":125},{"text":"the exciting thing about undefined behavior is that it's undefined! it can do anything! it could start world war three, it could change your facebook status to single","width":746},{"text":"ok that was a joke","width":203},{"text":"um, it could update your tinder profile, whatever","width":422},{"text":"it could - so, so - don't do this ","width":222},{"text":"these primatives are designed to be extremely high performance so as a result there's no safeguards so look back with nostalgia at Java where Java would say 'excuse me you've gone past the end of the array'","width":919},{"text":"I'm going to politely shut down your process and throw an exception","width":236},{"text":"this doens't exist anymore, you are ice climbing here and you'd better make sure that every line of code you write is correct","width":580},{"text":"so write code slowly, especially code that deals with locks","width":372},{"text":"especially code that deals with malloc and calloc and free","width":425},{"text":"and realize the lifetime of functions now can be very diferent","width":221},{"text":"so for example here's a student error I saw once where we had some memory ","width":573},{"text":"ok, so calloc sizeof an int, lets have enough memory for say a hundred of them. we'll pass this in as a parameter","width":777},{"text":"and then we'll free our memory","width":348},{"text":"not a good idea","width":370},{"text":"alright, because if my count gold function is now using that memory the code I've just written assumes that I can free it straight away","width":811},{"text":"well hold one, we don't know when countgold is going to end so just because we don't write anymore code in our main function that uses this memory doens't mean we can immediately free it","width":831},{"text":"no I've probably got another thread that's going to use that memory","width":224},{"text":"so now we have to think of the lifetime of our threads as well and how long their going to run","width":444},{"text":"so like I said this is like ice climbing, you do it carefully and think about each line of code and the lifetime of your data structures and whether they - what happens when two threads try to work on them at the same time","width":970},{"text":"alright, any questions about mutex locks?","width":387},{"text":"ok, so, I'll just reiterate the main points again","width":311},{"text":"they're not magic","width":119},{"text":"they're just little loops","width":148},{"text":"a pthread lock is basically just a little loop until that lock is available","width":484},{"text":"so it's up to you to use them as such","width":297}],
  // Part 4
  [{"text":"yes, if you had two threads using two different pthread locks that doesn't help you at all","width":431},{"text":"you're going to protect some memory use the same lock to protect that memory everywhere you access that memory","width":758},{"text":"right, are you ready for slide two?","width":225},{"text":"k, slide two","width":842},{"text":"yes, in todays lecture I'm not just giving you one synchronization primitive, but you get two synchronization primitives yours for just 19.95","width":619},{"text":"yes, so we're going to talk about counting semaphores","width":325},{"text":"here's an idea","width":207},{"text":"mutexes are a little constrictive, right?","width":180},{"text":"first of all I can only have a lock and unlock from the same thread","width":353},{"text":"and they don't have any internal state other than whether it just locked or not","width":491},{"text":"so sometimes we want something which is a bit more general and this is where a counting semaphore is very useful because it has the idea of a count","width":851},{"text":"and everything is happy providing that count is at least one","width":503},{"text":"but where we get down to zero or lower it stops","width":553},{"text":"it doesn't let you reduce the count ","width":222},{"text":"so it behaves like a resource counter","width":222},{"text":"the integer that we're going to put inside this counting semaphore","width":216},{"text":"and if you try to reduce the count you can't, you have to wait","width":832},{"text":"so I have a little example ","width":951},{"text":"so what's the code look like in terms of the counting semaphores?","width":200},{"text":"well what you'll see is this sem_post and sem_wait","width":562},{"text":"and fundamentally what they do is they increment or decrement the count inside the semaphore","width":478},{"text":"you never see the count directly","width":317},{"text":"and in fact it's quite common to increment and decrement - sorry it's quite common to set the initial value as say zero or one","width":1024},{"text":"so imagine a pizza box with slices of pizza in it","width":341},{"text":"and anyone, any thread can come up and say 'yes, I'd like to eat a slice'","width":443},{"text":"unlike the counting gold code I gave you, I guarantee you that each person will get a slice","width":835},{"text":"and we'll keep track of the number of slices in each pizza box","width":286},{"text":"so you can come up and eat a slice of pizza","width":291},{"text":"if you try to eat the slice of pizza and there's no pizza left, you wait","width":497},{"text":"here's the nice thing about semaphores that you don't twiddle your thumbs","width":207},{"text":"no, your thread is put on suspended animation, you're not going to use up any CPU time","width":378},{"text":"so if you want pizza and you ask for pizza and there's no pizza left, I get to freeze ray you and you're not even conscious of the fact that you've paused, that you're stuck","width":943},{"text":"now, is this the end of the world for you? no because here's the good news","width":272},{"text":"other threads may come along and put pizza back inside the box","width":371},{"text":"they can increment the count","width":222},{"text":"when they do that I can wake you up and say 'hey guess what? there's pizza now!'","width":315},{"text":"and you say 'oh thank you very much!' and take your pizza slice and carry on your way","width":244},{"text":"right, so this little analogy is what these sem_wait() and sem_post() calls do","width":414},{"text":"so how do we use a counting semaphore?","width":342},{"text":"here's the basic idea, we're going to say init and we want to say how many slices of pizza do we want inside of our box our what's the intial value","width":445},{"text":"so for example zero might be a common idea or we might say actually I want say three slices of pizza","width":744},{"text":"and then we might call wait","width":212},{"text":"I'm decrementing those counters, if there happens to be pizza inside the box, if there happens to be a non-zero value inside my counting semaphore these can return immediately","width":912},{"text":"OK, so I can call wait three times and they would immediately continue","width":638},{"text":"but if you call wait a fourth time","width":412},{"text":"your thread gets stuck inside the wait call","width":297},{"text":"doesn't need to use any CPU for this because your operating system is now going to take control of that thread and say 'I\"m sorry, you cannot proceed, there's no pizza left'","width":688},{"text":"ok, the good news is that on another thread we can call post","width":873},{"text":"post does not block, post will return immediately","width":242},{"text":"but post is the plus one effect, it says I want to actually increment the number of pizza slices inside this counting semaphore","width":945},{"text":"so when you do that anybody waiting to eat a slice of pizza can now continue, they will decrement the count themselves and continue","width":666},{"text":"we're going to use this counting semaphore for some more advanced examples, but one thing I want to show you or one thing you should notice is the way you post now they, they don't need to be inside the same thread. they could be, but they don't have to be","width":1442},{"text":"right, questions about counting semaphores? yes? [student question]","width":763},{"text":"ok, right, so, let's imagine you've got any empty pizza box","width":220},{"text":"two threads walk up and say I'd like to split a slice of pizza. we've put them in a state of suspended animation and then you walk up and you call post on this pizza box","width":705},{"text":"here's what's going to hapen","width":36},{"text":"first of all you get to walk away straight away, you can carry on whatever you were doing","width":256},{"text":"one of the two threads that were waiting will win, ok?","width":383},{"text":"one of them will get to return from their wait call","width":410},{"text":"now of course, what's left inside the pizza? because you posted but another thread immediately waited on that and stole that slice of pizza","width":504},{"text":"so the count is still zero, so any other threads that walk up and try to eat pizza, theres nothing left in the box","width":336},{"text":"but we've released one of those threads","width":132}],
  // Part 5
  [{"text":"[nothing]","width":784},{"text":"yes?","width":250},{"text":"correct, it's not necessarily like a queue","width":228},{"text":"it's actually operating system dependant","width":129},{"text":"we can give hints to the system as to how fair it should be","width":241},{"text":"for example, you might say that the thread that's been waiting the longest should have access to the pizza, that seems pretty fair to me","width":577},{"text":"but actually we have different definitions of fairness","width":370},{"text":"for example, the surgeon that is waiting to eat the pizza has a higher priority than the non-surgeon","width":498},{"text":"so we can actually assign different different priorities to our threads","width":234},{"text":"but that's some more advanced stuff that we don't need to worry about for today. for now just assume that you don't control it, the operating system controls who gets to eat the slice of pizza","width":634},{"text":"I don't know about you, but I'm going to be pretty hungry after this lecture","width":541},{"text":"so, yes?","width":416},{"text":"haha, great question! can you use this to implement lock? that's such a great question, I was about to ask it to!","width":434},{"text":"can we use a counting a semphore to implement a lock, a mutex lock? in other words, if I hadn't told you about the mutex lock, could you do it with a counting semaphore?","width":985},{"text":"that's true, yes, so counting semaphores are more versatile in that sense","width":272},{"text":"but in terms of the counting gold example I showed you at the beginning of this lecture could you do it using a counting semaphore?","width":670},{"text":"well the answer is yes","width":117},{"text":"my next question to you though is what should be the initial value of the counting semaphore?","width":679},{"text":"so if we were to go back to our code here","width":457},{"text":"and we didn't want to use lock and unlock, but we wanted to replace this with a counting semaphore","width":576},{"text":"ok, so, before entering our critical section we should try to take a pizza slice, we want to grab a slice of pizza","width":903},{"text":"ok, how do I do that?","width":140},{"text":"I'm going to call sem_wait() on my counting semaphore","width":400},{"text":"afterwards I can give back the slice of pizza","width":484},{"text":"yeah, sem_post()","width":691},{"text":"so how does that work now?","width":133},{"text":"if I have two threads trying to call sem_wait() at any one time I just need to make sure one of them wins","width":589},{"text":"so therefore how many slices should I put in the pizza box at the beginning? ","width":262},{"text":"just one! yes, so one thread get's a slice of pizza and can continue","width":444},{"text":"if I put in zero slices of pizza when I initialized my program what would happen?","width":486},{"text":"deadlock, yeah! no one gets to continue","width":268},{"text":"if I put in two slices of pizza or more I have a race condition again","width":640},{"text":"now I've let two threads continue when in fact I only ever wanted one thread inside my critical section","width":363},{"text":"if I'd put in two slices of pizza then two threads would've been able to proceed past that sem_wait() at the same time","width":471},{"text":"and that as we say lead to data corruption","width":497},{"text":"ok, so I think I have my sem_wait","width":559},{"text":"man page search","width":673},{"text":"so, when you initialize a semaphore the last thing you're going to pass in is it's initial value, in other words the number of pizza slices inside your counting semaphore","width":1396},{"text":"questions?","width":331},{"text":"so one of the powers of the counting semaphore is that you can call sem_wait() and sem_post from arbitrary threads","width":523},{"text":"and we'll see that when we want to make a simple queue or stack work with multi-threaded code","width":576},{"text":"now, the queues and stacks that you've made in past classes did things like 'oh look I've ran out of space, I know iI'll just allocate some more memory and I'll make my list or linked list longer'","width":809},{"text":"I'll double the number of spaces","width":227},{"text":"we can do better, what we can do is say I will stop thread from putting anything else into my data structure","width":809},{"text":"I can pause it because when it calls sem_wait() we know that it's going to be put on ice","width":464},{"text":"so it's unable to continue, it's unable to put anything else into my data structure until the space","width":426},{"text":"so now I can think of my processing in terms of pipes","width":360},{"text":"and I don't have to have an infinite amount of memory if part of my computation is generating results faster than the rest of my computational process","width":700}],
  // Part 6
  [{"text":"so I can say to a data structure given the next item, if the data structure's empty that call can just block and it can block until there's data to be retrieved","width":1113},{"text":"so these become very powerful primitives in multi-threaded code","width":329},{"text":"and by the way you can use semaphores as well to even work with multiple processes, but let's not worry about that today","width":763},{"text":"still I want to show you this little example here where I'm going to use sempahores with signals","width":787},{"text":"now a quick comment, semaphores don't work in mac os x","width":386},{"text":"so if you happen to have an apple machine in front of you please go intern at Apple and fix this","width":652},{"text":"don't worry, we'll work at how to get around that in a different lecture, but you can check to see if it works by looking at the return value of sem_init()","width":612},{"text":"so remember typical posix calls return -1 if they fail","width":213},{"text":"so it's a good idea to find out early that our semaphore failed instead of just carrying on and assuming it wasn't a problem","width":682},{"text":"so I want to show you a common way of using semaphores, and that's this","width":260},{"text":"let's have a thread that's going to do some clean up for us","width":309},{"text":"and the first thing this thread does is call sem_wait()","width":566},{"text":"alright, so I've got a little method here called sing song","width":247},{"text":"and the clean up is going to do sing 'yo ho ho ho a pirates life for me!'","width":455},{"text":"which you can imagine in say your java virtual machine there's a whole lot of clean up you might want to do before it exits","width":501},{"text":"and so this is a perfect example of how we can use a semaphore","width":182},{"text":"we're going to call sem_wait() which means this thread blocks, which means this this thread cannot continue because there's nothing in the pizza box right now","width":738},{"text":"now, I'm going to set up a signal handler so that when I press ctrl-c I call my little handler","width":750},{"text":"here's my handler","width":121},{"text":"so when I press ctrl-c I call sem_post()","width":334},{"text":"hold on a moment, why couldn't you've just printed 'yo ho ho ho a pirates life to me' directly from my signal handler?","width":644},{"text":"and the reason is because printf() might actually allocate some memory and the number of functions you can call from the signal handler is actually quite small","width":800},{"text":"sem_post happens to be one of the few functions that you're allowed to call from within a signal handler, printf() is not","width":702},{"text":"why? because there could be race condition","width":205},{"text":"it could be that malloc is being called from somewhere else in our code and the internal data structrues may not be correct, it may not be ready for another malloc call to run at the same time","width":1159},{"text":"so that's our trick, right, inside the handler we put an extra slice of pizza inside our counting semaphore","width":473},{"text":"we increment the count from zero to one and in doing so and a moment later sem_wait() can return","width":445},{"text":"at last that thread can eat! at last it can take a slice of pizza","width":595},{"text":"alright, so, let's run this","width":489},{"text":"so, you can see I'm using gcc. you need to give the option -pthread to say include the pthread support and because I didn't specify an output file it's just compiled to a.out","width":815},{"text":"so let's run this","width":277},{"text":"nothing happens of course until I try to press ctrl-c in which case it now prints 'yo ho ho ho a pirates life for me!'","width":502},{"text":"we caused the signal handler to run which posted the semaphore which let our other thread go","width":488}],

  // Start Lecture Video 9
  // Part 0
  [{"text":"[pause]","width":4520},{"text":"okay good morning and welcome to a very cozy edition of CS241","width":415},{"text":"it's eleven o'clock according to siebel 1404","width":191},{"text":"so let's get started","width":50},{"text":"here's what we're going to do today","width":59},{"text":"we're going to look at something called the critical section problem","width":226},{"text":"this is a fundamental idea of how we cope with doing two things at the same time","width":495},{"text":"or to be precise, how do we stop two things from happening at the same time","width":290},{"text":"we played around last lecture with counting gold remember? ","width":288},{"text":"and we saw that if we let two threads access that global variable","width":296},{"text":"then our count will be wrong","width":190},{"text":"and so our messing around reading or writing that piece of data we solve the problem via putting a mutex lock around it","width":658},{"text":"and we said okay right but if we do that then only one thread can continue and change that variable","width":404},{"text":"and the other one has to wait","width":111},{"text":"so what we did is we identified a critical section of our code","width":292},{"text":"where only one thread or one process can manipulate that memory at a time","width":409},{"text":"so what we're going to do now is step back from thinking about mutexes and locks and think about it in terms of some pseudocode and also think about what happens might you implement say mutex lock and mutex unlock","width":853},{"text":"and that is what we're going to do","width":110},{"text":"right so here we go","width":160},{"text":"it turns out for example that someone forgot to implement mutex lock and unlock","width":464},{"text":"and so, here's my idea of how we could actually implement those two functions","width":558},{"text":"okay so remember the game here is that if two threads called lock only one of them should win","width":558},{"text":"and the other one has to wait","width":153},{"text":"it's the you know any one person in the bathroom at a time type of rule here","width":231},{"text":"so how's the code work?","width":197},{"text":"right so when you call it you pass in a pointer to this mutex object inside that data structure I've got something called lock","width":539},{"text":"which can just be an int","width":164},{"text":"so if someone else has already entered, in other words, if they have already set the lock","width":310},{"text":"then my code does nothing","width":182},{"text":"it just goes around and says okay is it unlocked now is it unlocked now is it unlocked now is it unlocked now?","width":393},{"text":"so it's going to busy wait, it's going to just keep testing that variable","width":345},{"text":"once it's unlocked, my little thread is going to say okay great","width":350},{"text":"now I can set the lock","width":294},{"text":"that means if any other thread at this point tries to lock it, they are going to have to wait","width":294},{"text":"they are going to be inside that busy loop because I still have the lock","width":258},{"text":"and of course eventually when my code finishes I can then just immediately set it back to zero","width":368},{"text":"I don't need to have any loops here, I know that I'm the only thread that could of set this lock","width":407},{"text":"so the code is simple, just unlock the door and walk out","width":309},{"text":"right so that's my first attempt at protecting my critical code, my critical section","width":522},{"text":"so that's my first implementation of how lock and unlock might work","width":336},{"text":"is it any good though?","width":112},{"text":"will it work?","width":87},{"text":"perhaps you and your neighbor can figure out why this proposed code is actually not sufficient ","width":603},{"text":"what race conditions could you see? what would happen if two threads happen to call it at about the same time?","width":392},{"text":"so here's what we have to do, you have to look at that code with two parts of your brain","width":241},{"text":"and imagine two different threads were running the same code","width":335},{"text":"what could happen that would be bad?","width":217},{"text":"[pause]","width":5190},{"text":"okay so what have we discovered?","width":210},{"text":"is this implementation any good?","width":454},{"text":"what do you think?","width":131},{"text":"no, why not?","width":644},{"text":"no okay too scary, alright","width":292},{"text":"so here's our problem, our lock needs a lock","width":206},{"text":"there's a potential race condition here","width":106},{"text":"what would happen if two threads called lock at about the same time","width":258},{"text":"both of them would see that the door is unlocked","width":255},{"text":"yes? both of them would see that the variable is zero. great they say, I don't need to be inside my while loop anymore and they continue","width":452},{"text":"at the same time","width":83},{"text":"so now they both set the lock equal to one and they both return, they both continue","width":335},{"text":"so both of them, both threads are now able to enter the critical section","width":364},{"text":"which is precisely what we didn't want","width":168},{"text":"we wanted to make sure that only one thread at a time could escape from our lock","width":809},{"text":"does that make sense?","width":199},{"text":"because this is the easy one, this lecture is designed to blow your mind","width":634},{"text":"and to make new connections that didn't exist","width":155},{"text":"this stuff is really hard to think about if you have a human brain","width":367}],
  // Part 1
  [{"text":"so your homework for this week is to go and upgrade please","width":284},{"text":"go and get one of those uiuc brains please","width":161},{"text":"um because this stuff is really hard, we're looking at one piece of code but thinking about it for what could happen when two different threads happen at the same time","width":454},{"text":"and you're thinking about the sad days, your thinking about what could possibly go wrong","width":402},{"text":"we're not thinking about oh my code works great, it's no no let's look at this really really critically","width":414},{"text":"yes so our problem would be if two threads came along called lock at the same time and they both read a value of zero for the lock value","width":553},{"text":"before either of them had a chance to change it to one","width":279},{"text":"not very likely but that's not good enough, we're trying to make code that actually works","width":315},{"text":"that doesn't make us lose money or corrupt our data structure","width":332},{"text":"at the end there can only be one thread that gets through this","width":312},{"text":"alright I talk about threads because that's how we program this stuff","width":235},{"text":"but if you read the historic literature, it talks about processes that's because we're thinking about this actually in a more abstract sense","width":550},{"text":"not about pthreads and c structures but just how do we actually do this so that it works","width":523},{"text":"alright so this is broken, the only way that we could have made this code work is if we had somehow done all of this as kind of one operation","width":628},{"text":"but we can't do that","width":61},{"text":"in c","width":47},{"text":"you can't say okay I'm the gorilla, whilst I look at this lock, don't let anyone else look at it or touch it, alright?","width":448},{"text":"how do I do that? easy, make a lock, oh wait that's what I'm trying to do right?","width":203},{"text":"so that's not going to work for us","width":138},{"text":"okay so that failed, what we failed at was mutual exclusion","width":583},{"text":"we only want one thread or process if you're talking historically inside our critical section","width":1154},{"text":"so let's try a different solution, let's try our first real candidate solution","width":499},{"text":"we'll have um. we'll agree on the following","width":159},{"text":"now before you panic, the code written out here, the pseudocode is the same as the pseudocode on the right hand side","width":430},{"text":"the reason we wrote it twice is because I want you to think about two threads or two processes trying to execute this at the same time","width":439},{"text":"and see if we can actually kind of prevent bad things from happening","width":194},{"text":"so what we'll do is we'll have some flags","width":239},{"text":"we'll say look, I'm going to just wait until your flag is lowered","width":404},{"text":"and your thread will do the same","width":379},{"text":"so if I see that your flag is up, then I know that you are inside the critical section","width":752},{"text":"in which case I'm just going to wait","width":398},{"text":"once I decide that your flag is down, I'm going to raise my flag, I can do my stuff and then I'll lower my flag","width":435},{"text":"now we can say what happens if I have three or four or five or more threads in this, let's not","width":327},{"text":"let's just worry about what happens with just two threads or two processes trying to do that","width":314},{"text":"this is hard enough with just two","width":136},{"text":"alright so does this work, does this suffer from the same problem?","width":270},{"text":"or not?","width":66},{"text":"okay you decide and see if you can argue it with your neighbor","width":480},{"text":"[silence]","width":3168},{"text":"okay! so, does it work? yes it does great, end of lecture","width":321},{"text":"no of course it doesn't work","width":120},{"text":"right? so does it work? no! why not?","width":475},{"text":"let's hear from someone over here, yes","width":559},{"text":"they both could be waiting forever, uhhhhhhh, I think that might be hard, I think we can assume that their flags are initially down","width":801},{"text":"alright so how will they get to have both of them up?","width":420},{"text":"come on keep going","width":795},{"text":"alright so we have a potential problem right? yes that both people or both threads could see each other and say oh look his flag is down","width":731},{"text":"great I can continue, at which point we raise our flag and say alright off I go","width":309},{"text":"and they do this at exactly the same time, or about the same time","width":540},{"text":"so hey i'm going to wait until your flag is lowered and I'm going to wait until your flag is lowered","width":344},{"text":"they check each others flags they are both low so they can both proceed","width":302},{"text":"they raise their flags to say okay I'm going in","width":164},{"text":"but it's too late, they've both gotten past this little loop!","width":189},{"text":"so they both go into the critical section so what we have failed on the mutual exclusion principle game again","width":700},{"text":"we did not get mutual exclusion","width":123},{"text":"we wanted one person inside our critical section at a time thank you very much and we failed","width":511},{"text":"so when we're looking at these solutions, we've got to evaluate them a little bit carefully because it can happen more than once","width":438},{"text":"you could imagine you're going to wrap this around some data structure update like hey I want to add something to my linked list","width":344},{"text":"or add something to my hash","width":109},{"text":"and I don't know where I'm going to do it but I do know I'm going to say insert things into my hash or read my hash multiple times","width":647},{"text":"right so, let's be sneaky, let's be guided by what we did before","width":324},{"text":"and this time we're going to raise our flag first","width":266},{"text":"that way hopefully, we can stop this mutual exclusion problem","width":280},{"text":"okay what's wrong with this solution, right so again the code here is the same as this code here","width":351},{"text":"you could just imagine that this is person A and person B or thread A and thread B","width":252},{"text":"what happens now? what could possibly go wrong?","width":224},{"text":"again take a moment to argue this with your neighbor and even if you don't agree with them perhaps you can persuade them that you're right","width":512},{"text":"[silence]","width":1920}],
  // Part 2
  [{"text":"okay sounds like we got a little situation over here okay what have we got?","width":537},{"text":"you put your flag down. no, you put your flag down! it's a Mexican standoff with flags! It's a Mexican standoff with flags! okay...","width":601},{"text":"uh so what do we mean by that? what could possibly go wrong?","width":485},{"text":"okay right yes exactly, both of them could raise their flag at the same time","width":342},{"text":"not very likely I agree, but it could happen right?","width":189},{"text":"both of them could raise their flags first before continuing","width":218},{"text":"and then they check each others' flags ","width":93},{"text":"oh look over there that other thread has their flag raised, i better wait","width":425},{"text":"and they both do that","width":132},{"text":"both threads or both people now just are stuck forever waiting for the other thread to lower their flag","width":548},{"text":"this would be an oops moment right?","width":118},{"text":"so clearly this is not going to work for us","width":158},{"text":"this would not be a good implementation for mutex lock and unlock","width":453},{"text":"we can get stuck","width":267},{"text":"what have we got?","width":225},{"text":"so this will become deadlocked","width":518},{"text":"we can't make any progress","width":508},{"text":"right so let's try this one. alright that um","width":475},{"text":"this time we're going to have not some flags because they don't seem to be working for us","width":391},{"text":"let's have the british solution we'll say no after you, okay?","width":519},{"text":"so we're going to say something like look we'll have this shared variable so turned is shared between us","width":525},{"text":"so we can take turns","width":380},{"text":"and i'm just going to wait until turn is set to my id","width":212},{"text":"and then do the critical section stuff","width":162},{"text":"and similarly you're going to do the same, you're going to check the shared variable that you share between us","width":263},{"text":"so there's not two turn variables there's just one in global memory somewhere","width":213},{"text":"and see if it's set to my id","width":226},{"text":"and I'm going to wait until it is okay and when it is I can do my critical section stuff","width":283},{"text":"and then i'm going to say okay it's your turn","width":255},{"text":"right what do you think of that solution","width":231},{"text":"is it any good","width":277},{"text":"yeah we're just considering this for just two threads","width":186},{"text":"right we'll worry about generalizing this to more than two later","width":575},{"text":"[pause]","width":1986},{"text":"okay so could this lead to say data corruption?","width":278},{"text":"could we have two threads inside the critical section at the same time","width":529},{"text":"no, right it's impossible to continue unless you have the golden chalice ","width":333},{"text":"unless the turn variable has been given to you","width":223},{"text":"so hurray we have mutual exclusion again","width":428},{"text":"it's satisfied!","width":144},{"text":"alright but our critical section now is only going to have one thread at a time inside the critical part of the code","width":405},{"text":"two threads are not going to try and update our goal value or change the data structure at the same time or try to read it whilst another one is writing it. fantastic! we're done.","width":698},{"text":"but what's wrong with our solution?","width":325},{"text":"yes?","width":198},{"text":"okay it's not going to work if we add more threads to it uh but it is something that will run with just two threads","width":764},{"text":"uh if they try and update at the same time, let's have a look, so we'll let the first one go through and then a second one comes through","width":570},{"text":"but you're along the right lines, it's like what will happen if this thread actually wants to continue","width":449},{"text":"it can't! it has to wait for the first thread to actually do something","width":223},{"text":"yes, they become rate locked","width":137},{"text":"it's as if you and I have to use the bathroom at exactly the same rate, no it's your turn... oh i have to wait","width":394},{"text":"I have to wait to use the bathroom... no one's in it","width":177},{"text":"yes? but I still have to wait for you to use it","width":155},{"text":"there is something broken with this picture, yes?","width":289},{"text":"so what we have is a problem","width":321},{"text":"of uh, let's see I think...","width":335},{"text":"uhhh I have to look at the definitions, just a moment","width":407},{"text":"oh yes, progress","width":434},{"text":"there's no progress","width":110},{"text":"if no one's inside the critical section, I should be able to enter it","width":803},{"text":"so in fact there's three desirable properties that we need here","width":279},{"text":"and we've touched on two of them","width":147},{"text":"so what we'd like in our solutions is mutual exclusion, that one's pretty obvious yeah? we only want one thread or one process to be able to continue","width":871},{"text":"into the critical section","width":358},{"text":"the next one is progress","width":614},{"text":"so if there, I'll write it in terms of threads, if there are no threads inside the critical section we should be able to enter immediately","width":2880},{"text":"or with the bathoom analogy, if there's no one in there I should be able to just use it","width":306},{"text":"I don't want to have to wait for you to give me a chain of keys each time, right?","width":290},{"text":"the resource is not being used, I should be able to use it","width":293},{"text":"the last one is something called bounded wait","width":259},{"text":"and I'm going to give a non mathematical definition of bounded wait, there's more technical definitions","width":361},{"text":"that you might use in later courses","width":484},{"text":"that I should be able to get into the thread... the thread can enter the critical section in a finite amount of time","width":2048}],
  // Part 3
  [{"text":"okay so that's a little of loose definition","width":355},{"text":"other definitions talk about the number of other waiting processes or number of waiting threads","width":340},{"text":"that I don't want a little four year old running between my legs running into the bathroom and getting there before me","width":437},{"text":"that's going to be really annoying right?","width":108},{"text":"they should stand in line as well. There should be some kind of principle of fairness behind this","width":323},{"text":"that it shouldn't be the case that I'm just stuck there waiting for an infinite number of other processes to finish","width":396},{"text":"and they always get in front of me, they manage to somehow jump the queue, that's just no fair","width":219},{"text":"so we have this idea of bounded wait. yes?","width":426},{"text":"why does candidate three not have progress? because suppose you want to update it faster than the other thread wants to enter this critical section","width":776},{"text":"so we're stuck there waiting for the turn, waiting for the golden chalice to be given to you","width":493},{"text":"now, maybe the other thread may eventually call their code","width":375},{"text":"and update the critical section, do something inside the critical section","width":228},{"text":"but until they do so, you're just stuck there waiting","width":308},{"text":"so you could imagine I've got a thread that's writing into a an associative map ","width":529},{"text":"you've got a thread that's reading from it","width":133},{"text":"why should your reads have to wait for a write to come in?","width":280},{"text":"if no one's modifying the data structure, you should be able to immediately get in there and use it","width":861},{"text":"so this is the fact that you might want to say come in here twice as fast as this other thread is going to run, yes?","width":1098},{"text":"yes, it's not efficient, but worse you don't know when that other thread is going to make that call","width":581},{"text":"so imagine you had one thread that it wants to walk through a linkedlist structure and another thread that might be changing that linkedlist structure","width":628},{"text":"you don't want to modify it whilst one is walking through the links okay?","width":945},{"text":"you want to get in there eventually, you don't mind waiting but it shouldn't be an infinite amount of time","width":364},{"text":"right, it's not fair if another thread continually just jumps in front of you and you never get a chance to use the resource for example","width":646},{"text":"right, so I've littered this lecture with trying to make concrete examples of why we care about the critical section in terms of accessing data structures","width":652},{"text":"but these are the three formal thing that we care about for solving the critical section problem. So if you care about reading the literature about this..","width":614},{"text":"these are the properties in which we judge our success or not of our proposed algorithms","width":493},{"text":"so let's take a look at another one","width":308},{"text":"here we go","width":372},{"text":"so a reminder that we're not going to be executing this code all the time","width":231},{"text":"but the threads are going to execute this code more than once","width":305},{"text":"so we do other stuff and then repeat sometime in the future","width":447},{"text":"so now it's your turn","width":180},{"text":"take a look at this code and decide how could it possibly go wrong? This is tricky","width":695},{"text":"[silence]","width":14400}],
  // Part 4
  [{"text":"okay let me tell you how hard this example is","width":414},{"text":"for giggles, when I wrote this little problem I challenged a faculty member","width":382},{"text":"assistant programming senior professor five minutes to find the problem with this","width":477},{"text":"and after three minutes neither of us had actually noticed the error yet","width":440},{"text":"so I'm pretty sure there's a problem with this but it took us more than 3 minutes to see it","width":286},{"text":"I'll give you a hint though, it does not satisfy mutual exclusion","width":385},{"text":"the question is how could that happen then?","width":397},{"text":"[silence]","width":12397},{"text":"okay, so, before we talk about this code in specifics, I find that it's absolutely fascinating the fact that we can write something that just has a couple of booleans, just flags, simple flags [something]","width":803},{"text":"and a simple switch variable and a little boolean that says your turn or my turn","width":287},{"text":"and we've built something that couldn't be much more complicated and it completely fails to be handled by our poor little brain","width":602},{"text":"we have a really really hard analyzing this really really simple code","width":289},{"text":"for spotting it for synchronization problems","width":209},{"text":"and concurrency bugs","width":135},{"text":"so, anyways, let's see if we can kind of walk through this and do it carefully","width":364},{"text":"let's suppose for example right now that only one thread kept on using the resource, use this critical section here","width":506},{"text":"can we have progress? right so if we only have one raise my flag!","width":520},{"text":"wooohooo, if your flag is raised, it's not, great! I don't need to wait, I can continue to my critical section and I'm going to set turn to you","width":636},{"text":"okay, do I have a turn variable? yes here's my turn, wooo!","width":290},{"text":"right and lower my flag","width":107},{"text":"okay right a millisecond later, I want to do some more stuff for this critical section so what do I do?","width":273},{"text":"raise my flag! is your flag raised? no [something over there] right great","width":240},{"text":"so I don't need to wait, I can enter my critical section, I'm going to again set the turn to you and lower my flag","width":412},{"text":"so that seems to work, I'm able to enter the critical section if no one else is using it so progress is good","width":558},{"text":"right mutual exclusion let's see if we can argue that it works and then we'll argue that it doesn't","width":495},{"text":"right so raise my flag and is your flag raised? then if it's not I'm going to continue to the critical section","width":659},{"text":"meanwhile another thread comes along. alright so","width":357},{"text":"[noise]","width":260},{"text":"there's my flag, right. another thread comes along and says oh um I see your flag is raised","width":794},{"text":"then I'm going to just wait until it's my turn","width":209},{"text":"eventually that other code finishes and passes the golden chalice, this turn, to me!","width":504},{"text":"so now I can continue","width":165},{"text":"but they are only going to pass the turn variable to me when it finished, so the code works! right?","width":508},{"text":"oh what happy little brains we have","width":208},{"text":"because we're so happy excited to see that our code works","width":206},{"text":"um, no, it doesn't work","width":249},{"text":"the way to analyze this is to say okay I've got this turn variable so I actually have to do this analysis twice","width":305},{"text":"I have to say suppose the turn variable was set to the first thread before this stuff started","width":319},{"text":"or suppose the turn variable was set to the other thread","width":310},{"text":"before this mess continued","width":121},{"text":"and if you do that, then it is possible to break mutual exclusion here's how then","width":531},{"text":"first of all we'll set turn equal to two","width":233},{"text":"so there was some prior instance when we'd run through this code and turn ended up being 2","width":320}],
  // Part 5
  [{"text":"right that this is the solution then","width":196},{"text":"let's um, look to see what order things happen","width":290},{"text":"okay so I'm going to raise my flag and then I'm going to see if your flag is raised","width":543},{"text":"it's not, great! I can go into the critical section","width":501},{"text":"then the other thread comes along and says okay raise my flag","width":500},{"text":"if your flag raised? yes it is","width":143},{"text":"okay wait until it is my turn","width":192},{"text":"oh look at that, it is my turn","width":377},{"text":"so, enter the critical section","width":213},{"text":"three four five six, whoops","width":611},{"text":"so, by trying to introduce this turn flag to ensure progress","width":298},{"text":"we broke it, we broke mutual exclusion","width":213},{"text":"we have a situation where because of the prior value of turn, our code allows one way for mutual exclusion to be broken","width":675},{"text":"don't feel too bad about spotting this, there have been peer reviewed published papers in major conferences, in major journals that failed to solve the critical section problem","width":699},{"text":"yet claimed they did","width":100},{"text":"so in trying to solve this, in trying to come up with algorithms that actually solve this","width":275},{"text":"it actually advanced the state of the art in terms of how do we analyze concurrency and how do we analyze programs that do two things at the same time","width":895},{"text":"right so this is broken, it failed to satisfy mutual exclusion","width":427},{"text":"alright then, here you go, what do you think of candidate 5?","width":906},{"text":"see how far you can get in five minutes for this one","width":353},{"text":"[silence]","width":13248}],
  // Part 6
  [{"text":"[silence]","width":476},{"text":"what's up?","width":151},{"text":"which one are you talking about?","width":143},{"text":"yes? mhmm. uh why is not your turn?","width":2109},{"text":"no there's just one variable, ok. correct.","width":850},{"text":"okay just to read this code, there's only one turn variable ","width":288},{"text":"so when it says turn to win it's still the same turn variable","width":650},{"text":"okay so what I asked you to do is actually impossible","width":251},{"text":"this is a solution to the critical section problem","width":248},{"text":"this was the first published solution by dekker","width":364},{"text":"so let's see if we can understand some of the logic behind this as to how it tries to work","width":325},{"text":"ok so first of all, before we do anything else, we raise our flag, we are kind of signaling intent","width":386},{"text":"okay, I want to be inside the critical section","width":256},{"text":"so think about this flag as an intent, I want to go","width":554},{"text":"so then we have this while flag is raised","width":146},{"text":"right didn't we have this at the beginning of the lecture?","width":138},{"text":"yes we did and we saw how we could run into a problem of deadlock where both of them were waiting for the other thread to lower their flag","width":736},{"text":"but of course it never happened because thread one was waiting for thread two and thread two was waiting for thread one","width":453},{"text":"so what we do is to have a little bit more of a complicated logic","width":392},{"text":"which is to have a standoff","width":229},{"text":"and one of us will win","width":190},{"text":"and we take it in turns to see who wins in this potential deadlock","width":408},{"text":"so that's the purpose of this, so if it's your turn to win, then I'm just going to lower my flag and wait while it's your turn","width":930},{"text":"in other words, you've won! you've won this competition. I'm going to let you go","width":504},{"text":"so at some point though, you're finished and you've set the turn back to me, you'll give me the golden chalice","width":463},{"text":"or the trump card if you like","width":157},{"text":"what do I do now? well I don't continue immediately. ","width":164},{"text":"instead, I play another game with you. i say okay I'm going to raise my flag, ","width":266},{"text":"I've got this intent again to go into the critical section. but I'm not going to go straight in","width":274},{"text":" I'm going to first see if your flag is raised","width":489},{"text":"so it's a bit like playing trumps except that we're going to take it in turns to see who wins","width":400},{"text":"if we do that, then we've solved the critical section problem","width":225},{"text":"namely that we have mutual exclusion only one thread or one process at a time can be inside the critical section","width":439},{"text":"we've got bounded wait, what do we mean by that? well a rough definition is that I only have to wait for a bounded amount of time","width":693},{"text":"a more precise definition is that I only have to wait for one other thread or process to enter the critical section and then its my go","width":637},{"text":"and we've got progress","width":136},{"text":"so if the other thread or process is not inside the critical section, I get to play immediately, I get to use the critical section, I get to execute that code","width":646},{"text":"it took many many years to come up with this solution and it took even more years, several decades before another solution was published, here it is","width":558},{"text":"between those times, there were many incorrect solutions published","width":563},{"text":"and so here is the last solution I'm going to show you today","width":311},{"text":"the original article from peterson ","width":446},{"text":"this might look like it was from the 1960s, in fact it was from 1981","width":442},{"text":"that's how long it took to find a simple solution to the critical section problem","width":308},{"text":"that's how poor our brains are at how to cope with multiple threads or multiple processes","width":450},{"text":"it's incredibly hard to reason about this stuff","width":255},{"text":"right, I'm not going to talk about this but I will say the following","width":340},{"text":"first of all every systems programmer knows of peterson and dekker in terms of the critical section problem","width":404},{"text":"it's the kind of thing that should roll off your tongue in an interview","width":164},{"text":"secondly, yes I may choose to add a multiple choice quiz question based on these two solutions","width":461},{"text":"for example, does this code... is this code dekker's solution? or is this code a version of peterson's solution","width":474},{"text":"thirdly, I may choose to make other code which fails and I'm going to ask you in an exam quiz to work out whether it fails mutual exclusion, progress or bounded wait","width":858},{"text":"and with that, that's the end of today's lecture, if you have questions for me please come down and see me! thank you very much","width":384}],

  // Start Lecture Video 10
  // Part 0
  [{"text":"[Om Monk Chant with Transcendental and Tibet Bells]","width":8314.181818246841},{"text":"so, what do we got. overhead.","width":781.1818182468414},{"text":"right so, here's our requirements that we'd like","width":228.18181824684143},{"text":"know that first of all, we only want one process or thread to be inside our critical section at a time","width":371.18181824684143},{"text":"what do we call that?","width":425.18181824684143},{"text":"mutual exclusion","width":227.18181824684143},{"text":"in other words, if you've taken cs241, I don't want to see you taking any other courses","width":416.18181824684143},{"text":"yes, your time is mine! said cs241","width":209.18181824684143},{"text":"right, what about this then? if waiting, then another process or thread (if you're talking about threads) can only enter the critical section a finite number of times","width":727.1818182468414},{"text":"what do we call that?","width":156.18181824684143},{"text":"this is a better definition of bounded wait","width":356.18181824684143},{"text":"if you're waiting to use the resource, if you're waiting to be inside the critical section","width":305.18181824684143},{"text":"it would be unfair if another thread just kept on jumping in front of you in front of the queue","width":274.18181824684143},{"text":"so we want a solution where eventually we get to go in","width":383.18181824684143},{"text":"alright and then if no other process is in the critical section then the process or thread can immediately enter the critical section","width":424.18181824684143},{"text":"our code should be efficient. it shouldn't have to pause. if there's no one inside the bathroom, I expect to use it straight away","width":457.18181824684143},{"text":"alright, so, what's that called?","width":179.18181824684143},{"text":"progress! yes.","width":82.18181824684143},{"text":"so those are our three desired properties that we're going to evaluate","width":439.18181824684143},{"text":"alright. now there's um, one more thing that I think","width":215.18181824684143},{"text":"that I should mention is that we're talking about pseudocode right now. but today, if you were to look inside say, mutex lock, and you were to drill down to find out exactly how it worked, you might discover that it uses something called the exchange instruction","width":1076.1818182468414},{"text":"so many processors today will implement either test&set or the exchange instruction","width":458.18181824684143},{"text":"what do you think the exchange instruction does?","width":243.18181824684143},{"text":"okay, it exchanges something, yes, very good, but what might it exchange?","width":573.1818182468414},{"text":"how about a value inside a register and the contents of memory","width":418.18181824684143},{"text":"so it swaps them","width":173.18181824684143},{"text":"but here's the critical part: is that it does this atomically. it does this in the guerilla fashion. it walks up and it exchanges your hats","width":762.1818182468414},{"text":"actually no, I'll take your cellphone, that's more valuable, right?","width":218.18181824684143},{"text":"for the microphone oh yeah","width":129.18181824684143},{"text":"and in doing so, no other CPU is allowed to interrupt that process","width":323.18181824684143},{"text":"it completes as one logical step. here you go, you can have your phone back","width":385.18181824684143},{"text":"so that way, we can actually use it to implement our mutex lock because only one thread will win","width":484.18181824684143},{"text":"we can make sure that only one thread gets to put a certain value inside it","width":492.18181824684143},{"text":"so, it's an atomic instruction, why is it useful? well, to implement locks!","width":646.1818182468414},{"text":"we don't have to worry about officially catered code down here and it works even if I got say more than two threads trying to compete to lock something","width":732.1818182468414},{"text":"okay, alright, next thing we're going to talk about is condition variables","width":463.18181824684143},{"text":"I'm going to introduce them now, we'll let that simmer in your brain and then the second half of the lecture we'll come back to them","width":509.18181824684143},{"text":"so like I said, this is the cool bit","width":222.18181824684143},{"text":"condition variables sound like they hold some sort of clever value","width":475.18181824684143},{"text":"they don't","width":147.18181824684143},{"text":"uh, their name actually is very good at confusing beginners","width":360.18181824684143},{"text":"the way to think about condition variables is that you can make your thread meditate","width":576.1818182468414},{"text":"what an exciting lecture isn't it? okay, right!","width":106.18181824684143},{"text":"so we can put a thread to sleep...","width":300.18181824684143},{"text":"and then....it will stay until another thread decides to wake it up. now, you don't need to actually scrumple up a piece of paper and throw it at the other thread","width":1171.1818182468414},{"text":"the system will do that for you","width":137.18181824684143},{"text":"you can just make a call, you can say \"hey, signal!\"","width":145.18181824684143},{"text":"and, at some point, you know that the meditating thread will be woken up by the system","width":633.1818182468414},{"text":"so it's a communication pattern. it's a way for one thread to wake up another","width":468.18181824684143},{"text":"so we can use this and we can use this so that our thread can wait until something is true, but we need to write that, so that's the idea of variable comes in.","width":728.1818182468414},{"text":"we are actually going to write a condition. a truth that we want to be true","width":293.18181824684143},{"text":"but, until that truth happens, until that test happens, no magic is going to happen. we're just going to write a little loop (a little white loop) until that truth has happened we're just going to put our thread into a meditative state","width":1060.1818182468414},{"text":"alright, that's the idea","width":131.18181824684143},{"text":"they're not very complicated. they're not fantastic and clever, they don't know what the condition is going to be. we're just going to write a little while loop that says \"ok, while there is no good coffee at bervandes, meditate\"","width":895.1818182468414},{"text":"it'll be a long time","width":192.18181824684143}],
  // Part 1
  [{"text":"alright, but at some point, we'll write another thread that says \"ok, guess what? I've delivered great coffee to bervandes, and you saw it, and you wake up your meditating monk, aka your thread\"","width":764.1818182468414},{"text":"at this point, the monk wake ups. okay, I better see if there's good coffee at bervandes now","width":446.18181824684143},{"text":"alright, now, there's a little gotcha here, which is that sometimes monks wake up by acident","width":473.18181824684143},{"text":"this is called a spurious wait","width":319.18181824684143},{"text":"in other words, we'd like our monks to meditate forever until we do the little tip symbol, yes? ding! wake up","width":497.18181824684143},{"text":"unfortunately, it's not a perfect system. they may wake up by accident. but that's okay, because we will write a little loop to say, \"okay! before you attempt to purchase any coffee, actually go and see if it's any good\"","width":770.1818182468414},{"text":"\"and if it isn't, guess what I'm going to ask you to do. go back to sleep. continue meditating\"","width":562.1818182468414},{"text":"alright. now, there's a little bit more to this course.","width":418.18181824684143},{"text":"for starters, I've suggested that you can signal a waiting monk. you can throw something at them","width":562.1818182468414},{"text":"turns out that actually normally you can use wake one monk","width":295.18181824684143},{"text":"you can get the largest gong you can buy ebay and bash it like hell","width":374.18181824684143},{"text":"wake up all of them","width":171.18181824684143},{"text":"because maybe you want to wake up a lot of monks","width":133.18181824684143},{"text":"so that's a design decision. we'll see how we can do that in a little bit","width":296.18181824684143},{"text":"alright so that's the beginning of condition variables","width":155.18181824684143},{"text":"we'll let that simmer into your brain","width":128.18181824684143},{"text":"we'll come back to that in the second half","width":365.18181824684143},{"text":"because right now, hahaha. I've got some more critical section problems for you to look at","width":658.1818182468414},{"text":"I've written four potential solutions to the critical section","width":402.18181824684143},{"text":"and remember, what are we trying to do here? well, I've got some code here (my critical section stuff) that's only going to work if I've got one thread or one process at a time inside that code","width":863.1818182468414},{"text":"so I want to make sure that if I happen to have two threads or two processes attempting to get there, that one of them will lose","width":464.18181824684143},{"text":"one of them will have to wait until the first one has finished","width":350.18181824684143},{"text":"and remember, all code runs more than once","width":137.18181824684143},{"text":"so you can think of the critical section, for example, as using a data structure or updating a data structure. you don't want these two things to happen at the same time.","width":728.1818182468414},{"text":"I'm not quite sure how often this code is going to be called.","width":231.18181824684143},{"text":"but we do have our three desired properties. we want mutual exclusion so only one thread or process can enter the critical section at a time, bounded wait, and progress","width":725.1818182468414},{"text":"so, I've got some problems here, and this is where your neighbor comes in, because I'm going to ask you to actually evaluate these in terms of those properties","width":650.1818182468414},{"text":"and see whether they are good solutions to the critical section problem or not","width":430.18181824684143},{"text":"and I'm going to come around and answer any questions you might have","width":192.18181824684143},{"text":"[long pause]","width":17721.18181824684}],
  // Part 2
  [{"text":"[long pause]","width":8823.181818246841},{"text":"okay so let's have a look at the first one","width":253.18181824684143},{"text":"we have a flag and in this case, our flag represents an intent to go into the critical section","width":447.18181824684143},{"text":"because inside this while loop, we actually may lower our flag. we actually may say \"yeah, well, I give up. it's your turn\"","width":678.1818182468414},{"text":"so if I see your flag is raised, then if the turn variable is set to you, then I'm just gonna say \"okay, actually I'll let you go ahead\"","width":644.1818182468414},{"text":"so I'll lower my flag. I know then, therefore, that the other thread gets to win!","width":323.18181824684143},{"text":"they see my flag has gone down so they can go into the critical section","width":355.18181824684143},{"text":"but they're not going to raise my flag","width":120.18181824684143},{"text":"so before going into the critical section, my flag will always be raised","width":291.18181824684143},{"text":"alright, now I go around again","width":117.18181824684143},{"text":"so, let's go around again","width":105.18181824684143},{"text":"now, if it turns out that I've actually had to wait like I just did, then this time, it's my turn to win.","width":533.1818182468414},{"text":"so I'm not going to back down the second time. I am just going to now keep waiting until your flag goes down","width":612.1818182468414},{"text":"and because the turn variable is set to me, then I win this round","width":328.18181824684143},{"text":"I win this second time","width":92.18181824684143},{"text":"so I know that I can continue at some point","width":272.18181824684143},{"text":"at some point your flag will go down","width":256.18181824684143},{"text":"either because you've finished this other critical section or you've deferred to me","width":367.18181824684143},{"text":"so in fact, what we're looking at here is dekker's solution. so this was the first solution to the critical section problem","width":914.1818182468414},{"text":"and we're looking at, of course, the version which works for two threads","width":273.18181824684143},{"text":"but I hope you can see that the flag represents kind of an intent to be inside the critical section","width":622.1818182468414},{"text":"right then! so what about version two? yeah, we're raising a flag and this time, it's a kind of \"no no no, after you\"","width":612.1818182468414},{"text":"so now we have a little loop that we keep going around. if your flag is raised or its your turn, I'm just going to wait","width":516.1818182468414},{"text":"what do people think about this? candidate solution?","width":449.18181824684143},{"text":"no progress? no mutual exclusion? no bounded wait?","width":442.18181824684143},{"text":"no progress did someone say?","width":184.18181824684143},{"text":"alright so let's have a look. so, if I set the turn to you, and then I'm going to wait if its your turn","width":483.18181824684143},{"text":"well that's, that's like walking to the resource and just standing there because \"no, I want someone else to go in front of me. I'm scared\"","width":545.1818182468414},{"text":"I should be able to use the resource if its right there and no one else is using it. I want to have that piece of cake. I want to be able to enter the critical section","width":427.18181824684143},{"text":"so we've already identified that it fails","width":138.18181824684143},{"text":"at least in terms of progress","width":187.18181824684143},{"text":"there's no progress here","width":118.18181824684143},{"text":"it gets stuck waiting for the other thread to come along and kick the turn variable back to the first thread or first process","width":531.1818182468414},{"text":"so, we've found a problem here: no progress","width":608.1818182468414},{"text":"alright, um, what about the third one? I'm gonna raise my flag, this time I'm being selfish, hey! it's my turn!","width":779.1818182468414},{"text":"this is the toddler version of the critical section solution","width":267.18181824684143},{"text":"I see the cake. I want to eat it. it's mine. I saw it first","width":285.18181824684143},{"text":"alright so, I'm claiming set turned to me, and now I'm just going to wait while your flag is raised or it's your turn","width":527.1818182468414},{"text":"what happens here?","width":143.18181824684143},{"text":"so you could imagine, that we do one, two and three, alright, so","width":715.1818182468414},{"text":"if there was no other thread, then great! we're going into the critical section","width":336.18181824684143},{"text":"alright, now we've cured the problem of no progress here. so let's see if we can make it a bit more interesting. suppose another thread comes along and raises the flag","width":1013.1818182468414},{"text":"now we have to decide who's going to set the turn variable last","width":194.18181824684143},{"text":"ok so, for now, let's try like this","width":379.18181824684143},{"text":"we'll set turn to me, and then the other thread says set turn to me","width":271.18181824684143},{"text":"so what happens now?","width":252.18181824684143},{"text":"the first thread says \"oh look! your flag is raised! I better wait!\"","width":289.18181824684143},{"text":"and what does the other thread do? \"oh look! your flag is raised! I'd better wait!\"","width":576.1818182468414},{"text":"it's like a four way stop sign in Wisconsin","width":210.18181824684143},{"text":"\"oh! I see you've arrived! I'll wait for you!\"","width":164.18181824684143},{"text":"that was not a Wisconsin accent, but you get the idea","width":231.18181824684143},{"text":"we start talking about cheese perhaps. but we got a problem that now both threads have claimed its their turn but we've reached a problem where they're both looking at each others flags and so we get stuck","width":993.1818182468414},{"text":"so we actually have deadlock. we've again showed the problem of we try to fix progress but we failed","width":495.18181824684143},{"text":"there is no progress here","width":105.18181824684143},{"text":"I'm going to make a little change to this program","width":453.18181824684143},{"text":"I'm going to say \"what would happen if this was an AND?\"","width":657.1818182468414}],
  // Part 3
  [{"text":"and, if we do that, we actually have Peterson's solution","width":1513.1818182468414},{"text":"so now Peterson's solution says \"I'm only going to look at your flag if the turn variable is pointing at you\"","width":585.1818182468414},{"text":"otherwise, I'm just going to be the bully and walk in","width":467.18181824684143},{"text":"now, I'm not going to spend twenty minutes to prove that this works","width":303.18181824684143},{"text":"because we'd actually have to look carefully at the possible different sequences of how this could work","width":484.18181824684143},{"text":"well I'm going to kind of just do a little bit of hand waving which is - I think you can agree that by the time we get to the wait loop, one of them has set the turn variable","width":943.1818182468414},{"text":"so the turn variable is either pointing at process 1 or process 2. one of them has finished doing that most recently","width":351.18181824684143},{"text":"so, one thread will wait. and the other, will continue.","width":433.18181824684143},{"text":"so we've solved the progress problem","width":623.1818182468414},{"text":"right, so dekker and peterson are two solutions to this and every systems programmer should be able to kind of recognize how these solutions work","width":844.1818182468414},{"text":"sorry, at least be able to recognize these solutions","width":224.18181824684143},{"text":"you'll notice what peterson did, what peterson noticed was this. was setting the turn to me before the wait","width":472.18181824684143},{"text":"that was his insight","width":161.18181824684143},{"text":"to say \"oh look! if I change the turn variable to me, BEFOREhand, I can actually write a really really simple solution\"","width":481.18181824684143},{"text":"and like I said, that wasn't actually discovered until 1981","width":348.18181824684143},{"text":"okay, what about the last one?","width":563.1818182468414},{"text":"does this work?","width":425.18181824684143},{"text":"what about algorithm 4? or solution 4?","width":553.1818182468414},{"text":"no progress again! yes, we can have a case where both sides are seeing each others flag being","width":628.1818182468414},{"text":"each others flag is raised and so we get stuck","width":330.18181824684143},{"text":"alright so, we've worked out two possible solutions. dekker's solution and peterson's solution here. through that minor change here","width":527.1818182468414},{"text":"how about enable us to actually implement a mutex lock and unlock?","width":210.18181824684143},{"text":"what part of the code would you put inside mutex lock and which part would you put inside unlock?","width":497.18181824684143},{"text":"alright. it's actually not that hard, right? let's use dekker's solution. we'll say this is the pseudocode I'm going to put inside","width":583.1818182468414},{"text":"the lock","width":101.18181824684143},{"text":"and this is the part that we'll put inside unlock","width":399.18181824684143},{"text":"and we better write some documentation to say that our code actually only works for two threads","width":318.18181824684143},{"text":"and if you want to use this for more than two threads, you better pay me more to think real hard about how to generalize this","width":655.1818182468414},{"text":"okay so, not bad for a morning's work! look, it's only 11:25 and we've already figured out some code to write mutex lock and mutex unlock. unfortunately, we come back a moment later and people say, wait, you know what? okay, it failed!","width":1131.1818182468414},{"text":"what do you say? this is impossible! I learned this in class! this is a correct solution. I even proved that it's correct","width":451.18181824684143},{"text":"it doesn't work","width":145.18181824684143},{"text":"it does not work on modern hadware","width":254.18181824684143},{"text":"here's why","width":92.18181824684143},{"text":"the C code that we write even the assembly code that we write, does not always correspond to exactly what happens in the hardware","width":690.1818182468414},{"text":"we try to make our hardware run as fast as possible. so, here's some things to abide to","width":350.18181824684143},{"text":"first of all, we can have a cache problem that what CPU thinks is in memory is being provided by the cache on the chip, on the CPU","width":627.1818182468414},{"text":"so if we've got two distant CPUs, they may not update the memory and notify each other that the value has changed","width":524.1818182468414},{"text":"so all this stuff about testing a turn variable and looking your flag, I might actually be looking at stale values that have not yet propogated from one CPU cache to another CPU cache","width":688.1818182468414},{"text":"a second problem is that actually our CPU can execute instructions out of order","width":556.1818182468414},{"text":"now before you panic and say \"oh! whats gonna happen to my code?\" don't panic too much. actually all the stuff we're going to do with pthread_mutex_lock ensures that the all the instructions up to that point are fully executed and completed","width":1333.1818182468414},{"text":"so, I'm not going to talk anymore about how this can bite you. other than don't panic because guess what, we've got the exchange instruction that we can use at the lowest level to make sure that we really do have a complete round trip to main memory as opposed to dealing with stale values in the cache","width":1695.1818182468414},{"text":"okay, right, any other questions about these?","width":508.18181824684143},{"text":"when we have an exam, when we have a quiz about this stuff, I will be writing these kinds of problems and asking you to figure out if its a valid solution or not. or if it is a valid solution, whether its dekkers solution or peterson's","width":886.1818182468414},{"text":"any other questions?","width":100.18181824684143},{"text":"good! we have round two!","width":191.18181824684143},{"text":"here we go, condition variables!","width":457.18181824684143},{"text":"alright, we're gonna write some code that actually uses a condition variable","width":424.18181824684143},{"text":"okay so, along the way I'll write some pseudocode I'll turn into real code and I'll talk about some gotchas","width":401.18181824684143},{"text":"so for example, one common gotcha is that we forget to actually initialize this stuff","width":438.18181824684143},{"text":"if you forget to initialize it, then yes you still got some memory reserved but it may not be connected to any actual real system resource that does some of the work for you","width":595.1818182468414},{"text":"so calling your mutex lock unlock may just silently fail","width":363.18181824684143},{"text":"because you never bothered to initialize it correctly","width":114.18181824684143},{"text":"so that's just a common gotcha","width":139.18181824684143},{"text":"so, if your friend leaves their workstation or their laptop open for a moment, just quietly walk over and delete their initialization code. they'll never know and they'll be stuck for hours","width":694.1818182468414},{"text":"alright, so how do I have these things, how do I create these things in my code?","width":373.18181824684143},{"text":"guess what? the pthread library gives you one, here it is. I'm gonna have this little variable called cv","width":364.18181824684143},{"text":"and you might notice in this code I've got a mutex lock as well","width":269.18181824684143},{"text":"it turns out that whenever you need a condition variable, you are going to need a mutex lock as well","width":581.1818182468414},{"text":"it's like the little side kick that comes along to the party","width":189.18181824684143},{"text":"you can't uninvite them. I'm sorry they just won't come together as a pair","width":319.18181824684143},{"text":"you're gonna see a mutex lock and a condition variable together","width":258.18181824684143},{"text":"why? because a mutex lock makes our lives much simpler","width":332.18181824684143},{"text":"the mutex lock allows us to reason that one thread at a time is doing things inside a critical section","width":493.18181824684143}],
  // Part 4
  [{"text":"and remember, that makes our life much easier. when we can say, oh look! i've got multiple threads happening somewhere in my program, but in the stuff that's really complicated, when I'm changing data structures or reading data structures which might be changed, I just want one thread accessing this stuff","width":1027.1818182468414},{"text":"so that's what my lock is for","width":147.18181824684143},{"text":"alright, so here's my incredibly complicated data structure, it's called an array, here it is","width":259.18181824684143},{"text":"and I've got the count that counts the number of things inside my array","width":294.18181824684143},{"text":"and as they are global variables, we know they are going to be initialized to zero","width":453.18181824684143},{"text":"okay, so, here's what I can do to my data. I've got something to add something into my array, to push some data in, and I've got a method to delete something!","width":756.1818182468414},{"text":"which all it does it just reduce the count","width":183.18181824684143},{"text":"and hopefully we'll assume that no one tries to delete more items than there are","width":494.18181824684143},{"text":"ok, I'm also going to have a getLast() method","width":558.1818182468414},{"text":"so getLast() we could, if we're inside cs225, say, I'll tell you what, I'll just return a bad value if nothing is actually in there already","width":539.1818182468414},{"text":"but no, what we're going to do is make getLast() wait","width":225.18181824684143},{"text":"we're going to make sure that it doesn't continue until there really is at least one value inside our datastructure","width":804.1818182468414},{"text":"alright so, here's the game we're playing","width":258.18181824684143},{"text":"there's one thread that's going to be calling push data and delete and it might do it several times.","width":281.18181824684143},{"text":"I've got another thread that might call getLast() several time","width":550.1818182468414},{"text":"right, so we're going to develop this code slowly but here we go. so, here's the plan. any time we want to deal with condition variables, we're going to write something incredibly incredibly simple. just a busy wait. just a simple while loop that keeps testing something","width":1387.1818182468414},{"text":"right so, this is the code that I'm scared about. right. I'm going to try and get something inside my array but what would happen, for example, if the count is oops this should be count - 1","width":844.1818182468414},{"text":"here we go","width":155.18181824684143},{"text":"what would happen for example if count was zero?","width":179.18181824684143},{"text":"it means my array doesn't have anything in it","width":207.18181824684143},{"text":"so, I need to say the following \"look, while count is zero, don't carry on.\"","width":1009.1818182468414},{"text":"so while count is zero, just go around","width":442.18181824684143},{"text":"and, who cares about burning up my battery on my cellphone. alright. it's easy code to write","width":475.18181824684143},{"text":"this is the kind of code you might write if you didn't come to cs241","width":152.18181824684143},{"text":"you know just \"[something] count is zero, doesn't matter, just keep going around\"","width":166.18181824684143},{"text":"eventually, at some point, count will change and that's fine","width":195.18181824684143},{"text":"of course, that code might execute a billion times and used up several milliamps of current","width":477.18181824684143},{"text":"or milliamperes of power","width":167.18181824684143},{"text":"and um, but it's the best we can do, right. I'm going to show you how we can do better","width":363.18181824684143},{"text":"so how can we fix this code? well first of all, we can see there's a race condition, right, that I don't want these methods to run at the same time so I'm now going to put my locks in","width":725.1818182468414},{"text":"alright so, here's what I wanted to do. I'm going to call my pthread and pthread's a lot to write so I'm just going to write p","width":492.18181824684143},{"text":"pthread_mutex is a lot to write so I'm just going to write m","width":342.18181824684143},{"text":"lock","width":49.18181824684143},{"text":"and, pass in the address of my little lock structure and at the end, call unlock","width":637.1818182468414},{"text":"and, suddenly our code is easier to read. we don't need to worry about say, two threads calling pushdata at the same time even if the problem says that never happens","width":604.1818182468414},{"text":"my code now says \"because of that lock, only one thread can ever be inside that little piece of code\"","width":476.18181824684143},{"text":"and similarly, here, if I lock on the same lock","width":978.1818182468414},{"text":"I'm conpletely confident that even if you tried to call pushdata and delete at the same time from two different threads, the code would still work","width":456.18181824684143},{"text":"one thread would have to wait","width":84.18181824684143},{"text":"one thread wins the lock and can continue and change the value of count. the other thread has to wait until the mutex is unlocked and then it can lock the mutex and carry on","width":784.1818182468414},{"text":"alright so, the lock call may take a bit of time","width":320.18181824684143},{"text":"if someone else if currently in the bathroom, you're going to have to just twiddle your thumbs and wait until that lock has been unlocked","width":601.1818182468414},{"text":"we're good, okay, we're fine so far right? this is not complicated so far. this is easy stuff, yes?","width":345.18181824684143},{"text":"yes?","width":65.18181824684143},{"text":"I know it's a monday and the weekend was great but come on, this is not too bad","width":269.18181824684143},{"text":"alright so, now, haha, right, now let's see what we should do over here","width":382.18181824684143},{"text":"um, before checking this count, I should make sure that no one else is touching it alright?","width":513.1818182468414},{"text":"that no one else might be, say, changing its value halfway through","width":246.18181824684143},{"text":"so, um, before doing anything with these shared variables, let's put a lock call in at the beginning. there we go.","width":945.1818182468414},{"text":"we see how our code is becoming littered with these lock() and unlock() calls, yes?","width":527.1818182468414},{"text":"alright, so we write this code, what happens?","width":460.18181824684143},{"text":"if we tried to test it at this point?","width":448.18181824684143},{"text":"this is the, what, freddy mercury who wants to live forever code?","width":418.18181824684143},{"text":"alright so my. I'm fine if I'm just calling pushdata and delete","width":394.18181824684143},{"text":"things can bad though, the moment I call getLast()","width":264.18181824684143},{"text":"because, getLast() locked the mutex, so what would happen now, to any other code that calls pushdata and delete?","width":583.1818182468414},{"text":"they get stuck! yeah, they get stuck inside their lock call","width":181.18181824684143},{"text":"waiting for that lock to get unlocked","width":106.18181824684143},{"text":"which as we can see from the code is never going to happen. wahahaha. alright, so we've got a problem","width":650.1818182468414},{"text":"we can even imagine as well that this count, if this was zero, then we can get stuck inside this loop, and because we don't unlock it, pushdata will never happen","width":1080.1818182468414},{"text":"so, here's how we're going to fix our code now","width":396.18181824684143},{"text":"we're going to unlock the mutex, meditate, me-di-tate, with our condition variable","width":1098.1818182468414},{"text":"after we finish meditating, lock the mutex again","width":352.18181824684143}],
  // Part 5
  [{"text":"so if our count is zero, go into a restful, peaceful state, but you say \"how can I wake my monk up if its meditating?\"","width":1095.1818182468414},{"text":"okay, when should I wake it up? do I need to wake it up in the delete()?","width":420.18181824684143},{"text":"no! because there's no way it could've fallen asleep then. it's going to fall asleep if the count was zero","width":428.18181824684143},{"text":"so, when should I wake it up?","width":293.18181824684143},{"text":"after I've incremented the count","width":154.18181824684143},{"text":"there's no point kicking the monk before that point, yes?","width":217.18181824684143},{"text":"because if I do, the monk will wake up, come out, eventually it'll be able to lock the mutex, it'll check the count again and say \"oh!\"","width":549.1818182468414},{"text":"so I'm going to write the code like this. I'm going to after here, after we're kind of ready, kick the monk","width":1084.1818182468414},{"text":"of course, if you're not feeling so violent, you can have one of those little bells. ding!","width":349.18181824684143},{"text":"and signal the monk to wake up","width":293.18181824684143},{"text":"alright so, we kick the monk! they wake up out of their meditation! they attempt to lock the mutex, but they can't because guess what our other thread has currently got it locked, so they're stuck in the lock call but in a moment's time, we will unlock the mutex.","width":868.1818182468414},{"text":"when we do that, the monk on this side is able to lock the mutex and continue. the go around, back to their while loop. hey look at that! count is no longer zero!","width":523.1818182468414},{"text":"great! I can continue! quick, get the array! get the last entry of the array! fantastic and return it","width":408.18181824684143},{"text":"alright, is my code complete?","width":161.18181824684143},{"text":"no, I've forgotten to do one last thing which is at the end, unlock()","width":392.18181824684143},{"text":"the mutex","width":276.18181824684143},{"text":"notice I put this after reading the array","width":409.18181824684143},{"text":"why? because I want my life to be simple. if I'm going to look at the array, if I'm going to look at the count, I want to make sure that I'm the only thread that can do so","width":679.1818182468414},{"text":"how do I do that? by owning the lock","width":257.18181824684143},{"text":"any other thread that attempts to say \"push more data in\" or \"delete stuff\" has to wait because they have to get the lock first. yes?","width":639.1818182468414},{"text":"you could do the kick after the unlock() almost, but there's actually a subtle race condition that I don't want to talk about today.","width":914.1818182468414},{"text":"so for now, just put it inside","width":176.18181824684143},{"text":"okay?","width":174.18181824684143},{"text":"alright, now, some comments on here. so this is how I want you to think of a condition variable. look, there's always three steps","width":433.18181824684143},{"text":"we better unlock stuff, because if we don't then I'm going to be meditating forever","width":411.18181824684143},{"text":"the rest of my code can't continue. it can't do its stuff to the array structure, it will never kick the monk because it will never get the lock","width":495.18181824684143},{"text":"so we must unlock it","width":128.18181824684143},{"text":"then we meditate","width":69.18181824684143},{"text":"and then, because we want to check our variables, we better relock the mutex","width":406.18181824684143},{"text":"alright?","width":128.18181824684143},{"text":"now I have some wonderful news for you","width":333.18181824684143},{"text":"all three of these things that we do here, happen inside cond_wait()","width":947.1818182468414},{"text":"actually, it's just one call","width":289.18181824684143},{"text":"so the most important thing in this lecture is to remember that cond_wait() actually does three things. before meditating, it's going to unlock the mutex that you give it","width":873.1818182468414},{"text":"why? so that other things can actually access the data structure and do things","width":583.1818182468414},{"text":"and the POSIX call is not called \"kick the monk\" or \"ring a little symbol\"","width":503.18181824684143},{"text":"it's just signal or cond_signal, to be precise","width":412.18181824684143},{"text":"and you pass in a pointer to the condition variable","width":354.18181824684143},{"text":"so here's what happens. when you call cond_signal, you're saying to the operating system \"please, at some point in the future, find a monk that's meditating and walk up and do the little symbol. ding!\"","width":952.1818182468414},{"text":"wake up the monk","width":344.18181824684143},{"text":"if you call cond_signal, the operating system's only going to do that to one monk if it can find it. if there's no monk's meditating, it won't bother","width":750.1818182468414},{"text":"it is also possible to bash the gong and wake up all monks which are meditating","width":517.1818182468414},{"text":"but we don't need to. well, we don't need that today. we know that from the problem specification, there's only going to be one thread inside getLast()","width":676.1818182468414},{"text":"later on, we'll see examples which do that","width":161.18181824684143}],
  // Part 6
  [{"text":"okay, right, so, now, this is where you come in","width":425.18181824684143},{"text":"remember how I said, OSX doesn't implement semaphores? well guess what, it's your lucky day!","width":294.18181824684143},{"text":"you are at Apple and in the afternoon, they accidentally left you access to the source code so you decided to actually implement sem_wait(), sem_post() ecetera for Apple so we can actually get these things working","width":988.1818182468414},{"text":"alright, and we can use condition variables. condition variables are more general, they're more powerful than semaphores because we get to write any condition that we want inside the little while loop","width":671.1818182468414},{"text":"so, how would you write these things? okay, how do we implement our semaphores?","width":427.18181824684143},{"text":"okay, so what do we need inside our semaphore?","width":255.18181824684143},{"text":"well, we need some sort of count","width":209.18181824684143},{"text":"to remember when that count gets to zero, then our sem_wait will wait","width":324.18181824684143},{"text":"and presumably, we also need some sort of pthread_mutex_lock","width":372.18181824684143},{"text":"there we go. and we'll have a pthread_cond variable","width":549.1818182468414},{"text":"there we go","width":244.18181824684143},{"text":"so with both things inside our semaphore, now we can figure out how to write sem_wait() and sem_post()","width":1894.1818182468414},{"text":"so, what's the first thing we should do inside sem_wait?","width":459.18181824684143},{"text":"we're going to be accessing our count variable so before we do that, we want to make sure that we have sole access. exclusive access to it. alright. so what should we call first?","width":778.1818182468414},{"text":"yes! let's lock our mutex","width":123.18181824684143},{"text":"alright, so, pthread_mutex_lock, and passed in a pointer to that structure so we'll do s, get the lock","width":779.1818182468414},{"text":"um, we'll make these little pointers just for speed today. right, and at the very end, we are gonna unlock stuff as well","width":1061.1818182468414},{"text":"so, when did we need to actually meditate? when did we actually need to pause?","width":508.18181824684143},{"text":"so if the count is zero, then let's send this monk to sleep. let's send this thread to sleep. so now we can call pthread_cond_wait","width":1302.1818182468414},{"text":"and you'd pass in a pointer to the condition variable and a pointer to the mutex","width":454.18181824684143},{"text":"and remember, that does three things for you. it unlocks the mutex, sleeps on the condition variable, and when eventually where it wakes up from that meditation, it's going to relock the mutex before returning","width":1088.1818182468414},{"text":"so one way to look at this code is that inside this code, at all times, the mutex lock is actually locked in terms of the code that we writing. in terms of say, checking this count.","width":557.1818182468414},{"text":"we know that that mutex lock is always locked","width":197.18181824684143},{"text":"it's only if it actually goes to sleep inside this cond_wait will the mutex lock become unlocked","width":575.1818182468414},{"text":"alright so, we get around there. and the last thing we need to do in our wait call is to reduce the count","width":520.1818182468414},{"text":"so, in our count structure, reduce it","width":615.1818182468414},{"text":"what would happen if two threads called sem_wait at the same time? doesn't matter. our lock would ensure that only one of them wins.","width":399.18181824684143},{"text":"that only one of them executes at a time","width":182.18181824684143},{"text":"so maybe the first thread will successfully call sem_wait() and continue. the second thread, though, calling sem_wait() might see the count value zero and then it's forced to meditate","width":702.1818182468414},{"text":"alright, what about our post? our post is not going to do any sleeping.","width":560.1818182468414},{"text":"it will increment the count","width":308.18181824684143},{"text":"okay, oh! look at that! I've touched part of the structure. I better make sure that what?","width":431.18181824684143},{"text":"what should I have done first?","width":123.18181824684143},{"text":"get the lock! yes.","width":95.18181824684143},{"text":"okay, so pthread_mutex_lock() and pass in a pointer to the lock that everyone's playing with","width":415.18181824684143},{"text":"there we go","width":189.18181824684143},{"text":"so now I know when I get back from this that I've got exclusive access to this data structure because all the code I'm writing always locks the same lock","width":811.1818182468414},{"text":"and now, I can call pthread_cond_signal()","width":811.1818182468414},{"text":"on the condition variable","width":236.18181824684143},{"text":"and finally, unlock the mutex. so this code would work","width":469.18181824684143},{"text":"but we can do a little bit better","width":263.18181824684143},{"text":"which is that our post is always asking the operating system to find a sleeping monk and ring the bell","width":505.18181824684143},{"text":"and, we could do a little bit better reasoning about this, we can say well hold on, the only time that there could be a sleeping monk is if the count is actually already been reduced to zero","width":761.1818182468414},{"text":"so if I've just incremented the count, then I'm going to wake up one monk","width":423.18181824684143},{"text":"so if the count has just been incremented to one, now I know that I should try to wake up a monk. if there happens to be no monks waiting, doesn't matter. that's okay, that's not my problem","width":1020.1818182468414},{"text":"but for the other times, if count says greater than one, then there can't have been any monks waiting. there's only going to be monks waiting if we've reduced the count down to one.","width":803.1818182468414},{"text":"alright and in here we write the standard code to initialize our mutex lock and our condition variable","width":415.18181824684143},{"text":"okay, and with that, we're out of time! I will see you on wednesday and you will have a quiz on friday! more about that on wednesday","width":554.1818182468414},{"text":"a reminder that malloc part 1 is due today","width":340.18181824684143},{"text":"come down and, it is isn't it?","width":271.18181824684143},{"text":"come down and see me if you have any questions! welcome to condition variables","width":348.18181824684143}],

  // Start Lecture Video 11 (0 INDEXED... OUTLIER)
  // Part 1
  [{"text":"Apparently my head cold managed to confuse me so therefore I confused you","width":832},{"text":"and I gave you an incorrect delta to those examples to show you peterson's solution","width":534},{"text":"and what I did was incomplete","width":128},{"text":"this is peterson's solution","width":169},{"text":"it is in the book, the wiki book","width":229},{"text":"the wiki book is very new ","width":124},{"text":"I only started creating it last semester","width":192},{"text":"it is an experiment to say what would happen if I after every lecture I wrote some notes","width":360},{"text":"and rather than just put it in a pdf, actually make it a wiki page","width":197},{"text":"so the wiki book is yours to edit and to add to eventually we'll actually turn it into a hard copy and I'll charge eight hundred thousand dollars for each one","width":768},{"text":"right no I'm not going to give it to Peterson or any of those other vulture companies","width":305},{"text":"I'll eventually have a hard copy and basically sell it at a bit over cost","width":359},{"text":"but until we do that it is available on the web","width":192},{"text":"you too can edit it, you too can improve it","width":192},{"text":"and in fact i'll be talking partly about that on Friday","width":247},{"text":"there is a conference where we talk about educational technologies and I've got a talk about that","width":430},{"text":"and also about the linux in the browser project which you too can play with","width":344},{"text":"and it's all in the cs 241 home page and you too can help develop it if you wish","width":379},{"text":"so i have several people doing improvements on that project as part of their senior projects for example","width":452},{"text":"I also have another group adding subtitles, captions to lecture videos","width":446},{"text":"and are looking at crowdsourcing for that","width":128},{"text":"so lots of good stuff","width":111},{"text":"right so we've talked about that","width":192},{"text":"i'll tell you about some more news in a little bit","width":154},{"text":"right now let's turn our attention to today's little challenge here","width":569},{"text":"the first challenge is relatively easy","width":135},{"text":"but it's still nontrivial","width":128},{"text":"what we're going to do today is make a barrier","width":457},{"text":"so we talked about okay we can create all these threads","width":217},{"text":"and one way to program them would be to say create a whole lot of threads which work on a little problem and join on all of those threads and we wait for them to finish","width":538},{"text":"that's a perfectly reasonable and simple way to use threads","width":192},{"text":"but we can do better","width":119},{"text":"now that we know that we've got these primitives that can stop and wait","width":331},{"text":"we can make our threads wait for each other ","width":244},{"text":"so before going to a part b of an algorithm","width":259},{"text":"let's wait for everybody to finish part a","width":222},{"text":"so this is basically like before closing the door of an elevator and going down to the next part","width":298},{"text":"we want all of our other threads to finish","width":185},{"text":"so that's the idea of a barrier","width":128},{"text":"we can implement this using semaphores and we can say that we're going to look at using condition variables","width":576},{"text":"so remember what is a condition variable? it's nothing particularly special","width":198},{"text":"it just allows our threads to go into a meditative state and not use any cpu until we wake it up","width":400},{"text":"but it's called a condition variable because we've put this inside the loop that tests for some condition","width":712},{"text":"so let's look at our little story here and see what we can do here","width":519},{"text":"there we go","width":193},{"text":"right so I've set up a typical little problem here that hey I've got a lot of data here it is","width":616},{"text":"a big array","width":188},{"text":"it's in global memory so that makes life easy","width":187},{"text":"and I've got a calculation I want to do on it","width":256},{"text":"fortunately I know about threads so I'm going to split my big array up here into chunks","width":680},{"text":"and if I've got two hundred and fifty six blocks why don't I split it up into sixteen chunks","width":917},{"text":"for my oops I'm just looking down here if my x so this is now x and this is now y, nevermind","width":553},{"text":"so my x values are going to be rather than one thread going from zero to two hundred and fifty five","width":648},{"text":"I'm going to get each thread to work independently on a segment of this matrix","width":477},{"text":"alright so if we have a look at this ","width":192},{"text":"this is what we've got here","width":108},{"text":"in my main I'm going to fire off N threads","width":385},{"text":"okay so we'll define N to be say sixteen","width":410},{"text":"wouldn't it be nice to have a sixteen core processor","width":160},{"text":"well you too can right now either just spend a lot of money or wait three years and it'll be easy","width":539},{"text":"so it'll be cheap","width":51},{"text":"so then we'll start say 16 threads","width":271},{"text":"I want to ask each one of them to do a chunk of the work","width":165},{"text":"one sixteenth of the total amount of work","width":302},{"text":"okay so great we've called pthread_create","width":340},{"text":"what's the first argument we pass into pthread_create?","width":430},{"text":"yes we are actually going to pass in the address of that","width":253},{"text":"the address of where we want pthread_create to store the the thread identifier","width":297},{"text":"so how do I write that","width":105},{"text":"I could say ampersand okay here's my little array and I want the i one","width":477},{"text":"that's probably the most readable way of writing that","width":192},{"text":"an equivalent would be to say ids + i","width":438},{"text":"is that true? so think about that or test it","width":1066},{"text":"part of it becomes what's the size of this","width":154},{"text":"what happens when you add to it","width":193},{"text":"I'm not going to write that today","width":84},{"text":"I'm going to go with this","width":69},{"text":"right so we've got the address of where we want to store that identifier","width":385},{"text":"we don't need to set any special parameters for our pthread_create","width":174},{"text":"we're going to pass in this calc function that actually does all the work for us and finally we say (void*) i","width":361},{"text":"right so what are we doing here we're taking that little integer and we're turning it into a pointer","width":320},{"text":"you can that in C, remember it's just a bit pattern being converted into a similar bit pattern but we're saying that the type of it should be treated as a (void *) pointer","width":704},{"text":"why do I that, that's because that's the argument type","width":192},{"text":"and that will be okay provided we don't actually try to follow that pointer into memory","width":320},{"text":"remember it's just a value 0 1 2 3 4 5 6 7 8 9 10 11 12 13 15","width":320},{"text":"okay so at the end of here I'm going to wait for my threads to finish","width":355},{"text":"okay so here I'm just going to call pthread_join and this time pass in the value of my little identifiers","width":623},{"text":"and I don't actually care about the exit value","width":287},{"text":"otherwise I could have passed in a pointer to a void * to grab that","width":294},{"text":"and then I would write some code to print out the result which I don't care about","width":192},{"text":"so that's the outside of my algorithm, start all these threads, off you go, sixteen people start doing your work","width":389},{"text":"I'm going to give each one of you a unique number and then wait for them to all finish by calling pthread_join","width":585},{"text":"now the main part of this puzzle starts","width":172},{"text":"okay we're going to write our little calc program","width":300},{"text":"we know that our pthread functions take a void* and return a void*","width":827},{"text":"so I've got some pointer, I don't actually want to use that variable as a pointer though","width":275},{"text":"I just want to cast it back into an integer","width":466},{"text":"so no memory lookups were used in this casting ","width":221},{"text":"it simply says hey I know you treat me as a pointer, I lied I just want to treat it as an integer","width":384},{"text":"and I went through those hoops just to make the compiler happy","width":421},{"text":"and I'm confident that a void* pointer can hold the integer between zero and fifteen","width":294},{"text":"right so that's going to be my starting point","width":169},{"text":"my end point exclusive would just be the starting point plus sixteen","width":295},{"text":"so now in my little loop x can go form the start almost to the end and my y is going to go through all of the remaining 8192 entries","width":772},{"text":"right and then I do my calculation","width":128},{"text":"that's going to take a while","width":84},{"text":"now you might say really all sixteen threads are going to run at the same time so they are all going to finish at the same time","width":407},{"text":"well that's not quite true","width":222},{"text":"it could be that one of these threads starts very very late","width":312},{"text":"it could be another thread starts completely earlier ","width":128},{"text":"it depends on how the operating system decides to schedule these threads","width":221},{"text":"it could be that a cpu is temporarily stolen to do some other work","width":280},{"text":"like process an interrupt because you pressed something on the keyboard","width":179},{"text":"something arrived on the network","width":105},{"text":"something arrived from the disk","width":75},{"text":"so you're not guaranteed to have the CPU for 100% of the time","width":265},{"text":"so we're not quite sure when all of these threads are going to finish","width":204},{"text":"so that's where we come in now","width":85},{"text":"we're going to try and write some code in here so that we can make sure that we don't continue the second calculation until all sixteen threads have finished","width":798},{"text":"so what are you going to do","width":153},{"text":"how are we going to solve this?","width":199},{"text":"what do we need?","width":442},{"text":"I need some ideas","width":318},{"text":"we could potentially do this with a semaphore","width":175},{"text":"kind of, what other ways could we do this though?","width":556},{"text":"okay yes we need some sort of global count variable","width":146},{"text":"just keep track of how many threads are currently running","width":269},{"text":"we're not going to try and directly query these threads","width":222},{"text":"we'll just have some sort of global variable that all the threads can decrement to say oh yeah I finished","width":668},{"text":"okay so up here we'll have an int remain and we can set that equal to sixteen","width":587},{"text":"or N if we want to","width":498},{"text":"so when I actually finish my work, each thread will decrement remain","width":950},{"text":"now notice what I just said","width":44},{"text":"when each thread finishes, it is going to decrement remain","width":161},{"text":"at this point, alarm bells should go off","width":328},{"text":"okay very quiet ones inside your head","width":192},{"text":"because I've just said that more than one thread is touching a data structure","width":320},{"text":"so there's a potential race condition","width":143},{"text":"two threads might decide to decrement remain at the same time","width":185},{"text":"whoops we don't want that","width":78},{"text":"we want each thread to have exclusive access to this remain","width":260},{"text":"when it's actually manipulating that","width":105},{"text":"so how do we ensure that happens","width":152},{"text":"yes bring out your mutex lock","width":456},{"text":"maybe it looks like a giant padlock or anyways nevermind","width":347},{"text":"so yeah we'll call pthread_mutex_lock on our mutex","width":640},{"text":"okay so this takes a pointer to that data structure","width":326},{"text":"at this point alarm bells go off and say oh hey did I actually remember to initialize the mutex","width":334},{"text":"and the answer is yes yeah you did if you actually managed to write the correct function","width":382},{"text":"these are pthread_mutex_init is one way to initialize your mutex lock","width":308},{"text":"right so if we do a lock, we know that any other thread that comes in here has to wait","width":459},{"text":"it could be then that those other threads that have not yet finished","width":490},{"text":"in which case the thread that is running this code ","width":169},{"text":"we want it to go to sleep","width":77},{"text":"okay well let's suppose I didn't know about condition variables","width":356},{"text":"then I might say something like while remain is greater than zero","width":504},{"text":"do nothing","width":250},{"text":"wohahahahaha we laugh at that code wohaahaha","width":171},{"text":"why? because we do know about condition variables, but why else?","width":501},{"text":"yeah the first thread that gets in there is just going to spin around","width":448},{"text":"and round and round and round it goes","width":145},{"text":"the second thread when it finishes will attempt to lock the mutex","width":289},{"text":"are you prepared to wait? yes i'm prepared to wait","width":171},{"text":"right then the second thread that finishes will get stuck inside pthread_mutex_lock","width":248},{"text":"waiting to lock that mutex, but we can see from this code that that mutex lock is never unlocked","width":313},{"text":"the second, third, fourth and fifth and the remaining fifteen threads will never get past pthread_mutex_lock","width":455},{"text":"because that mutex lock is never unlocked wohahahah","width":232},{"text":"alright so how can we start fixing this code","width":322},{"text":"well here's what we are going to do","width":79},{"text":"rather than just having a busy loop where we continuously burn up CPU time","width":298},{"text":"we are going to call pthread_condition_wait","width":561},{"text":"and for that you pass in your condition variable and pass in a pointer to your mutex lock","width":494},{"text":"and every good systems programmer knows that is when your thread meditates","width":410},{"text":"it goes to sleep","width":255},{"text":"but before it goes to sleep what happens?","width":310},{"text":"what do you get inside here?","width":194},{"text":"for free, what's it do for you?","width":207},{"text":"hint, we have to pass in the pointer to the mutex","width":166},{"text":"why? because it's going to unlock that mutex for you","width":287},{"text":"and then go to sleep","width":192},{"text":"alright so one of our threads arrived here early and said \"look remain is still non zero, I'm just going to sit here and chillax\"","width":783},{"text":"yeah i'm not going to do anything, I'm just going to go into my meditative state","width":384},{"text":"the very last thread, the sixteenth thread that comes in says \"oh look remain is finally zero, I don't need to sleep, I can continue!\"","width":835},{"text":"so I'll unlock and off we go","width":298},{"text":"and the sixteenth thread to arrive will then do the second calculation","width":347},{"text":"right so that's not a very good barrier right?","width":436},{"text":"what do we do? we wait until the sixteenth sheep finally arrives that was enough weight to tip the balance and the sixteenth sheep could continue","width":576},{"text":"and all the others are left there waiting, sleeping, yes?","width":319},{"text":"we'd like a way to wake up those meditating threads","width":354},{"text":"how do we do that?","width":214},{"text":"yes broadcast, we want to not just wake up one sleeping thread with a little bell, ding","width":615},{"text":"right, if you call pthread_condition_signal the system will choose one arbitrary sleeping thread and wake it up","width":713},{"text":"we don't want to do that, we want to wake up everybody","width":300},{"text":"so this is like running over to FARPAR and shouting free ice cream right? everybody comes over","width":545},{"text":"actually any free food at FARPAR will work but so","width":244},{"text":"how can we do this? well here's what we'll do","width":263},{"text":"inside our code, we need to call broadcast","width":346},{"text":"now I could do it even before the while loop here","width":371},{"text":"I could say \"okay pthread_condition_broadcast\" and here's the way we're going to wake up, anybody who is sleeping on this particular conditional variable","width":993},{"text":"now will this work? yes, here's what happens","width":297},{"text":"you wake up everybody in FARPAR and they check and discover that actually there is no ice cream so they just go back to sleep","width":530},{"text":"okay so that's a silly analogy, but what happens in the code is that we wake up everybody inside the condition wait and see look we wrote it inside a while loop","width":544},{"text":"so everybody wakes up, eventually they get to run on the CPU, and when they do they'll say \"oh look remain is actually still greater than zero\"","width":555},{"text":"so this code will keep waking up every time a thread gets to this point, it would run it","width":301},{"text":"so we could do a bit better than that","width":111},{"text":"we actually don't want to always wake people, we actually only want to call this when we know that if remain is now zero, actually bother to wake people up","width":1244},{"text":"alright so if I'm the last person in the gate, wake everybody up","width":271},{"text":"there's no point in waking other people up beforehand because they will simply check and discover that remain is actually still non zero and then just go back to sleep","width":601},{"text":"so that would work, it's just not that efficient","width":250},{"text":"this is more efficient, don't wake people up until remain is zero","width":575},{"text":"so that is a barrier, yes at the back?","width":809},{"text":"well the last thread will see the value of zero so you'll never actually go into this while loop","width":297},{"text":"yes I could have written it afterwards, it's still a good idea to do the broadcast inside the lock and unlock","width":643},{"text":"there's a subtle race condition we can get if we don't","width":373},{"text":"right and the other thing to remember is that condition wait actually does three things","width":369},{"text":"after being woken up from its deep sleep, before it returns, it waits to acquire the mutex lock again","width":635},{"text":"so that means you've woken people up but they won't actually start to execute this code","width":349},{"text":"they won't be checking the remain value until someone exits","width":326},{"text":"until someone unlocks the mutex","width":191},{"text":"so in this case the sixteenth thread will come in, see that remain is now zero, wake everyone up","width":322},{"text":"but now they've woken up but can't actually continue on this code yet because we're still holding the mutex lock","width":510},{"text":"so eventually we unlock and then another thread in here will say great!","width":257},{"text":"finally I've woken up and finally I've managed to lock the mutex thread and I can continue","width":266},{"text":"and what's it do? it just unlocks the mutex and continues","width":203},{"text":"and so on and so on for the remaining threads","width":265},{"text":"so this is really really powerful","width":128},{"text":"this is a very very powerful paradigm now because now you can make your threads do a whole lot of work, pause for each other, wait for each other and then continue to do more work, etc","width":575},{"text":"now you can write pretty good performant code in a way that you couldn't before","width":481},{"text":"okay any other questions?","width":173},{"text":"I'll give you a hint, I like to do things like show you code and say on an exam or quiz and say \"well okay does this actually work? is it efficient or not? or when might it break?\"","width":906},{"text":"so you could imagine for example if we only did signal here instead of broadcast, we'd only be waking up one thread","width":479},{"text":"and the other fourteen of them would still be sleeping","width":561},{"text":"aha right so when we come to test this, A will be compiled so let's fix what you said","width":581},{"text":"pthread_cond_t there we go and then when we come to test it, it doesn't work","width":611},{"text":"what did we forget to do?","width":128},{"text":"initialize it, yes! remember with these things, we've actually got two steps","width":343},{"text":"you've got to A. make some memory somewhere of enough size and B. actually call init on it","width":414},{"text":"so inside here we need to do pthread_cond_init and if we were writing robust code, that's a null as well, we would check the return values of these","width":1555}],
  // Part 2
  [{"text":"right, let's try this","width":153.18181824684143},{"text":"you should be able to write this code yourself","width":221.18181824684143},{"text":"and understand how it works","width":317.18181824684143},{"text":"now we're going to talk about the Reader-Writer problem","width":313.18181824684143},{"text":"the Reader-Writer problem crops up in all sort of places","width":467.18181824684143},{"text":"maybe in a web server, maybe in a database server and anytime you've got a data structure","width":483.18181824684143},{"text":"where you want to read it and update at the same time, you're probably going to run into the Reader-Writer problem","width":473.18181824684143},{"text":"so the problem is this","width":63.18181824684143},{"text":"I might have multiple threads that want to read from it","width":213.18181824684143},{"text":"and multiple threads that want to write to it","width":377.18181824684143},{"text":"if I've got a writer that is updating my data structure","width":375.18181824684143},{"text":"everybody else needs to wait","width":263.18181824684143},{"text":"I can't have two writers trying to change my data structure at the same time","width":247.18181824684143},{"text":"it's like two surgeons trying to do the cardiac stuff at the same time. it's not going to work","width":369.18181824684143},{"text":"it's going to end badly","width":73.18181824684143},{"text":"so we want to make sure that anytime we update data structure","width":289.18181824684143},{"text":"everybody else has to wait","width":147.18181824684143},{"text":"so if there's multiple writers waiting \"hey get in line, just one at a time please\"","width":363.18181824684143},{"text":"however, most of the time we don't actually need to update the data structure","width":245.18181824684143},{"text":"most of the time we want to allow our readers to read the data structure","width":273.18181824684143},{"text":"we want it to be efficient, in other words more than one reader can read the data structure at a time","width":644.1818182468414},{"text":"sounds easy, yes?","width":267.18181824684143},{"text":"the reader writer question is a popular question in internship interviews by the way","width":583.1818182468414},{"text":"let's have a look at some proposed solutions and see what happens","width":580.1818182468414},{"text":"and by the way, another thing you can expect in interviews is \"hey, what's the producer consumer problem?\"","width":653.1818182468414},{"text":"or \"how's it different?\"","width":183.18181824684143},{"text":"OK, so how is it different?","width":132.18181824684143},{"text":"first of all, the reader-writer problem is harder!","width":718.1818182468414},{"text":"the producer-consumer is just hey, I want to throw some stuff into this data structure and I want to pull some stuff out of the same data structure","width":493.18181824684143},{"text":"and if the data structure is full then you need to wait","width":230.18181824684143},{"text":"and if the data structure is empty then you can't pull anything from it and you need to wait","width":286.18181824684143},{"text":"and we can implement that with semaphores or conditional variables as well","width":277.18181824684143},{"text":"but we'll see that later","width":135.18181824684143},{"text":"the reader-writer problem I've got multiple readers running at the same time","width":448.18181824684143},{"text":"N readers, that's OK","width":521.1818182468414},{"text":"but I only expect one writer at a time","width":689.1818182468414},{"text":"anytime I've got a writer everyone else has to stand back, the readers aren't allowed to access the data structure either","width":419.18181824684143},{"text":"great, I've defined the problem. let's see if this code works","width":241.18181824684143},{"text":"here's some example code, perhaps you and your neighbor can figure out if it's any good","width":420.18181824684143},{"text":"or why it's no good","width":120.18181824684143},{"text":"[students working, long pause]","width":8933.181818246841},{"text":"OK, so let's talk about one kind of common gotcha here is","width":274.18181824684143},{"text":"I've been giving you examples where I've made p_threads, mutex locks and conditional variables just as global variables","width":336.18181824684143},{"text":"you don't have to do it that way, you could actually put them inside heap memory","width":240.18181824684143},{"text":"for example, if we called malloc, we might say \"now give me the size of a p_thread mutex pointer\"","width":617.1818182468414},{"text":"is that OK?","width":152.18181824684143},{"text":"no! I've just asked for the size of a pointer, that's going to be say 4 bytes on 32-bit system and 8 bytes on a 64-bit system","width":463.18181824684143},{"text":"I don't want that. I actually wanted the size of the data structure","width":263.18181824684143},{"text":"and unfortunately no one is going to tell you that you got it wrong","width":201.18181824684143},{"text":"it's just going to crash at some strange point in the future of the program","width":348.18181824684143},{"text":"so watch out for your asterisks ","width":133.18181824684143},{"text":"a pointer is not the same as the structure","width":183.18181824684143},{"text":"and good that we've initialized these things, presumably we have to make some more memory for the write lock as well","width":490.18181824684143},{"text":"how does this work? well anytime a thread wants to read, it first grabs the read lock and does reading stuff and when it's finished it unlocks","width":484.18181824684143},{"text":"how does the write work? anytime it wants to write it grabs the write lock, and it grabs the read lock! so it can only get through this stuff, it can only get to actually doing any writing, when it has both of these things","width":850.1818182468414},{"text":"so that means that no other writer can be writing at the same time, right?","width":233.18181824684143},{"text":"because I've got the lock and if I have the lock you that means you don't have it! You must be stuck inside the write lock","width":444.18181824684143},{"text":"so only one of us can actually do the writing","width":298.18181824684143},{"text":"this works great, yes?","width":63.18181824684143},{"text":"no, of course it doesn't, it's the first version!","width":341.18181824684143},{"text":"how is it broken?","width":439.18181824684143},{"text":"yes, our first problem is that only one person can read at a time. we wanted multiple readers to be able to use our data structure","width":707.1818182468414},{"text":"this is insufficient","width":258.18181824684143},{"text":"it fails in terms of allowing multiple readers","width":198.18181824684143},{"text":"it does a few good things though. it ensures that if a writer is writing then no one else can do anything","width":453.18181824684143},{"text":"so that seems pretty good","width":223.18181824684143},{"text":"let's have a go at version two","width":393.18181824684143},{"text":"and in this version we are going to have a couple of integers, which if they are on the stack I'd better set equal to zero","width":834.1818182468414},{"text":"and we'll keep track of how many people are really writing","width":668.1818182468414},{"text":"should read be locking write? it's not necessary","width":212.18181824684143},{"text":"the question is \"should the read method actually call write lock as well?\"","width":329.18181824684143},{"text":"it's not necessary because the write also grabs the read lock","width":385.18181824684143},{"text":"so the writer cannot continue whilst anyone actually has the read lock","width":654.1818182468414},{"text":"good question, thanks","width":151.18181824684143},{"text":"we'll keep track of this somehow","width":152.18181824684143},{"text":"whether reading or writing is actually happening","width":650.1818182468414},{"text":"what do you think of candidate two?","width":540.1818182468414},{"text":"is this any good?","width":63.18181824684143},{"text":"[long pause]","width":1641.1818182468414},{"text":"so you could be doing reading while writing","width":148.18181824684143},{"text":"OK, let's have a look at the logic that inspired this and then we'll see why it's broken","width":318.18181824684143},{"text":"so the logic behind this is trying to say, while someone is actually doing some writing, I'm not going to touch this. I'm going to wait","width":446.18181824684143},{"text":"so then we can carry on and I'm going to raise my little flag to say \"we're doing some reading\"","width":262.18181824684143},{"text":"and then I set reading to false","width":269.18181824684143},{"text":"what's the logic that I did behind the writing is to say ","width":153.18181824684143},{"text":"while anyone is reading or writing, just do a busy loop. we'll burn up some CPU","width":280.18181824684143},{"text":"nevermind that, CPUs are cheap","width":242.18181824684143},{"text":"and then when we get past here we'll raise my flag","width":201.18181824684143},{"text":"I've got writing to do. I'll do my writing stuff. I've raised the flag so anybody else will be stuck inside their busy loops","width":513.1818182468414},{"text":"because I've set the flag to true then the readers will be waiting and any writers will also be waiting inside their while loop","width":608.1818182468414},{"text":"the code is fine!","width":329.18181824684143},{"text":"what smells a bit? it's not fine!","width":313.18181824684143},{"text":"we've got race conditions, just like we saw with the critical section problem","width":251.18181824684143},{"text":"with these flags we might be setting the flags a bit late","width":316.18181824684143},{"text":"and what would happen if two readers came in?","width":492.18181824684143},{"text":"the first reader to finish reading would set the reading flag back down to false","width":305.18181824684143},{"text":"it would look like no one is reading","width":427.18181824684143},{"text":"you could imagine two writers coming in","width":210.18181824684143},{"text":"both writing threads would see that reading and writing are zero or false","width":308.18181824684143},{"text":"and so we'll continue. oops! we've got a race condition","width":299.18181824684143},{"text":"so we're not doing very well here","width":353.18181824684143},{"text":"we're not checking our variables in a careful enough way","width":404.18181824684143},{"text":"and we're allowing readers to happen a the same time as writers","width":326.18181824684143},{"text":"I could imagine a reader and writer coming in at the same time and they both get past their while loops because neither of the flags are set yet","width":515.1818182468414},{"text":"because they are set later","width":119.18181824684143},{"text":"so if the two while loops happen at the same time, whoops! we've allowed both a reader and a write access to the data structure","width":442.18181824684143},{"text":"so this is no good, but don't worry, we've got a solution for you!","width":303.18181824684143}],
  // Part 3
  [{"text":"Let's see. I've heard the uiuc students are incredibly bright. Yes, they know how to party, but I've heard that you're really really bright","width":1170},{"text":"so let's see if you can actually solve this problem","width":273},{"text":"yes you're going to need some sort of flags or counters","width":533},{"text":"to keep track","width":377},{"text":"and rather than set them to one or zero","width":141},{"text":"we should add and subtract as people come in and want to read","width":308},{"text":"and I'll give you a clue: you're going to need some mutex locks","width":361},{"text":"at least one lock","width":102},{"text":"and some condition variables","width":1269},{"text":"we can start with one condition. let's do one condition variable","width":396},{"text":"you can add more if you want","width":93},{"text":"see if you can get something to kind of work with those","width":14756},{"text":"alright, let's have a go at grading the solution here","width":136},{"text":"I'm not gonna do the complete solution today","width":186},{"text":"I'm just trying to do this in stages","width":108},{"text":"we've seen two broken ones, I'm now going to try and write something which is a little less broken","width":371},{"text":"towards a complete solution","width":252},{"text":"we're going to be touching these variables so I'm going to use locks to make sure that when we access the values, it's actually read/written by one process at a time","width":935},{"text":"so now in reader, what we'll do is we'll see if we've got any writers trying to do anything","width":612},{"text":"then I want to wait","width":182},{"text":"but rather than having a busy loop, I'm going to meditate","width":263},{"text":"here we go, condition wait","width":196},{"text":"and I'll go to sleep","width":182},{"text":"so, if I come out of that, I'll check to see if there's any writers","width":157},{"text":"and if there are, then I'll go back to sleep again","width":392},{"text":"alright, before doing anything, I'm going to increment my little counter here. the number of readers has now gone up by one","width":591},{"text":"and then I can actually access the data structures so I'll do my reading here","width":469},{"text":"then I'll declare that \"hey! I finished! hey, there's no more readers\"","width":439},{"text":"and I can unlock","width":282},{"text":"the mutex","width":206},{"text":"yes, I can see that we've only going to actually allow one reader at a time, but trust me, for now this is a good stepping stone to a more complete solution","width":614},{"text":"what about the writers?","width":229},{"text":"well, they need to wait while there's any readers  (so any readers greaters than zero) or any writer greater than zero","width":573},{"text":"we want our writer to sleep","width":206},{"text":"great, I know a fantastic way to do that. let's call my cond_wait and pass in the pointer to the condition variable and a pointer to the mutex","width":625},{"text":"so we can only get out of this little loop once there's no other readers and no other writers","width":509},{"text":"before doing the writing, I'm going to increment my write count, then I'll do the writing","width":560},{"text":"afterwards, I'll decrement my write count and I'll unlock the mutex","width":1229},{"text":"I've got my readers and writers sleeping. if they are unable to continue, they'll sleep. we never wake them up.","width":674},{"text":"we....probably want to wake them up occasionally, yes?","width":393},{"text":"we could try to be clever when we should bash the gong","width":304},{"text":"when should we wake everybody up","width":132},{"text":"but I'm not going to do that right now","width":102},{"text":"I'm just going to put the code in down here that says \"well look, if I finish writing, maybe there's another writer waiting\"","width":596},{"text":"so hey, let me bash the gong here","width":157},{"text":"so pthread_cond_broadcast","width":542},{"text":"wake everybody up!","width":489},{"text":"alright, so, anybody that's sleeping, hey! wake up and check your condition, check your invariant, check the loop that you're inside","width":446},{"text":"do I need to do the same inside the read call as well?","width":1438},{"text":"so if there's a writer that is waiting, we should call p_cond_signal. could it be that I've got new readers in here?","width":1227},{"text":"cuz they might get the signal instead","width":104},{"text":"you can say \"okay! that's fine!\" or you might say \"actually that's impossible\" and never happen. even if it's impossible, they still end up signaling someone, so I could either call signal or broadcast here","width":1060},{"text":"so that's my next attempt. what do you think of it?","width":397},{"text":"it's better than the busy wait we saw a moment ago, but, what?","width":403},{"text":"thank you! right now, we've still got the problem of only one thread can actually do the reading because we lock the mutex.","width":470},{"text":"okay, we're going to have to fix that. other problems with it?","width":1305},{"text":"okay, so you're worried about mutual exclusion. actually, the beautiful thing is that our while loop will be checked each time and because we've got locks here, we can reason abotu this much more simply.","width":894},{"text":"because we locked this, we know that only one thread at a time can ever be executing inside this critical section, inside this code that we've written","width":1123},{"text":"hold on, I see what you're saying. but we're only incrementing the reader afterwards","width":275},{"text":"yeah, it's easy to see that initially, but remember we're going to wake these writers up but they don't actually check the values of r and w until","width":849},{"text":"we unlock the mutex","width":166},{"text":"okay so they're ready to go, they're about to run, but they don't get to return from this condition wait until we say so","width":493},{"text":"so they can only see a decremented version of the reader","width":635},{"text":"right so, we're heading towards a good solution but we've got more work to do","width":436},{"text":"one problem you might think about is, what would happen if I had a lot of readers?","width":539},{"text":"the poor writer is stuck! it never gets to change the data structure. readers barge in there and our read count never goes to zero","width":803},{"text":"so remember this magic saying called \"bounded wait\"?","width":230},{"text":"which is about, don't let the small kids just run in front of you?","width":297},{"text":"if you've been waiting, there should be a finite number of other processes to allow to continue before you get a fair chance","width":463},{"text":"we haven't succeeded in that yet either","width":210},{"text":"but anyways, this is towards a good solution","width":211},{"text":"so now, I need to change topic because first of all, you have a quiz on friday!","width":300},{"text":"woohoo!","width":63},{"text":"it's about memory allocation","width":276},{"text":"you can expect these kinds of questions!","width":225},{"text":"alright, does code data heap and stacks inside your memory?","width":372},{"text":"you know how to use pthread, and pthread_exit, and pthread_join and what the differences between pthread_exit and pthread_join","width":403},{"text":"you know what free(NULL) does. answer: nothing","width":274},{"text":"pthread_create succeeds, what does it return, zero, you get the id by giving it a pointer instead","width":350},{"text":"can you use a function that's not thread safe in a multithreaded program?","width":342},{"text":"what the answer? yes you can, but you've got to make sure only one thread at a time accesses it","width":570},{"text":"gosh, when do you knew about pthread_mutex_lock","width":164},{"text":"so yes you can, but you have to be careful","width":409},{"text":"pthread join man, okay, so enough about pthread_join","width":275},{"text":"boundary tags, oh yes! here's a memory allocator that we did not talk about in lecture","width":332},{"text":"but rather than making allocations the size that the user requests, we can have chunks which are 2^n sizes","width":972},{"text":"so if I have a pool of a 1024 bytes, we can split that into two allocations of 512, for example","width":657},{"text":"or I can split this 512 into two allocations of 256","width":341},{"text":"so if I keep my chunks at sizes 2^n","width":354},{"text":"then I can very quickly and efficiently find an allocation of the correct size","width":636},{"text":"so, for example, if I wanted 65 byte allocations, I would end up using allocations of 128 bytes","width":899},{"text":"and so, if I had 1024 bytes to play with, I could make eight of those allocations","width":375},{"text":"so you can see that this kind of allocator, which by the way is called the buddy allocator, suffers strongly from fragmentation","width":651},{"text":"I'm going to give you a block of 128 bytes, but you're only going to use 65 bytes of it","width":563},{"text":"so it can end up having a great bit of a unnecessary space, but the good news is that it's very very fast to find a free block of sufficient size","width":956},{"text":"implicit and explicit free lists? you've seen this now in the MP contest that we can have a separate list of free blocks","width":659},{"text":"so it's much much quicker to find a free block rather than scanning through a linked list of all free and allocated blocks, why not have a second linked list which only contains the free entries?","width":1038},{"text":"so that's an explicit free list","width":141},{"text":"and if we do that, we can put it inside the unused space","width":664},{"text":"okay so you know about first fit and worst fit and how they work","width":484},{"text":"and you know what malloc() and calloc() do if they can't return the request.","width":306},{"text":"alright good, I have a moment left","width":254},{"text":"good news and bad news. I've got some sad news for you in a sense. monday and wednesday, I'm going to be in california","width":802},{"text":"so, robin is going to be taking this lecture slot. and she's going to be talking about some 241 content","width":458},{"text":"you're in safe hands. she's taught this course before","width":176},{"text":"I'm talking about andriod mook and representing illinois at the coursera partners conference","width":471},{"text":"this course, which ran in december 2013, we the largest ever course by illinois","width":370},{"text":"at 143,000 people signed up. we've since had 200,000 people sign up","width":325}],

  // Start Lecture Video 12 (QUIZ NO CAPTIONS)

  // Start Lecture Video 13
  // Part 0
  [{"text":"...","width":10883},{"text":"Good morning! If some of you don't know who  I am, I'm Robin Kravets. I'm a professor in the CS department. I have taught CS241 many times in the past although Lawrence Angrave has taken over and I don't get to torture you guys anymore. So it's not as much fun anymore. But he is out having fun in warm sunny California for the next two classes which means you are stuck with me. For better or worse","width":2066},{"text":"Anyway, he gave me all the information to teach you guys. I didn't even have to give you the quiz that was done already. So we are going to focus today on some of the synchronization problems that he started on. ","width":924},{"text":"And get through hopefully deadlock on Wednesday. ","width":292},{"text":"So he left you talking about the reader-writer problems, producer-consumer problems, and one of the things that was assumed was that to make these entities talk to each other that there is some shared space between them. And I don't think there was any restrictions put on how he told you what this space would be. So in the best of all worlds we might just have an infinite buffer where we have somebody put some data in on one side and somebody taking it out on the other side and I could infinitely put in as much data as I want and take out as much data as was put in","width":3243},{"text":"But in reality we know that infinity is never infinity. We can't implement infinity in a system","width":598},{"text":"So what we want to talk about today is understand what kind  of data structures and what kind of resources we can use to implement these shared data applications.","width":749},{"text":"So where one application is writing into a buffer and another application is reading from a buffer.","width":340},{"text":"...","width":5088},{"text":"So if we're dealing with entities where we have a producer and a consumer ","width":990},{"text":"And they are putting data into some buffer and the consumer is taking data out of there. What kind of limitations do we have if we're going to implement in this way? What's the first thing?","width":1783},{"text":"Well at some point once I've filled up the queue I can only take things out as fast as the consumer is consuming them","width":544},{"text":"Vice versa I can only consume as fast as they're produced. But this is not an infinite buffer","width":461},{"text":"So what happens is the producer puts something in and puts a couple of things in and now the consumer is going to take them out","width":1207},{"text":"And we put some more things in","width":312},{"text":"Now I want to put something else in. What do I do?","width":227},{"text":"I've hit the end of my buffer","width":417},{"text":"We can rotate around and wrap","width":197},{"text":"So let's let the producer now say let's go all the way back there and I can put my next thing in here","width":576}],
  // Part 1
  [{"text":"you can think of this buffer as something that we call a ring buffer","width":720},{"text":"where it's not you've kind of taken the two ends of the buffer that we're using and connected them on the other side","width":567},{"text":"so now i need to be able to put things in and take them out and i could just chase my own tail forever and never worry about running off the end","width":691},{"text":"so conceptually theres a number of things that i have to have to make this work","width":382},{"text":"so if i'm the producer what do i need to know","width":558},{"text":"what does the producer need to know","width":309},{"text":"the producer is putting things in","width":404},{"text":"it needs to be able to hit that","width":71},{"text":"so the producer","width":167},{"text":"what i filled up my ring","width":193},{"text":"ok so lets say im starting from nothing and the producer wants to put something in","width":295},{"text":"what's the first thing it needs to know","width":204},{"text":"where to put it!","width":61},{"text":"okay so let's have a pointer in here that says okay in","width":457},{"text":"im going to put it in there","width":83},{"text":"i just started some place random","width":111},{"text":"if i was smart my underlying data structure might have started right there","width":360},{"text":"yeah i wouldve wrapped the two ends","width":140},{"text":"okay so now that the producer has put something in","width":283},{"text":"what does the producer have to do","width":395},{"text":"it can't n isn't write anymore","width":181},{"text":"right you have to increment in","width":180},{"text":"to now point here","width":165},{"text":"that's where my next one would be","width":238},{"text":"so that's my producer","width":245},{"text":"what did my consumer need to know","width":239},{"text":"ill tell you it's out","width":206},{"text":"a pointer to what","width":264},{"text":"the first one that i want to take out","width":124},{"text":"so in this case it's here","width":100},{"text":"i'll make the consumer blue","width":466},{"text":"and as the consumer puts things in here, it's gonna slowly increment in","width":514},{"text":"to be there","width":190},{"text":"and as the consumer takes things out","width":460},{"text":"it will","width":98},{"text":"delete them out of the queue, out of the ring buffer althoguh i guess it really doens't matter and that's the next one to take out","width":614},{"text":"so there are two things i have to be careful about","width":104},{"text":"whats the first thing that you said before","width":131},{"text":"that i have to make sure that i dont what?","width":287},{"text":"i want to make sure that i don't overwrite data that hasn't been read yet","width":318},{"text":"my writers write, my producer is producing","width":227},{"text":"this is a big ring buffer","width":145},{"text":"i should've a smaller one","width":105},{"text":"okay i'm putting things in","width":186},{"text":"do i have to stop yet? no","width":190},{"text":"i can stop here","width":101},{"text":"but","width":118},{"text":"can i keep going?","width":113},{"text":"no","width":43},{"text":"i have to make sure i dont whoops that's in","width":189},{"text":"i have to make sure i dont overflow my buffers","width":475},{"text":"and now for the output","width":293},{"text":"for the consumer the consumer is going to start taking things out","width":552},{"text":"let's say it gets here","width":132},{"text":"it can still take that out","width":156},{"text":"but now it takes that last one out","width":378},{"text":"and now my out is here","width":121},{"text":"can it take anything out anymore?","width":155},{"text":"no","width":42},{"text":"if i allowed, if my program allowed the consumer to take something out at this point i would call that underflow","width":449},{"text":"overflow means that the producer produces too much and overwrites good data","width":295},{"text":"underflow means that my consumer is trying to take out something that's not there","width":313},{"text":"so those are two things we wnat to make sure don't happen we we're implementing a ring buffer","width":391},{"text":"so theres no underflow, and there's no overflow","width":406},{"text":"now i know you guys have done semaphores and you guys have done condition variables","width":280},{"text":"we're going to implement a solution for a ring buffer","width":192},{"text":"and of course we have a number of properties that we want to be able to have true for this solution and","width":385},{"text":"to start with we dont want any particular busy waiting","width":258},{"text":"so we want to make sure that our semaphores and condition variables are set up correctly","width":347},{"text":"and we dont have to have any kind of deadlock","width":244},{"text":"i know you guys haven't talked specifically about what deadlock means, but at a minimum it's going to mean that someone can't move forward","width":567},{"text":"so we want to be able to look at both of these things","width":199},{"text":"we want to implement a solution that can do that","width":320},{"text":"our first solution im going to give you my basic solution","width":463},{"text":"and from there","width":212},{"text":"i've been told you guys like to sit down and come up with your own solutions","width":2167},{"text":"so i'm going to give you a basic first start","width":212},{"text":"so certainly whats the first thing that we need in our globals and initilazliation variables","width":492},{"text":"what are we trying to manage","width":296},{"text":"our buffer! right?","width":95},{"text":"so we need a buffer","width":126},{"text":"so i'm going to have a ","width":524},{"text":"and im gonna say im just going to have a 16 alright","width":391},{"text":"and then i need our two variables. what were the two variables i said we needed?","width":400},{"text":"in and out","width":82},{"text":"so since they are just pointers into my data structure","width":303},{"text":"they can just be integers","width":130},{"text":"im going to have an integer in and and integer out","width":483},{"text":"where should they both start","width":512},{"text":"they start at the same place? they start at diferent places?","width":138},{"text":"they start at 0?","width":71},{"text":"what should we do","width":169},{"text":"0","width":155},{"text":"we're going to initialize both in and out to be 0","width":578},{"text":"so i'm going to give you a basic in queue and i want you to tell me if this works","width":236},{"text":"so i'm going to say for my enqueue im goign to put something in","width":798},{"text":"im going to put my value in whatever the in value is and increment in","width":562},{"text":"and my dequeue is im going to say that i have some result","width":341},{"text":"im going to save out my result becasue i want to use it later","width":192}],
  // Part 2
  [{"text":"uhhh","width":489},{"text":"and that's going to equal my data","width":285},{"text":"sub out","width":31},{"text":"i gotta increment my out too","width":111},{"text":"plus plus","width":180},{"text":"++","width":3},{"text":"and then i can return","width":353},{"text":"result","width":326},{"text":"so there's my solution","width":200},{"text":"very basic solution","width":163},{"text":"you guys take one or two minutes talk to your neighbors figure out what's wrong with this and how you would fix it","width":5925},{"text":"are you ready?","width":201},{"text":"ok what's the first thing wrong with this?","width":249},{"text":"or what's something wrong with this?","width":224},{"text":"i'm not checking what?","width":157},{"text":"i'm not checking the equality of in and out","width":140},{"text":"why do in and out have to be equal?","width":265},{"text":"oh i don't want to be equal","width":66},{"text":"whats going to happen if i do that?","width":269},{"text":"yeah i'm going to try to remove data that's not there if they are equal","width":225},{"text":"what else aren't i doing?","width":497},{"text":"if not if ","width":172},{"text":"so if in equals 16 or more ","width":167},{"text":"it's not that i'm overflowing, ","width":60},{"text":"what am i doing?","width":150},{"text":"i'm overwriting what","width":232},{"text":"no what happens if in == 16?","width":517},{"text":"so what's going to happen if in == 16?","width":185},{"text":"not the answer","width":154},{"text":"how big is my buffer?","width":152},{"text":"yeah, well 16","width":85},{"text":"0 to 15","width":52},{"text":"if i write","width":107},{"text":"data[16] i am going to smash somebody's memory","width":259},{"text":"so not good","width":101},{"text":"so the solution was to what","width":203},{"text":"mod","width":74},{"text":"what else could i do?","width":160},{"text":"ok so i could mod, wait wait let me write that down","width":192},{"text":"i'm going to mod it","width":330},{"text":"so what if i do","width":53},{"text":"i'm going to change this","width":153},{"text":"to say","width":120},{"text":"uh","width":344},{"text":"data[(in++) % 16]","width":781},{"text":"","width":3},{"text":"is that going to work?","width":916},{"text":"ok don't worry about the overwriting for a second","width":124},{"text":"is this going to help with my wrapping?","width":279},{"text":"is this a good solution to fixing my wrapping?","width":313},{"text":"there's one minor problem which is not so minor about this","width":196},{"text":"it'll work","width":112},{"text":"yeah","width":555},{"text":"it's going to work for a while","width":199},{"text":"and after a while what's going to happen?","width":303},{"text":"my integer's going to overflow","width":83},{"text":"actually my integer is not going to overflow","width":108},{"text":"it's just going to go negative","width":159},{"text":"and mod , if i understand correctly, can preserve the negative value","width":454},{"text":"so you're now going to get a data sub minus something","width":235},{"text":"accessing bad data ","width":127},{"text":"or just crashing","width":112},{"text":"i don't even know what the system's going to do if you put a negative value in your array","width":398},{"text":"so not the ","width":118},{"text":"it's the right idea","width":104},{"text":"you could actually be must simpler and just say","width":932},{"text":"ok","width":96},{"text":"that works too","width":142},{"text":"when i'm done","width":103},{"text":"so don't do this","width":647},{"text":"you could also if you really wanted to say n = n mod 16","width":250},{"text":"that'll work too","width":112},{"text":"but that's not even that necesasry","width":133},{"text":"you only  have to change it if it is 16","width":439},{"text":"and i have to do the same for what?","width":154},{"text":"","width":0},{"text":"for out","width":65},{"text":"so not going to write that but i have to do the same for out","width":656},{"text":"so","width":195},{"text":"we've already hit on a bunch of problems that has to do with this. and the problem is all the overwriting and","width":511},{"text":"that uh we're not being careful about wha'ts going on","width":213},{"text":"and really the challenge here is there's no synchronization","width":303},{"text":"","width":2},{"text":"i'm not synchrnoizing my readers and writers","width":444},{"text":"reader writer producer consumer enqueue dequeue","width":205},{"text":"all of the same idea basically","width":136},{"text":"what if i call enqueue twice at the same time","width":284},{"text":"is there any safety there?","width":110},{"text":"","width":2},{"text":"no","width":34},{"text":"what if i call enqeueu and dequeue at the same time","width":183},{"text":"is there any safety there?","width":100},{"text":"no","width":43},{"text":"so let's assume that ","width":218},{"text":"we use this code","width":146},{"text":"for the actual functionality for the enqueue and dequeue","width":245},{"text":"and let's add some synchronization to it so that we can protect the data from overflow","width":417},{"text":"from underflow","width":104},{"text":"and from the synchronization problem of two nodes trying to put something in the qeueue at the same time and overwriting each other","width":575},{"text":"so we have to be careful we have to make sure that ","width":220},{"text":"only one node ony one enqueue can write into the ring buffer at the same time","width":488},{"text":"i'm teaching networking this semester so if i say node just ignore me","width":256}],
  // Part 3
  [{"text":"gets in your brain Ok","width":151},{"text":"Solution No2","width":270},{"text":"Get that up there","width":102},{"text":"Okay!!","width":129},{"text":"I'm gonna tell you what we've got here. we've added semphores and locks","width":729},{"text":"I have two sempahores, S1 and S2","width":256},{"text":"S1 represents my spaces","width":312},{"text":"in my ring buffer","width":164},{"text":"and S2 represents the number of items the i've put in my ring buffer","width":428},{"text":"if you think about it","width":94},{"text":"If i have space, i can put things in it","width":142},{"text":"if i have items in my queue i can take things out. so, that's good. I can go initialize them and move on. so now, you guys have done semaphores, right?","width":887},{"text":"what happens to a semaphore when you do sem_wait?","width":304},{"text":"","width":2},{"text":"What does it do to the value of the sempahore","width":622},{"text":"oh did you guys talk about counting semphores?","width":232},{"text":"YEAH!!!","width":55},{"text":"if you noticed that we initialized one of these to 16 and one of these to 0","width":225},{"text":"these are counting semphores","width":108},{"text":"not just mutexes","width":146},{"text":"counting semaphores","width":90},{"text":"if i initalized it to 16, what can i do","width":245},{"text":"i can call sem_wait ","width":105},{"text":"how many times?","width":101},{"text":"15 ","width":44},{"text":"and I can call sem_post ","width":141},{"text":"if i'm starting sem_pos 16 times.","width":227},{"text":"so what it's doing is it's giving me this ability to call sem_wait, m_queue 16 times","width":396},{"text":"or dequeue 16 items","width":127},{"text":"in and of itself that's not enough to make sure I don't break my system, but that's gonna be my counters to help me decide","width":374},{"text":"how many items i have, and how many spaces i have","width":223},{"text":"So my sem_wait on this one is gonna try to decrement ","width":464},{"text":"and sem_post, increment","width":360},{"text":"sem_wait increment","width":333},{"text":"Sorry","width":64},{"text":"backwards","width":113},{"text":"decrements","width":120},{"text":"sem_post","width":126},{"text":"increments","width":195},{"text":"so take a minute and look at this, and I can tell you this doesn't work","width":442},{"text":"maybe you can tell me why. Talk to you neighbors","width":1567},{"text":"say that one more time","width":466},{"text":"Yes","width":275},{"text":"So i have initialized it to 0 but my max is 16","width":634},{"text":"s2, i've initialized it to 0 with a max of 0","width":778},{"text":"Let me double check the actual interface of Sem_wait while you're looking at this","width":3355},{"text":"Sorry, i take that back. Ignore the first zero","width":288},{"text":"so, S1 is the semaphore, the zero is just whether or not it's shared across processes","width":488},{"text":"S1 is initalized to 16 and S2 to 0","width":4536},{"text":"Obviously I should not be writing code to make airplanes fly because they're going to fall out of the sky [something]. What's wrong?","width":696},{"text":"Yeah?","width":476},{"text":"so we're calling sem_wait and sem_post on the same sempahore","width":594},{"text":"my values are gonna change","width":337},{"text":"i'm gonna decrement and increment it right away","width":194},{"text":"and, how is that gonna implement my, how is that going to affect, write my dequeue","width":698},{"text":"yeah?","width":498},{"text":"so i'm going to call sem_wait on s1, which initialized to 16, that's good I have 16 spaces","width":484},{"text":"I'm gonna put something in. I'm gonno do sem_post and that's gonna increment it, and im gonna be forever be able to put things in","width":576}],
  // Part 4
  [{"text":"yeah, I've got this really wrong. alright, so my dequeue, is calling S2. what was S2 intialized to ? 0","width":1078},{"text":"which is Okay, there's nothing in there","width":247},{"text":"but","width":45},{"text":"i'm never changing it so I'm never going to put anything in there","width":172},{"text":"so i'm waiting forever","width":165},{"text":"my dequeue is never getting into anything","width":102},{"text":"and my enqueue is gonan run on forever","width":198},{"text":"so if we look at our requirements","width":215},{"text":"one of the things we asked for is that have we stopped overflow from happening","width":490},{"text":"is there overflow in this example? potential for overflow?","width":503},{"text":"what was the definition of overflow","width":479},{"text":"overwriting good data with something i'm trying to put in","width":264},{"text":"do we have overflow here? Yes, because the writer is going around writing writing and writing","width":439},{"text":"do you have underflow? Not really","width":253},{"text":"Why not?","width":129},{"text":"yes because dequeue can never really take out anything","width":162},{"text":"so you can really have underflow if you can't take anything out","width":189},{"text":"so this didn't work","width":122},{"text":"what else did I want to say about this","width":316},{"text":"do we have a race condition?","width":214},{"text":"is there any race conditions in here?","width":306},{"text":"no ","width":20},{"text":"why not?","width":242},{"text":"we've got our locks. So we can only have one enqueue in there at the same time","width":347},{"text":"and our dequeue is never going anywhere so it doesn't really matter","width":412},{"text":"actually it's gonna acquire the lock and it's gonna wait, and it's gonna block everybody from doing anything","width":486},{"text":"once anyone trying to call enqueue, the whole system is gonna come to a standstill","width":359},{"text":"so, we do have a deadlock. it's not a race condition but we've got deadlock","width":386},{"text":"and we'll talk more about deadlock on wednesday","width":194},{"text":"ok so, lets' move on","width":968},{"text":"we still have s1 and s2","width":142},{"text":"still initialized to 16 and 0","width":114},{"text":"so this is still spaces","width":238},{"text":"and this is still items","width":224},{"text":"what are the problems that you might noticed before from our prior one","width":547},{"text":"no matter what the enqueue did, it only affected S1","width":393},{"text":"and no matter what the dequeue did, it only affected S2","width":241},{"text":"so there was no coordination between the Enqueue and the Dequeue","width":258},{"text":"so i need to be able to tell the reader the dequeue that there's something to take out","width":499},{"text":"so for my next solution, i've mixed it up a bit","width":282},{"text":"so now i do a sem_wait on s2","width":443},{"text":"and a sem_post on s1","width":144},{"text":"and a sem_wait on S1 and a sem_post on s2","width":483},{"text":"did that work","width":2687},{"text":"Okay did i fix my problem?","width":276},{"text":"No oh","width":99},{"text":"ok, what did i do this time","width":352},{"text":"only dequeue could work this time","width":217},{"text":"why can't enqueue work","width":289},{"text":"S2 is always 0","width":122},{"text":"so i'm starting on calling S2. I try to decrement it, and I've got a problem","width":464},{"text":"I did fix one of my other problems though","width":126},{"text":"did you notice what I switched?","width":253},{"text":"i switched the order of the sem_wait and the lock","width":360},{"text":"i' dont actually acquire the semaphore until the semaphore is released","width":225},{"text":"and that is very important","width":138},{"text":"because if I acquire the lock and I wait for the semaphore to be released","width":404},{"text":"but somebody is not gonna released the semaphore unless they've got the lock.","width":189},{"text":"i've created a bad problem called deadlock","width":277},{"text":"that fixed that a little bit","width":448},{"text":"Okay","width":90},{"text":"so the problem here was This one starts at zero, right?","width":652},{"text":"so whenever I call sem_wait on it","width":99},{"text":"it's just gonna block","width":476},{"text":"what about this guy","width":98},{"text":"Do i have overflow?","width":347},{"text":"Do I have undeflow? Why?","width":380},{"text":"Here","width":34},{"text":"what does S1 start at?","width":261},{"text":"it starts at 16","width":179},{"text":"my first call to dequeue is gonna do a sem_wait on S1 and its' gonna say ","width":347},{"text":"\"Oh! Cool, it was 16 now, it's 15 here, so there' nothing really in there\"","width":433},{"text":"so i've given you some steps on how you would do this, i want you guys to implement your own","width":870},{"text":"i can tell you that you can do it with those variables","width":237},{"text":"figure out what you want the variables to be initialized to ","width":244},{"text":"and how to implement your enqueue and dequeue","width":303},{"text":"so it's only a couple of lines of code don't make it too complex","width":4626},{"text":"Yeah?","width":4544}],
  // Part 5
  [{"text":"but the way you build your code will stop that from happening","width":2125},{"text":"are you getting close?","width":1442},{"text":"okay I'm hearing the mumbling die down you guys ready","width":273},{"text":"anybody have a solution for me","width":679},{"text":"what's the sequence for enqueue","width":502},{"text":"okay I'm going to do the same way on s1","width":377},{"text":"why s1","width":269},{"text":"cause I have sixteen spaces and i want to wait if there are no spaces available","width":317},{"text":"so what do I initialize s1 to","width":163},{"text":"sixteen","width":136},{"text":"then what do i do","width":165},{"text":"lock","width":281},{"text":"what happens if i switch these two","width":163},{"text":"the order of those two","width":291},{"text":"okay I'm going have","width":67},{"text":"I'm breaking my synchronization I'll ask that again when we're done","width":170},{"text":"so then I do my enqueue","width":298},{"text":"how do I finish up?","width":162},{"text":"sorry?","width":139},{"text":"what should I do next?","width":334},{"text":"sorry?","width":134},{"text":"post ","width":301},{"text":"and then what? ","width":107},{"text":"unlock","width":373},{"text":"okay?","width":94},{"text":"what happens if uh is that the right order for those two?","width":510},{"text":"so he says he thinks the lock should be first","width":129},{"text":"why should the lock be first?","width":396},{"text":"you can let somebody else come in","width":99},{"text":"really you want your lock critical section ","width":329},{"text":"lock as tight as possible","width":238},{"text":"and then do other things outside that to manage your synchronization","width":269},{"text":"because you it's not going to be that bad for this small example","width":268},{"text":"but if you don't unlock until you do some other things","width":226},{"text":"you're locking somebody else out","width":103},{"text":"okay so if you release the lock before the post","width":284},{"text":"somebody else could come in and could be waiting right here","width":422},{"text":"remember because I got multiple readers can come past the wait","width":258},{"text":"up to sixteen if it's empty","width":218},{"text":"and then they all wait on the lock because only one is allowed in the critical section at the same time","width":431},{"text":"and then they're out","width":81},{"text":"once I step out of this","width":154},{"text":"the next one can acquire the lock and change something","width":213},{"text":"before the post happens","width":269},{"text":"so for the small pieces of code it's not really and issue","width":197},{"text":"but, for larger things you want to be careful","width":149},{"text":"okay so what's my dequeue","width":114},{"text":"so it's not a correctness issue it's a performance issue","width":206},{"text":"so what do i write for my dequeue","width":288},{"text":"wait on s2","width":53},{"text":"what's my additional value of s2","width":194},{"text":"zero because I have nothing in there","width":128},{"text":"and then I do what","width":116},{"text":"lock","width":180},{"text":"and then i do my dequeue","width":207},{"text":"then what do i do?","width":97},{"text":"unlock same reason","width":189},{"text":"and post which one?","width":219},{"text":"s1","width":149},{"text":"why does this work?","width":186},{"text":"I mean if you talk about this if you look at it right?","width":289},{"text":"the first thing is I'm coming in","width":247},{"text":"I'm saying are there any spaces","width":133},{"text":"if there's spaces I can put something in","width":212},{"text":"and now I'm telling the dequeue that I finished putting something in and now there's some items","width":513},{"text":"so same thing here","width":83},{"text":"I'm checking to see if there's any items","width":262},{"text":"and when I done I'm letting the enqueue know that there is more space if it was waiting for space","width":636},{"text":"so the key here is that the communication between the two","width":357},{"text":"is this crossover between s1 and s2","width":197},{"text":"our initial answer remember had just s1 on one side and s2 on the otherside","width":237},{"text":"there was no communication between the two to let them know that there was things changing","width":269},{"text":"and then our other answer just had them backwards","width":1457},{"text":"again if I unlock and then post","width":368},{"text":"alright first is somebody could be waiting on that lock","width":313},{"text":"the post just means somebody's waiting to know if there's more items","width":272},{"text":"the unlock says there's somebody waiting to get into the critical section","width":537},{"text":"but let's say there are five items in here right","width":303},{"text":"we'll say there's five items and I've called dequeue","width":336},{"text":"a bunch of times right so I've called dequeue the first time","width":205},{"text":"the first one goes through","width":113},{"text":"it says wait and it decrements it to four","width":413},{"text":"s2 is items right","width":143},{"text":"so it decrements it to 4 and it gets the lock","width":297},{"text":"and it could then post or unlock","width":228},{"text":"if the first thing it does is unlock","width":160},{"text":"the next one that was coming along here","width":169},{"text":"the next one came along and it blocked ","width":122},{"text":"it can't go anywhere","width":159},{"text":"it's not waiting for this post","width":161},{"text":"it's just waiting for the unlock","width":223},{"text":"so it's really just an ordering thing","width":130},{"text":"if there was more complexity to this system","width":200},{"text":"this mismatch could cause problems. it's just a performance issue it's not a correctness problem","width":320}],
  // Part 6
  [{"text":"okay so I only have about five more minutes left I don't think I'm going to be able to ","width":242},{"text":"any more questions left about this sorry","width":255},{"text":"any more questions about the ring buffer","width":236},{"text":"okay the back half of the page","width":428},{"text":"is return to the reader-writer problem","width":361},{"text":"okay","width":180},{"text":"so you guys remember what the reader-writer problem is?","width":369},{"text":"so there's a couple of rules when you're doing a reader-writer problem","width":242},{"text":"1. how many readers can you have at the same time?","width":372},{"text":"as many as you want","width":76},{"text":"how many writers can you have at the same time","width":159},{"text":"one","width":38},{"text":"can you have readers and writers at the same time?","width":168},{"text":"no","width":45},{"text":"so our first rule is exclusion","width":206},{"text":"one writer multiple readers","width":199},{"text":"that also means that whatever solution I design I want to be able to allow multiple readers to simultaneously read","width":492},{"text":"but only one writer to write at the same time","width":259},{"text":"so was there anything else?","width":498},{"text":"yes and we want to make sure that whatever solution we come up with doesn't starve either the readers or the writers","width":664},{"text":"so you guys saw condition variables right?","width":302},{"text":"so just to refresh your memory","width":173},{"text":"inside a condition variable","width":220},{"text":"inside the system it's doing an unlock on a mutex","width":248},{"text":"it's blocking on a signal","width":128},{"text":"so it's waiting for something","width":59},{"text":"and then when it's done it locks it","width":105},{"text":"and then it returns","width":102},{"text":"so whenever you call a condition variable","width":272},{"text":"you call it with both that condition variable and a lock","width":311},{"text":"what state does that lock have to be in?","width":191},{"text":"locked","width":47},{"text":"because in the system the first thing that happens is the system unlocks it for you","width":231},{"text":"but all that is done atomically-ish","width":206},{"text":"don't worry about that word","width":80},{"text":"it's all done in one step so you don't have to worry about race conditions inside the condition variable","width":345},{"text":"okay","width":88},{"text":"so here's my first solution","width":293},{"text":"to the reader-writer problem","width":259},{"text":"I'm going to lock a mutex and then I'm going to say ","width":395},{"text":"I have some variables here","width":156},{"text":"I have writing ","width":191},{"text":"that means somebody's writing","width":164},{"text":"and I have reading","width":215},{"text":"and that tells me how many the number of readers inside","width":318},{"text":"what value can writing be?","width":193},{"text":"zero one ","width":70},{"text":"reading can be whatever doesn't matter","width":165},{"text":"ok so, first thing I'm going to do is lock my variable and call","width":305},{"text":"and while somebody is writing I'm going to call my condition wait","width":280},{"text":"if somebody if there's a writer in there I'm going to wait for the writer to signal that they're done","width":386},{"text":"and then I can go on","width":126},{"text":"once that's done I increment reading","width":177},{"text":"I do my reading, I decrement reading, I signal that I'm done and I lock","width":371},{"text":"similarly, on the writer side ","width":179},{"text":"they lock","width":65},{"text":"if there's anybody reading or writing","width":166},{"text":"remember writers are exclusive they can't have anybody in there","width":219},{"text":"I wait increment writing, decrement writing call the condition variable","width":605},{"text":"if anybody, this we're a little bit short for time","width":130},{"text":"so is anybody off the top of their head see a problem with this","width":416},{"text":"there's only one reader at a time","width":131},{"text":"what's causing that?","width":128},{"text":"the lock, right, so the lock goes from here to here","width":306},{"text":"once I try to read and I acquire the lock nobody else can come in","width":255},{"text":"does anybody know how I can fix that?","width":245},{"text":"there's an easier way to do that?","width":190},{"text":"any other suggestions?","width":131},{"text":"well I have to lock","width":167},{"text":"but you're closer it does have to do with the lock","width":281},{"text":"what if we unlock the lock","width":262},{"text":"unlock before the reading and then relock","width":527},{"text":"right?","width":78},{"text":"because this unlock will let the other readers pass","width":307},{"text":"the writers will get here and stop","width":221},{"text":"because I've already incremented my reading so the writers aren't going to be able to get into the critical section, but the other readers will","width":729},{"text":"there's another problem","width":96},{"text":"am I done?","width":173},{"text":"give me one more problem here","width":90},{"text":"there's two more problem, we'll finish them on wednesday","width":520},{"text":"say that again?","width":187},{"text":"if there's a stream of readers","width":150},{"text":"if readers keep coming and keep coming and there's never no readers","width":257},{"text":"we're going to starve our writers","width":103},{"text":"one more problem","width":93},{"text":"I lied","width":241},{"text":"look at the writers for a second there's a problem here","width":435},{"text":"what does that do?","width":227},{"text":"what does a condition signal do?","width":349},{"text":"it wakes up what?","width":151},{"text":"no","width":59},{"text":"it wakes up ","width":110},{"text":"wakes up one reader","width":92},{"text":"what do i need to change that to?","width":224},{"text":"condition broadcast","width":239},{"text":"okay","width":183},{"text":"I want you guys to think about the better solution for a reader-writer","width":248},{"text":"we'll go over that at the beginning of class on Wednesday","width":132},{"text":"and we'll talk about deadlock","width":256}],

  // Start Lecture Video 14
  // Part 0
  [{"text":"Now let's get started. Your stuck with me for one more day and not only that, I have a cold, so I apologize for any sniffling or coughing I might do in your ears. I think we can get through this okay, I'll just make you guys talk more. ","width":1324.1818182468414},{"text":"We didn't quite finish up talking about the reader-writer problem so I put it on you guys to come up with a better solution","width":552.1818182468414},{"text":"But just to go back a little bit, we left off with this improved solution.","width":494.18181824684143},{"text":"It wasn't quite as perfect as written on the page.","width":280.18181824684143},{"text":"We have the lock and we do while our writing and then we do some reading and then we tell them that there's a reader","width":699.1818182468414},{"text":"And then when it's done we do some reader, then when it's done we tell the reader's gone. ","width":283.18181824684143},{"text":"And then we signal that someone else can take the turn","width":353.18181824684143},{"text":"And then we unlock the lock","width":120.18181824684143},{"text":"And then pretty much the same thing on the writer side","width":192.18181824684143},{"text":"There were three problems with this","width":427.18181824684143},{"text":"Two of them were problematic and one of them was functional - completely functional. What are some simple fixes we can make? What was the first problem?","width":1003.1818182468414},{"text":"Yeah so what is happening here; who's getting woken up here?","width":380.18181824684143},{"text":"Only one reader. Only one reader. So we want to make sure we wake up all the readers so we do a cond_broadcast","width":828.1818182468414},{"text":"What are the other problems? What part if it is causing that? ","width":755.1818182468414},{"text":"So the lock/unlock being here, right. Okay, I lock, so no one else can get into that critical section until I unlock. Which means we only allow one reader at a time. How do we fix this?","width":1655.1818182468414},{"text":"Do I have to do the same thing for the writer? Why not? We only want one writer anyway, okay.","width":539.1818182468414},{"text":"This works, there's nothing functional wrong with this. This is good, now we get our multiple readers, multiple writers","width":415.18181824684143},{"text":"But it still has one more problem. Anyone remember what it is?","width":556.1818182468414},{"text":"Yeah? Yes, so the writer--what's stopping the writer from getting in?","width":618.1818182468414},{"text":"This right here. We only have one writer, so I don't need to worry about this","width":408.18181824684143},{"text":"Okay. And it means that unless the writer has gotten into the critical section, every reader that comes along--once one reader comes along and gets in, the writer gets blocked","width":821.1818182468414},{"text":"And now readers come in, readers leave, readers come in, readers leave. If that reader count never goes down to 0 we're going to starve the writer.","width":554.1818182468414},{"text":"In the real world this could be a really bad thing because I could be making a change, and delaying that update that the writer is trying to make. And the readers are working on old data. So this is not a good thing to starve our writers.","width":963.1818182468414},{"text":"And the goal for the last part of the class was to write a better solution","width":510.18181824684143},{"text":"I asked you guys to think about this while you were away from class. I can give you two minutes to think about it and pull it back in again then we can go over the solution","width":730.1818182468414},{"text":"Talk to your neighbors. Think about what you would do to fix this and make it work","width":278.18181824684143},{"text":"[silence while the class works]","width":6548.181818246841}],
  // Part 1
  [{"text":"so did anyone come up with a way to not deadlock our writers without telling me the code what would your approach be to not let the writers deadlock?","width":1098.1818182468414},{"text":"so one way would be to broadcast to the writers first then the readers","width":294.18181824684143},{"text":"im not sure that would entirely fix the problem because even if i broadcast the writers","width":364.18181824684143},{"text":"wait let's go back to this code for a second","width":218.18181824684143},{"text":"even if i broadcast here to the writers","width":167.18181824684143},{"text":"the writer will wake up but there's still readers inside and it'll still block","width":245.18181824684143},{"text":"so it's a good try ","width":105.18181824684143},{"text":"so it's the right approach you have to do somehting that gives preference to the writers","width":303.18181824684143},{"text":"that's how we're gonna fix this. say that one more time","width":1227.1818182468414},{"text":"so one thing you can do is put a number of make sure no one reads forever","width":361.18181824684143},{"text":"so the solution i have is not gonna break the problem of someone reading forever","width":325.18181824684143},{"text":"if somebody reads forever i'm never gonna let a writer in","width":206.18181824684143},{"text":"so ummm ","width":149.18181824684143},{"text":"that is a limitation of the solution i'm gonna show you","width":215.18181824684143},{"text":"even if you just let even if you say that your reader can be in there for 10 seconds","width":372.18181824684143},{"text":"let's do it that way","width":55.18181824684143},{"text":"instead of giving it a time limit","width":150.18181824684143},{"text":"you can still have every second a reader comes along","width":281.18181824684143},{"text":"so probably we should put a limit on the solution i'm gonna show you","width":236.18181824684143},{"text":"to make sure that the reader's not gonna stay in forever","width":753.1818182468414},{"text":"it would be really good if we could have them enter in the order in which they receive","width":229.18181824684143},{"text":"did anybody come up with a solution kinda like that?","width":600.1818182468414},{"text":"yeah, that's pretty close to what I'm gonna do","width":117.18181824684143},{"text":"so basically what i'm gonna show you is a way to say ok","width":195.18181824684143},{"text":"i have a waiting flag","width":125.18181824684143},{"text":"if a writers coming in and writer's waiting i'm gonna send a waiting flag","width":263.18181824684143},{"text":"and if there's a writer waiting","width":109.18181824684143},{"text":"i'm not gonna let anymore readers in","width":140.18181824684143},{"text":"and whatever reader are in i'm gonna drop through","width":208.18181824684143},{"text":"and those readers once they're done ","width":156.18181824684143},{"text":"the writers next","width":112.18181824684143},{"text":"and i'll show you how that works","width":255.18181824684143},{"text":"you know what i have the code here not gonna write the whole thing down","width":526.1818182468414},{"text":"we can look over it","width":58.18181824684143},{"text":"ok so here's my reader and my writer","width":234.18181824684143},{"text":"so i've added ","width":213.18181824684143},{"text":"here","width":63.18181824684143},{"text":"i now have two","width":184.18181824684143},{"text":"two counters","width":159.18181824684143},{"text":"that have to do with readers instead of just 1","width":216.18181824684143},{"text":"this one says that i have a want to enter the critical section. so this one says \"writer's waiting\"","width":753.1818182468414},{"text":"and this one says","width":178.18181824684143},{"text":"writers writing","width":522.1818182468414},{"text":"what value can this one have","width":442.18181824684143},{"text":"what value can the writers waiting hve","width":326.18181824684143},{"text":"okay what value can this one have","width":144.18181824684143},{"text":"the writers writing","width":95.18181824684143},{"text":"just one","width":38.18181824684143},{"text":"how about this one here","width":175.18181824684143},{"text":"no","width":46.18181824684143},{"text":"i can have lots of writers writing","width":157.18181824684143},{"text":"it just tells me that there are writers waiting","width":149.18181824684143},{"text":"okay and as long as there's waiting","width":312.18181824684143},{"text":"this one says as long as there's writers waiting instead of writers writing","width":292.18181824684143},{"text":"i'm gonna block my reader","width":165.18181824684143},{"text":"and","width":61.18181824684143},{"text":"this part","width":129.18181824684143},{"text":"right here","width":73.18181824684143},{"text":"says that as long as there's a writer writing","width":142.18181824684143},{"text":"i'm not gonna drop out of my condtion wait while loop","width":308.18181824684143},{"text":"okay","width":53.18181824684143},{"text":"so what's gonna happen is 1 writer's gonna come along","width":265.18181824684143},{"text":"it's going to ","width":226.18181824684143},{"text":"say that somebody's reading say we have 1 reader  in there","width":137.18181824684143},{"text":"let's let the reader go first","width":117.18181824684143},{"text":"reader comes in ","width":188.18181824684143},{"text":"i need my variables set here","width":157.18181824684143},{"text":"so we have","width":146.18181824684143},{"text":"writers ","width":139.18181824684143},{"text":"writing","width":93.18181824684143},{"text":"and","width":53.18181824684143},{"text":"reading","width":310.18181824684143},{"text":"and they all start off as","width":175.18181824684143},{"text":"0","width":202.18181824684143},{"text":"so i have a reader that comes along","width":141.18181824684143},{"text":"it's gonna come along here and check to see if there's writers it's gonna say no no writers","width":293.18181824684143},{"text":"so ","width":76.18181824684143},{"text":"uhh","width":38.18181824684143},{"text":"it's gonna fall through the condition variable i don't have to wait and then it's gonna increment writing, reading i'm sorry","width":429.18181824684143},{"text":"it's gonna stay in reading here for a second","width":120.18181824684143},{"text":"let's leave it there for a minute","width":125.18181824684143},{"text":"to make sure that the writers are gonna be able to get through","width":222.18181824684143},{"text":"so now i have a writer its gonna incrament it's gonna acquire the lock so it can change the writers value ok so now i have one writer waiting","width":628.1818182468414},{"text":"but now i need to check somebody's reading am i gonna fall out of this loop?","width":363.18181824684143},{"text":"yes or no","width":323.18181824684143},{"text":"can i pass this line?","width":354.18181824684143},{"text":"alright i'm gonna do while reading or writing am i reading or writing?","width":283.18181824684143},{"text":"yes","width":32.18181824684143},{"text":"so i do my condition wait","width":71.18181824684143},{"text":"so now my first writer is blocked here","width":368.18181824684143},{"text":"and","width":41.18181824684143},{"text":"what happens when it calls the condition variable?","width":167.18181824684143},{"text":"it releases the lock","width":202.18181824684143},{"text":"so","width":111.18181824684143},{"text":"and now i have another writer come along","width":149.18181824684143},{"text":"same thing happens i'm gonna increment my writers to 2","width":223.18181824684143},{"text":"and my second one ","width":113.18181824684143},{"text":"is gonna block right there","width":148.18181824684143},{"text":"is that clear?","width":68.18181824684143},{"text":"yeah?","width":653.1818182468414},{"text":"nothing's happened yet right we haven't been signaled yet so now","width":237.18181824684143},{"text":"let's go back to this reader","width":103.18181824684143},{"text":"so this reader's done","width":340.18181824684143},{"text":"it gets the lock it decrements reading now to 0","width":266.18181824684143},{"text":"and","width":45.18181824684143},{"text":"it signals everyobdy","width":169.18181824684143},{"text":"that will wake up it's doing a signal broadcast","width":193.18181824684143},{"text":"it will wake up both of the writers","width":256.18181824684143},{"text":"both of the writers will acquire the lock 1 at a time","width":214.18181824684143},{"text":"right they're not gonna do it at the same time","width":85.18181824684143},{"text":"the first one that acquires the lock will say ","width":152.18181824684143},{"text":"is reading 0?","width":113.18181824684143},{"text":"yes","width":36.18181824684143},{"text":"is writing 0?","width":81.18181824684143},{"text":"yes","width":63.18181824684143},{"text":"so","width":35.18181824684143},{"text":"that one can fall throgh","width":151.18181824684143},{"text":"and","width":30.18181824684143},{"text":"it can now","width":170.18181824684143},{"text":"set writing to 1","width":157.18181824684143},{"text":"and there's somebody writing","width":174.18181824684143},{"text":"ok","width":87.18181824684143},{"text":"so now","width":74.18181824684143},{"text":"if you look at another reader coming along","width":253.18181824684143},{"text":"it's gonna say is there are there writers waiting?","width":252.18181824684143},{"text":"yes","width":56.18181824684143},{"text":"ok now wait","width":377.18181824684143},{"text":"what did i just trade off","width":170.18181824684143},{"text":"this is not a perfect solution either","width":158.18181824684143},{"text":"yeah?","width":183.18181824684143},{"text":"there's no better way for the readers so i now put the priority on the writers instead of on the readers","width":481.18181824684143},{"text":"there are solutons","width":195.18181824684143},{"text":"for having counters and allowing them to go in step by step i don't think lawrence was having you going through the priority solutions so this is the one he wanted me to go through with you","width":1051.1818182468414}],
  // Part 2
  [{"text":"no there's no order right there's no ordering i this because everytime you do a condition broadcast","width":523.1818182468414},{"text":"there's no queue","width":71.18181824684143},{"text":"it just picks one","width":114.18181824684143},{"text":"it's possible that the operating system implemented as a queue and it took the frst one that asked for it","width":425.18181824684143},{"text":"but theres no guarantee of that","width":137.18181824684143},{"text":"you don't know how the operating sytem implemented a condiion signal","width":936.1818182468414},{"text":"why am i unlokcing the mutex when i do a write ","width":324.18181824684143},{"text":"there's actually a reason for it","width":279.18181824684143},{"text":"what happens when i unlock","width":105.18181824684143},{"text":"we said we didn't need it before but actually we do","width":161.18181824684143},{"text":"why do we need it?","width":318.18181824684143},{"text":"right. so we want anybody who's coming in reader or writer","width":400.18181824684143},{"text":"we want them to be sitting on the condition variables","width":228.18181824684143},{"text":"here and here","width":96.18181824684143},{"text":"the only way for them to get to the condition variable is if the lock is unlocked","width":283.18181824684143},{"text":"while theres a writer writing","width":83.18181824684143},{"text":"that doesn't mean another writers' going to get in","width":156.18181824684143},{"text":"it just means another writer will get to the condition variable","width":672.1818182468414},{"text":"that clear? can let it gel. anybody have anymore questions?","width":541.1818182468414},{"text":"because i want to move on to the topic we are suppoesd to be talking about today which is deadlock","width":459.18181824684143},{"text":"ok","width":213.18181824684143},{"text":"so i'm going to do something that i know lawrence never does but i'm going to use some slides","width":984.1818182468414},{"text":"dr seuss' birthday was on monday so i thought we would honor him with the ultimate deadlock","width":419.18181824684143},{"text":"actually if you take algorithms sometimes people talk about cat in the hat which is recursion","width":314.18181824684143},{"text":"dr seuess seemed to have an affinity for algorithms","width":269.18181824684143},{"text":"one of the things that we didn't necessarily see this specific problem of deadlock when we looked at the readers and writers problem but we did see in the circular buffer but we did see things getting stuck","width":1026.1818182468414},{"text":"and the canonical example of deadlock is these are the north going and south going zacks","width":491.18181824684143},{"text":"they both walk up to each other and they go \"I'm not moving. I want your spot\"","width":386.18181824684143},{"text":"and the other one wats my spot","width":167.18181824684143},{"text":"and neither one is willing to make any adjustments and they're stuck","width":399.18181824684143},{"text":"this is the canonical deadlock","width":150.18181824684143},{"text":"what's happening is i'm waiting for him to move and he's waiting for me to move","width":367.18181824684143},{"text":"and with that we create something that is actually very easily to notice that there is deadlock in the system","width":517.1818182468414},{"text":"so we see deadlock everyday","width":286.18181824684143},{"text":"anybody living you know who's ever lived in a city you've seen deadlock on the streets any time","width":351.18181824684143},{"text":"and it could be caused by lots of different things","width":115.18181824684143},{"text":"it could be caused by some idiot driving into the middle of the streeet and stopping there and deciding what to do","width":585.1818182468414},{"text":"and all the other traffice come along and starts going yeah um we're stuck","width":463.18181824684143},{"text":"and it doesn't even have to be you konw an indecisvie problem","width":353.18181824684143},{"text":"it could just be that there's lots of traffic and a car pulls into the intersection and can't make it all l the way across and you're going to have the same problem","width":719.1818182468414},{"text":"this is what we call gridlock","width":151.18181824684143},{"text":"gridlock is deadlock","width":86.18181824684143},{"text":"nobody can move","width":66.18181824684143},{"text":"everybody is waiting for some other spot that doesn't exist","width":282.18181824684143},{"text":"even if the cars that were blocking it in the first place are gone it still can't go anywhere","width":402.18181824684143},{"text":"what we're going to see is that the main problem here is that the first car is waiting for the left car to move the left car is waiting for the bottom car to move and the bottom car is waiting for the right car to move and so and so forth","width":771.1818182468414},{"text":"and again the same problem that we had with the north going and southgoing with the zacks","width":213.18181824684143},{"text":"is that we can't get anywhere","width":193.18181824684143},{"text":"so essentially","width":215.18181824684143},{"text":"deadlock is a situation where ","width":235.18181824684143},{"text":"we have processes if you want to get away from the cars and the dr seuss characters","width":293.18181824684143},{"text":"we have processes that are waiting for an event that will never occur","width":381.18181824684143},{"text":"and it turns out that","width":235.18181824684143},{"text":"this doesn't even have to be multiple processes","width":211.18181824684143},{"text":"typically it is multple processes and if","width":279.18181824684143},{"text":"they can't make any progress","width":158.18181824684143},{"text":"then the system is deadlocked","width":234.18181824684143},{"text":"turns out that a single source can deadlock itself","width":350.18181824684143},{"text":"it's waiting for some resource how do you think it could deadlock itself?","width":570.1818182468414},{"text":"anybody?","width":247.18181824684143},{"text":"i have one process and it's moving along","width":452.18181824684143},{"text":"it's it's waiting for something","width":675.1818182468414},{"text":"if i have a condition variable that i set to something and then in that same thread or same process i then went to go","width":475.18181824684143},{"text":"or  unlock even","width":63.18181824684143},{"text":"you don't need to be as complex as a condition variable","width":184.18181824684143},{"text":"i set a lock to locked","width":198.18181824684143},{"text":"and then i'm moving along and then in that same control thread i say unlock","width":373.18181824684143},{"text":"i'm stuck if nobody else is going to touch that","width":131.18181824684143},{"text":"so i can deadlock myself by not using locks and unlocks correctly","width":432.18181824684143},{"text":"so there's also something called livelock","width":283.18181824684143},{"text":"can i have a volunteer come up here for a second","width":262.18181824684143},{"text":"just a simple. i'm not going to hurt anybody i promise. just stand right here for a second, come on","width":620.1818182468414},{"text":"people in the front","width":93.18181824684143},{"text":"i'm going to give you an example","width":110.18181824684143},{"text":"ok","width":149.18181824684143},{"text":"first we're going to be the zacks","width":202.18181824684143},{"text":"stand there","width":64.18181824684143},{"text":"ok","width":76.18181824684143},{"text":"we can't go anywhere","width":73.18181824684143},{"text":"ok but now he's going to be really nice and say ok i'm going to move to the side so you can move to the side","width":433.18181824684143},{"text":"ok","width":59.18181824684143},{"text":"try again","width":170.18181824684143},{"text":"one more time","width":58.18181824684143},{"text":"ok you can go back to your seat","width":86.18181824684143},{"text":"that's called livelock","width":93.18181824684143},{"text":"did we  get anywhere?","width":122.18181824684143},{"text":"no","width":52.18181824684143},{"text":"but we're standing there","width":53.18181824684143},{"text":"you ever done that in the hallway where you just go back in forth in front of somebody?","width":311.18181824684143},{"text":"that's exaclty what livelock is","width":92.18181824684143},{"text":"we were moving","width":90.18181824684143},{"text":"we were potentially making progress","width":140.18181824684143},{"text":"potentially doing something","width":128.18181824684143},{"text":"but we were not making any progress","width":85.18181824684143},{"text":"and we never got past where we wanted to be","width":155.18181824684143},{"text":"so in terms of processes we're going to see that processes can sometimes try to avoid deadlock ","width":521.1818182468414},{"text":"by essentially","width":95.18181824684143},{"text":"he was trying to avoid deadlock by saying ok \"i'm going to be good and say you can have the spot\" so they're releasiing a resource","width":609.1818182468414},{"text":"but then i say no i want another one","width":126.18181824684143},{"text":"so whatever algorthms you design to try to avoid deadlock could create this livelock situation","width":459.18181824684143}],
  // Part 3
  [{"text":"there's lots of different things you can do to deal with deadlock","width":523.1818182468414},{"text":"you can try to prevent it. this is probably the most expensive thing that you can do","width":418.18181824684143},{"text":"you have to understand exactly how your system exists. you have to understand all the states in your system","width":419.18181824684143},{"text":"you have to be able to look at it, run from algorithms on it and say that nothing in the system, no program, no application can cause deadlock","width":582.1818182468414},{"text":"to be able to do that, you have to be very,very pessimistic","width":240.18181824684143},{"text":"because even if we're dealing with the zacks aren't very nice, if two of them never met, it's never gonna be a problem.","width":593.1818182468414},{"text":"so only if they actually meet that they cause deadlock","width":296.18181824684143},{"text":"a number of systems might try to do something like detection and recovery","width":299.18181824684143},{"text":"so detected that there was deadlock and now we're gonna come up some algorithms to recover from it","width":512.1818182468414},{"text":"avoidance is kinda somewhere in between. we're gonna look at our system and come up with systems that don't come up with dealdock","width":593.1818182468414},{"text":"a little bit more expensive than detection","width":183.18181824684143},{"text":"not quite as expensive as total prevention","width":193.18181824684143},{"text":"and then if you really have trouble you can have your system operator sit there and fix things that's your worst case - you don't want to do that","width":564.1818182468414},{"text":"does anybody know what unix/linux does","width":303.18181824684143},{"text":"for deadlock prevention","width":128.18181824684143},{"text":"or detection or avoidance or whatever","width":253.18181824684143},{"text":"anybody know?","width":158.18181824684143},{"text":"wanna take a guess?","width":130.18181824684143},{"text":"how does linux deal with deadlock?","width":425.18181824684143},{"text":"how many people think it does deadlock prevention?","width":275.18181824684143},{"text":"detection and recovery?","width":234.18181824684143},{"text":"avoidance?","width":223.18181824684143},{"text":"manual intervention?","width":163.18181824684143},{"text":"you wanna know what it does? nothing","width":341.18181824684143},{"text":"this is called the ostrich approach, you stick your head in the sand and ignore deadlock ever happening. that is pretty much what they decide","width":536.1818182468414},{"text":"they leave it up to the application writers to make sure they don't deadlock","width":320.18181824684143},{"text":"so, the nice thing about this is that none of the expensive components of prevention or recovery or detection need to be implemented","width":567.1818182468414},{"text":"they just say everything's faster and if it's rare is it really worth the overhead?","width":469.18181824684143},{"text":"the assumption is that it's rare and we're not going to use it or if it's really important for a particular application that that application take care of it","width":567.1818182468414},{"text":"that being said you can't ignore it because it's part of this class and i'm gonna talk to you about how to figure out what's going on with deadlock","width":519.1818182468414},{"text":"to be able to do so","width":157.18181824684143},{"text":"i wanna be able to model ","width":779.1818182468414},{"text":"i want be able to model my processes and my resource that they wanna use in a graph and this is called a resource allocation graph","width":532.1818182468414},{"text":"and my resource allocation graph has two components","width":267.18181824684143},{"text":"it has ","width":333.18181824684143},{"text":"it has processes which are these circles ","width":301.18181824684143},{"text":"and it has resources which are the squares","width":353.18181824684143},{"text":"and what i'm gonna do is i'm going to take an arrow","width":408.18181824684143},{"text":"from a resource to a process","width":207.18181824684143},{"text":"that means that p1 is using r1","width":284.18181824684143},{"text":"and i'm going to take an arrow from a process to a resource saying that p1 requested r2","width":614.1818182468414},{"text":"so this would be","width":327.18181824684143},{"text":"process 1 is using standard out","width":218.18181824684143},{"text":"process 1 has acquired a lock","width":273.18181824684143},{"text":"the second half, the right half would be","width":156.18181824684143},{"text":"some other process acquired a lock already and p2 is asking for it but doesn't get it until the other process has given it up","width":591.1818182468414},{"text":"so, why do we go through the bother of this? well it turns out that if we look at resource allocation graphs they have this great property that tell us how to deal with deadlock or how to detect deadlock, or how to detect deadlock","width":1132.1818182468414},{"text":"let's say we have this situation now where r1 acquires, sorry, p1 acquires r1","width":573.1818182468414},{"text":"so process 1 has acquires some resource","width":204.18181824684143},{"text":"and p2 has acquired a different resource","width":216.18181824684143},{"text":"but now","width":174.18181824684143},{"text":"p2 is gonna request that first resource that p1 has and p1 is gonna request the resource that p2 had","width":708.1818182468414},{"text":"what's gonna happen?","width":115.18181824684143},{"text":"so, if they're gonna hold on to these resources and they can't make any progress until they get the second resource, we've now created something called circular wait they're both waiting for something","width":824.1818182468414},{"text":"the zack's were each waiting for the other to move","width":191.18181824684143},{"text":"the cars at the intersection were each waiting for the other to move","width":194.18181824684143},{"text":"this is called circular wait","width":170.18181824684143},{"text":"and this type of cycle in a resource allocation graph tells us that there's dedlock","width":447.18181824684143},{"text":"so, on your handouts from today, you guys have some examples that we're going to go through","width":593.1818182468414},{"text":"so let me switch over to our examples","width":568.1818182468414},{"text":"can you guys see that okay or do you want me to put it on the center screen too?","width":820.1818182468414},{"text":"so, i'll help you through the first one","width":230.18181824684143},{"text":"the first one, here's my boxes","width":331.18181824684143},{"text":"and lawrence was calling them candyboxes and they hold candy","width":203.18181824684143},{"text":"and there's one piece of candy in the box and whoever gets it get's to take it and i guess when they're done they put it back. kinda gross","width":547.1818182468414},{"text":"so if you heard him say candyboxes he meant the resource squares and the resource allocation boses","width":503.18181824684143},{"text":"now how many processes do i have","width":140.18181824684143},{"text":"i have process 1 and process 2 so i'm gonna write p1 and p2","width":402.18181824684143},{"text":"and the way i read this is process 1 requests resource a and resource b","width":428.18181824684143},{"text":"so process 1 requests it and there's no arrows coming out of the resource","width":413.18181824684143},{"text":"that means that no one's using it right now and p1 can acquire it so i draw an arrow to p1","width":439.18181824684143},{"text":"because that means that p1 has acquired","width":303.18181824684143},{"text":"a","width":37.18181824684143},{"text":"and b","width":175.18181824684143},{"text":"now,","width":134.18181824684143},{"text":"process 2 comes along so this is time","width":309.18181824684143},{"text":"for each of these, down is time","width":118.18181824684143},{"text":"now p1 says i'm gonna request ","width":156.18181824684143},{"text":"oh i guess there's a 3rd one here","width":313.18181824684143},{"text":"p2 requests process c sorry process 2 requests resource c, which way does the arrow go?","width":606.1818182468414},{"text":"to p2","width":155.18181824684143},{"text":"towards p2","width":87.18181824684143},{"text":"and, what about b?","width":261.18181824684143},{"text":"which way does the arrow go?","width":177.18181824684143},{"text":"towards the resource or towards the process?","width":160.18181824684143},{"text":"towards the resource because a already has it","width":267.18181824684143},{"text":"is there a deadlock here?","width":212.18181824684143},{"text":"no why not?","width":193.18181824684143},{"text":"there's no cycle i don't have my circular wait, okay","width":262.18181824684143}],
  // Part 4
  [{"text":"Let's do the next one","width":338},{"text":"You guys do the next one, you've got 30 secs to do it, it's very easy","width":294},{"text":"I'm going to write the processes and you're going to tell me where to put the arrows","width":516},{"text":"I'll write all of these while you're looking at it, you can go through as many as you want","width":272},{"text":"I'm going to set this up","width":3668},{"text":"Okay so for the next one","width":268},{"text":"P1 requests A, B and C","width":151},{"text":"Which way do I put my arrows?","width":553},{"text":"towards P1","width":32},{"text":"all of them?","width":103},{"text":"nobody has those resources","width":436},{"text":"and P2 requests B and C which way do I put my arrow?","width":794},{"text":"to the box?","width":91},{"text":"For which one? for both of them? Yup cause A has both of them","width":377},{"text":"Is there a deadlock here?","width":241},{"text":"Why not?","width":161},{"text":"There's still no cycle","width":255},{"text":"Let's do the next one, A requests A and B","width":425},{"text":"We know those go that way because A is the first thing to request it","width":299},{"text":"P2 requests B and C","width":251},{"text":"which way does the B arrow go?","width":220},{"text":"To the resource or to the process?","width":199},{"text":"To the resource","width":71},{"text":"And for C?","width":202},{"text":"To the process","width":198},{"text":"How about for P3?","width":181},{"text":"To the resource or to the process?","width":243},{"text":"To the resource","width":213},{"text":"and for C and B for P4?","width":397},{"text":"Both? So they both go to the resource","width":365},{"text":"ok","width":174},{"text":"Have I created a deadlock?","width":270},{"text":"Is there a deadlock there?","width":150},{"text":"Still no deadlock, this is kind of boring, no I'm just joking","width":367},{"text":"Ok you wanna make a bet that there's a deadlock here?","width":242},{"text":"How many people know that there's a deadlock here?","width":192},{"text":"Then help me, so P1 requests A and B","width":505},{"text":"P2 requests B C and D","width":299},{"text":"which way does the B arrow go?","width":270},{"text":"Towards the resource and the other two go... towards the process","width":351},{"text":"We know there's something here so this has to go towards the process","width":306},{"text":"P4 wants D and P3 wants B","width":344},{"text":"But now P1 requests C","width":99},{"text":"which way does it go?","width":236},{"text":"To the resource and you're going to go back around the bottom here","width":306},{"text":"Is there a deadlock here?","width":432},{"text":"Whats happening?","width":129},{"text":"P1 has requested C","width":381},{"text":"and then P2 is using C","width":379},{"text":"but P2 has requested B","width":184},{"text":"and p1 is using B","width":428},{"text":"Got it?","width":171},{"text":"So you'll notice this is what is called a bipartite graph","width":167},{"text":"You only ever have arrows going from the top to bottom or from the bottom to the top","width":239},{"text":"they never go back and forth between each other","width":546},{"text":"okay last one","width":138},{"text":"and then we'll go back to talking about deadlock","width":230},{"text":"ok","width":243},{"text":"i'm going to start it off","width":222},{"text":"uhhhhhh","width":120},{"text":"because I don't know what I'm doing do I? there we go","width":180},{"text":"P2 wants B","width":154},{"text":"And C and D","width":228},{"text":"Okay this is almost the same as the last one","width":360},{"text":"P3 requests B","width":265},{"text":"ok","width":43},{"text":"what's new here?","width":269},{"text":"P1 released B","width":456},{"text":"P1 said ok I don't need this one anymore, it's not there","width":407},{"text":"and once it's been released, the next process waiting for it can get it let's say it's P2","width":405},{"text":"so now P2 what happens to the arrow for P2?","width":362},{"text":"It switches direction so let's see if we can make it switch directions. So now when P1 comes along and requests C","width":664},{"text":"Is there a deadlock?","width":108},{"text":"No","width":45},{"text":"So the key here is to remember that as processes are doing things, they are releasing and using resources","width":401},{"text":"and the whole stepwise of understanding how they're releasing and using them needs to be looked at to be able to detect deadlock","width":675},{"text":"okay any questions about the resource allocation graphs? okay cool. I'm going to go back to my slides","width":937}],
  // Part 5
  [{"text":"So, it turns out that this, uh, circular wait is not sufficient for, uh, determining whether there's deadlock. It is necessary. If there's no circular wait, there's no deadlock. But if there's circular wait, it doesn't mean there's deadlock","width":1088.1818182468414},{"text":"I mean, if there's a circle in the graph, it doesn't mean there's deadlock. So there are four conditions. They are Kaufmann's conditions.","width":537.1818182468414},{"text":"The first one is mutual exclusion. It means that only one process can use a resource at a time.","width":547.1818182468414},{"text":"so a process can claim exclusive control of the resource they require.","width":394.18181824684143},{"text":"So if we're only dealing with writers, writers require exclusive access to that critical section.","width":691.1818182468414},{"text":"If we're only looking at readers, there's no exclusive access. They can all look at the same time. So we have to have exclusive access. A lock implies exclusive access. only one process can have the lock at the same time","width":1022.1818182468414},{"text":"There is also something called hold-and-wait. Hold-and-wait says that the prcoess that the process holding the resources allocated to them is waiting for additional resources. ","width":597.1818182468414},{"text":"If we go back to our last two examples here, ","width":839.1818182468414},{"text":"In this case, the first one, P1 is holding B","width":391.18181824684143},{"text":"And waiting for C","width":164.18181824684143},{"text":"In this case, P1 gave up B","width":248.18181824684143},{"text":"And then was waiting for C, and so in this case doesn't have any hold and wait. it's not holding something and waiting for something else","width":351.18181824684143},{"text":"So, in a sense a hold and wait","width":323.18181824684143},{"text":"a process has a resource","width":359.18181824684143},{"text":"it has an arrow coming in, and it's waiting for another resource so it has an arrow coming out","width":641.1818182468414},{"text":"The third thing is that there are no preemptive conditions","width":247.18181824684143},{"text":"this means nothing can be taken out. I can't say well I'm going to remove the fact that -","width":425.18181824684143},{"text":"instead of A releasing B2, I'm going to force A to release B2. I'm going to preempt it and say someone else can have it","width":571.1818182468414},{"text":"Once you have it, it's never given away","width":145.18181824684143},{"text":"So the north and south goings ","width":268.18181824684143},{"text":"There is no pre-emption. they weren't going to give up anything to be able to make progress","width":469.18181824684143},{"text":"And the last one is a circular chain of processes exists. ","width":363.18181824684143},{"text":"So, there is actually a law on the books","width":498.18181824684143},{"text":"that said in Kansas, when two trains approach each other at a crossing, both shall come to a full stop and neither shall start up again until the other has gone","width":1077.1818182468414},{"text":"Yeah, not so good","width":123.18181824684143},{"text":"Total deadlock. They both can't make any progress. How would you fix this?","width":1827.1818182468414},{"text":"This is a train, I'm not using a stack.","width":743.1818182468414},{"text":"Ok I'm not sure I understand your solution.","width":355.18181824684143},{"text":"Ok, so give the north going train the priority and the south always has to give up. The north always goes","width":413.18181824684143},{"text":"So that would break it.","width":77.18181824684143},{"text":"What does that break?","width":140.18181824684143},{"text":"so we had four conditions for deadlock, would do you think that would break?","width":690.1818182468414},{"text":"Yeah, there's no pre-emption here, and in doing so you've gotten rid of the cycles too.","width":429.18181824684143},{"text":"Any other ways of fixing it?","width":441.18181824684143},{"text":"Let's see...did I have any others?","width":197.18181824684143},{"text":"Priority, uh...","width":186.18181824684143},{"text":"You could make one back up.","width":358.18181824684143},{"text":"But all of them have to be able to break one of the conditions.","width":313.18181824684143},{"text":"So let's go with one more simple example.","width":216.18181824684143},{"text":"Two students need a pen and paper.","width":282.18181824684143},{"text":"I want to know what conditions these do or don't satisfy. I need to know if there's deadlock here.","width":256.18181824684143},{"text":"Two students share pen and paper.","width":196.18181824684143},{"text":"Is there deadlock there?","width":376.18181824684143},{"text":"It breaks mutual exclusion.","width":157.18181824684143},{"text":"Both students agree to grab pen before paper.","width":531.1818182468414},{"text":"Which one does that break?","width":513.1818182468414},{"text":"I always grab pen before paper. This is no circular wait.","width":833.1818182468414},{"text":"Because I'm always waiting for the pen","width":129.18181824684143},{"text":"and then I'm waiting for the paper.","width":129.18181824684143},{"text":"If they randomly did it, one could get that paper first and the pen first and the other could get the pen first and then the paper first. then we would have the cycle","width":690.1818182468414},{"text":"and they both get one or none","width":404.18181824684143},{"text":"Hold and wait","width":191.18181824684143},{"text":"Last one, students I have the pen and you give up the paper","width":370.18181824684143},{"text":"There's your preemption","width":316.18181824684143},{"text":"This leads us to the dining philosophers problem","width":675.1818182468414},{"text":"How many people have heard of this problem before?","width":153.18181824684143},{"text":"This is the canonical computer science problem.","width":423.18181824684143},{"text":"We have N philosophers and N forks","width":171.18181824684143},{"text":"BUT you need two forks to eat","width":258.18181824684143},{"text":"You can do this with chopsticks too","width":322.18181824684143},{"text":"But you only pick up one at a time","width":560.1818182468414}],
  // Part 6
  [{"text":"They must be hungry or they're dead","width":376},{"text":"Okay here's a solution for ya alright","width":371},{"text":" The philosophers spend time thinking, and then get hungry","width":402},{"text":" They pick up the left and right fork and then they eat when they're done they put down the left fork and they put down the right fork","width":801},{"text":" Any guesses about what might happen here? What's wrong with this? Everybody grabs the left fork first, whats gonna happen? They'll starve","width":1894},{"text":" This doesn't work","width":66},{"text":"Because what's going to happen is oh left fork, left fork, left fork and one more left fork","width":444},{"text":"And now when I try to pick up the right fork, there's no right fork there and they can't do anything, they're blocked","width":458},{"text":" Or deadlocked","width":217},{"text":" Which properties does our solution have? Does it have mutual exclusion? It better have all of them - it's deadlocked. What's causing the mutual exclusion?","width":1022},{"text":" Can't share forks - which is good for winter time which is good in the winter time because otherwise we'd all get sick","width":226},{"text":" What's hold and wait? I have one fork and waiting for another fork","width":642},{"text":" No preemption - No stabbing the philisopher next to you to steal their fork","width":513},{"text":" Circular wait is this potential of causing a cycle, each waits for the next neighbor to put down their chopstick","width":1010},{"text":" So lets just look at this in context of the resource allocation graph","width":340},{"text":" So if the philosophers are the processes","width":625},{"text":"That means the forks are the resources and if we model this using our resource allocation graph we can say everyon tries to pick up their left fork","width":762},{"text":" They all get cause there's nobody's using them so there's an arrow from process to the resource and they all get it, those are the request edges","width":564},{"text":"and everyone succeeds","width":218},{"text":"oh sorry those are requests, now everyone succeeds so everybody's got it from the resource to the process","width":419},{"text":" Now everyone tries to pick up the right fork","width":156},{"text":" There's request edges","width":139},{"text":" And there's our cycle right there, cycle equals deadlock","width":543},{"text":" I had a lot more examples of how to solve deadlock, how to solve the dining philosophers problem, but I think you'll be doing more of that later","width":915},{"text":"The only thing he told me to do is introduce the dining philosophers problem and say why it's bad to pick up chopstick 1 and eat. So  any questions about the dining philosophers problem?","width":845},{"text":"Any questions about deadlock? What is preemption? So that means you can't take the resource away from somebody","width":1148},{"text":" Once the philosopher has the fork you can't force him to give it up","width":613},{"text":" Preemption means you can take it away. No preemption means you can't take it away","width":252},{"text":"And actually preemption is a solution to recovering from deadlock","width":266},{"text":"Because one way to solve this would be to say okay Aristotle you need to give up your fork and once he does Socrates can pick it up","width":932},{"text":" Sorry Descartes can pick it up and now he eats, puts it down","width":264},{"text":" And the cycle backs around","width":122},{"text":"And we've now solved our problem","width":258},{"text":" So you can use these types of graphs to help us solve the problem of deadlock as well as detect  deadlock","width":416},{"text":"But the thing to be careful about is it's not easy to determine, in this one it's really easy you can say oh look there's the cycle","width":351},{"text":" I break it and it fixes everything, real systems have more complex cycles and more complex graphs","width":462},{"text":" Ok - It's been a pleasure, thank you","width":227},{"text":"And as far as I know unless he gets stuck in california, Lawrence will be back on Friday","width":351}],

  // Start Lecture Video 15
  // Part 0
  [{"text":"programs that we have you'd be paid 15 dollars an hour for your time and make roughly over a thousand dollars upon completion","width":932},{"text":"last year we did the same study but we've tweaked it and modified it a fair amount","width":356},{"text":"a lot of people really enjoyed this study, they found it was a really great way start exercising, they met a lot of people and being paid 15 dollars an hour to do anything is pretty great","width":634},{"text":"so if you're interested, you can visit our website, insight.beckman.illinois.edu","width":444},{"text":"chris out there has handed out fliers to a bunch of you so if you want to write down any of the information from your neighbor you can do that as well cause we happened to run out of fliers","width":610},{"text":"and you need to be here during the summer in order to participate in this study","width":235},{"text":"so I don't really have a lot of time to speak so does anybody have any questions? any?","width":527},{"text":"alright, thank you for your time","width":306},{"text":"great, so alright so back okay woo cool great","width":557},{"text":"here's one of the things I was talking about in orange county and by the way yes I did bring some warm weather back with me, it's coming this week","width":518},{"text":"actually next week, we'll have a much warmer weather","width":280},{"text":"but anyways this is one of the things I was talking about was how do you run a course where your introduce android programming to absolute beginners and in doing so get the word out that illinois is actually a pretty good place to study computer science","width":912},{"text":"and this is what we did, there were fun lectures, there were students in my lectures, some of them not even CS students but I had a singer song writer","width":567},{"text":"we went to spurlock and saw bardeen's first transistor and then being an engineer of course, he wanted to make not one but two transistors","width":599},{"text":"so that's a music box there right in the middle","width":179},{"text":"and that was fantastic right to actually be able to amplify sound using a small device brought the convention down when bardeen first demonstrated this","width":614},{"text":"and by the way he actually did a drinking song","width":221},{"text":"he played a music note on this and this is during the dry period","width":313},{"text":"so that's how he got his propaganda out that the transistor was a good thing","width":223},{"text":"and then here's me underneath singing the fifty words of java as a song parody","width":394},{"text":"right so we talked about the fact that look programming is hard and had students say things like yeah I built an app and it didn't work","width":472},{"text":"I built another app and it didn't work either and this idea that look programming is a lot about problem solving","width":360},{"text":"yes you have to have the technical knowledge but it's a lot about being like a detective and looking at a crime scene and trying to figure out why did it not work","width":546},{"text":"and then up there in the thinking bubble is another engineering student with his hair going everywhere because he's actually trying to decode at thirty thousand feet as the plane plumets because its simulating zero G","width":810},{"text":"it's simulating being out of space, it's on a gravity dice so that was a lot of fun a couple of years ago","width":363},{"text":"right so anyways, so that's what I was doing and as you saw from the notes, professor rutenbar and also someone from the provost office was there as well","width":672},{"text":"chuck tucker","width":48},{"text":"right so let's now head on over to CS241 content but before that has anyone got any quick questions about this?","width":662},{"text":"no? okay right so let's do today","width":457},{"text":"so I hear you talked about [something] yes? last week with Robin? yeah","width":672},{"text":"we're going to continue thinking about deadlock today but I'm also going to give you some hints about the next MP","width":511},{"text":"which is to make a fast merge sort, a multithreaded merge sort","width":452},{"text":"so first of all let's review a little problem here","width":828},{"text":"and see what we can remember about the coffman conditions","width":758},{"text":"I've got three gardeners walking into a garden shed to start their work","width":227},{"text":"they are after some resources right and so they are going to pick up their tools for the day","width":307},{"text":"in other words they are about to request some resources","width":296},{"text":"obviously we have a potential for a deadlock, we might have two gardeners try to pick up the same shovel or something","width":350},{"text":"okay fortunately we know about coffman conditions","width":280},{"text":"alright so how can we assure that we are avoid deadlock","width":299},{"text":"I want you to through the mists of time remember yes there are four coffman conditions","width":290},{"text":"now here's the challenge, can you actually write down at least one of them","width":361},{"text":"or better, can between you and your neighbor actually write all four without looking them up","width":453},{"text":"make a list, make a list of four items, see if you can remember what they are","width":224},{"text":"what are the conditions for deadlock? if your neighbors not sure, ask another neighbor","width":563},{"text":"[silence]","width":2712},{"text":"right, the best way to learn to remember things is to try to remember things","width":320},{"text":"if you want to program your brain to say hey this stuff is important","width":245},{"text":"and I want to be able to remember this stuff, the best way to do that is to actually keep remembering it, to actually tell your brain oh yeah yeah i'm actually trying to access this information","width":530},{"text":"if you keep doing this, it's going to go into your long term storage","width":212},{"text":"yes cramming for tests gives you a short term cram, it puts stuff into your short term memory","width":344},{"text":"it's good enough for about 6 hours to 24 hours but it does not go into your long term memory","width":398},{"text":"it gets wiped pretty quickly","width":201},{"text":"so if you really actually want to learn this stuff then don't just cram for tests but actually exercise your brain","width":343},{"text":"it's really the practice, just to start with a piece of paper and say hey what do I know about subject X? write it all down","width":359},{"text":"throw that piece of paper away, do it again on a different day","width":218},{"text":"you're telling your brain this stuff is important to me I need to access stuff","width":255},{"text":"um so, right what have we got?","width":333},{"text":"okay first of all let's see give me a hands up if you managed to get at least one","width":407},{"text":"okay hands up if you've got two","width":85},{"text":"hands up if you've got three","width":67},{"text":"hands up if you've got four","width":87},{"text":"alright hands up if you haven't... ah nvm, nice let's keep going","width":383},{"text":"here's one we should know right? mutual exclusion","width":304},{"text":"exclusive access","width":258},{"text":"we need non sharable resources","width":654},{"text":"in other words, if my gardeners are all friendly and they say oh no no let's all use this shovel together","width":432},{"text":"then there won't be any deadlock","width":171},{"text":"but instead of course they're like no I'm grabbing this shovel and get your own","width":438},{"text":"so first of all we need exclusive access","width":128}],
  // Part 1
  [{"text":"access","width":121},{"text":"so you could say non sharable or exclusive access","width":364},{"text":"to a resource","width":74},{"text":"okay what else did you remember?","width":252},{"text":"hold and wait","width":517},{"text":"right so what does hold and wait mean?","width":187},{"text":"if I'm going to be involved in deadlock it means I've already got a whole lot of one resource and I'm not going to let go of it","width":537},{"text":"whilst I'm requesting an waiting for another resource","width":358},{"text":"so I'm part of the problem right? I've got something I've got a pencil and I'm going to wait until I've also got the paper","width":457},{"text":"I'm not going to let go of this thing","width":311},{"text":"alright so this is the toddler approach to sharing","width":193},{"text":"it's mine!","width":117},{"text":"I've got one thing now I want the other thing","width":409},{"text":"so in note form, I might remember it's like okay","width":215},{"text":"I've got at least one thing","width":223},{"text":"and I want more!","width":480},{"text":"well that sounds pretty similar to something else","width":263},{"text":"what's the condition? what's another similar condition to this","width":773},{"text":"no preemption","width":210},{"text":"what do we mean by no pre emption?","width":470},{"text":"yeah, that no one's voluntarily, that the only way that something is released is by a voluntary action","width":658},{"text":"so we can't have another gardener bashing the other one on the head just to get their tools","width":565},{"text":"right or tripping them up","width":126},{"text":"we let each process voluntarily release resources","width":353},{"text":"we can't kind of walk in and say oh I'm sorry I've made a management decision, you know that trough you have? I'm taking it away from you","width":611},{"text":"so there's a note form, we're only doing voluntary releases","width":410},{"text":"only voluntary release resources","width":466},{"text":"okay!","width":151},{"text":"and finally what's our fourth one?","width":302},{"text":"circular wait","width":464},{"text":"my friend wants to go out with B, B wants to go out with C, C is waiting to go out with D, D is waiting to go out with A","width":343},{"text":"we've got a cycle in the resource allocation graph","width":236},{"text":"or in the wait-for graph","width":90},{"text":"that we have a set of processes where the first process will wait for the second process, the second process will wait for the third process and so on and so on and so on until we get back to the first process again","width":877},{"text":"so we have circular wait","width":576},{"text":"okay now are they necessary? are they sufficient?","width":311},{"text":"yes they are necessary and sufficient you have all four of these, you have deadlock","width":399},{"text":"the good news is that if we can break any one of these then we can avoid deadlock","width":393},{"text":"and that is the standard approach to when you are worried about deadlock situations","width":204},{"text":"you backtrack, you write down these four things and say okay let's see we can break one of these conditions","width":366},{"text":"so","width":27},{"text":"I've got my four gardeners or three gardeners walking to a shed","width":230},{"text":"I've already mentioned we can break exclusive access by allowing them to share the resources","width":484},{"text":"how could we break circular wait?","width":756},{"text":"how would you break circular wait?","width":500},{"text":"oh really? come on give me an idea, yes","width":693},{"text":"okay so if we inside the shed numbered all the tools and said pick the lowest tool first that you need","width":677},{"text":"then maybe we can set it up so that there's no circular wait","width":260},{"text":"if we controlled all the gardeners actions and were very careful so that there was no possibility that they would fight over shoes, over shoes? tools!","width":752},{"text":"we could avoid deadlock again, we could make sure that hey you're only going to do this type of gardening today and you have to wait until this person's finished etc","width":529},{"text":"so we might manage the processes so that we never have a circular wait","width":475},{"text":"okay, no preemption like I said we could have one gardener that's the head gardener","width":338},{"text":"and say haha if I see deadlock, you put down that trough right now, right?","width":471},{"text":"we could force processes to give up resources","width":257},{"text":"in practice that's pretty hard to do because maybe the process is actually midway through say writing to a GPU buffer so that's pretty hard","width":536},{"text":"and then hold and wait maybe we can use something we know about synchronization to try to avoid hold and wait, we could say make grabbing all the resources an atomic situation","width":716},{"text":"alright so that's our gardeners ","width":219},{"text":"we'll come back to this later when we talk about dining philosophers again","width":321},{"text":"now I'm going to get started giving some hints about the next MP","width":257},{"text":"remember good ol mergesort?","width":213},{"text":"mergesort where you recurse twice and you say okay get the lower half sorted, get the upper half sorted and then I'm going to make a merge function which combined those two halves","width":770},{"text":"and then my part is done","width":129},{"text":"right so if I've got a big problem","width":297},{"text":"what do I end up doing? I end up making lots and lots of recursive calls until I'm working on smaller problems","width":406},{"text":"let's say these are 256 entries and I'm going to merge these two together","width":473},{"text":"and I'm going to merge these two together right those two merge actions could actually happen simultaneously, concurrently yes? at the same time","width":709},{"text":"great sounds like a job for threads","width":166},{"text":"so we'll have a thread doing this merge and another thread doing this merge at the same time","width":334},{"text":"and eventually say if these were 256 entries each, now we've got one big block of 512 when these are done","width":670},{"text":"I can merge those together","width":753},{"text":"so knowing what you know about pthread_create suppose I said to you ah okay it's a race","width":617},{"text":"we'll have everyone over here try to beat everyone over here to write a parallel multithreaded merge sort code","width":513},{"text":"how would you start? what calls would you call and when? so let's say you've got two minutes now to verbally discuss it with your neighbor and plan, sketch out how you're going to implement this","width":629},{"text":"you've got two minutes before I let you touch a keyboard, what would you talk about? what's your plan of how to accelerate this using threads","width":589},{"text":"ready? go","width":192}],
  // Part 2
  [{"text":"[silence]","width":9075},{"text":"okay so let's sketch out some ideas, remember the basic form of when you call merge sort","width":436},{"text":"is we pass in some sort of like low and high we calculate a mid point","width":449},{"text":"and then the first thing we do is ","width":174},{"text":"say okay do merge sort say from low to mid","width":295},{"text":"and merge sort from mid to high","width":335},{"text":"and then finally, do the merge to take those two halves, copy all the values in order in some sort of scratch space and then copy that back into the main array","width":886},{"text":"so maybe what we could do is say well look let's in these two calls here ","width":348},{"text":"let's do these independently right? so our first idea might be","width":228},{"text":"that instead of calling these directly","width":181},{"text":"I will call pthread_create ","width":578},{"text":"and obviously I want to know","width":300},{"text":"what it's doing","width":78},{"text":"and I'll pass in some sort of task","width":228},{"text":"information","width":56},{"text":"so on the heap I'll make a little struct that says okay go from this value up to this value","width":462},{"text":"I'll create a little struct and I'll pass in a pointer to that struct","width":273},{"text":"and my little function that runs can take that task, read the contents, and when it's finished it will free it","width":350},{"text":"so I'm creating the memory, but the other thread will call it","width":209},{"text":"and similarly on this one, we'll call pthread_create","width":342},{"text":"and we'll call this task two","width":162},{"text":"and then I better wait before doing any merge, I've got to wait for these two threads to finish","width":364},{"text":"okay so then I'm going to call pthread_join on t_id one and pthread_join on t_id two","width":625},{"text":"so that might be my first attempt","width":325},{"text":"so some things to comment on this is first of all, we've got a running thread, why not use it?","width":380},{"text":"so what are we doing? we're saying hey create two threads and then just sit around and block until these two other threads have finished","width":575},{"text":"well that seems a little bit kind of inefficient","width":163},{"text":"we should have actually used the calling thread as well","width":163},{"text":"so we might for example try to speed this up a little bit by saying you know what just execute the second task myself directly","width":661},{"text":"but even this is going to create a lot of threads","width":278},{"text":"way more threads than actual CPU cores that I have","width":265},{"text":"and you could imagine that say I'm dealing with several megabytes of data","width":411},{"text":"and I'm splitting into these little two hundred and fifty six integers","width":176},{"text":"then that's many many threads","width":386},{"text":"so maybe we should be a little bit more clever in how we do this and get even better performance","width":366},{"text":"and that's where the idea of a thread pool comes in","width":214},{"text":"here's what we'll do, we'll make a preset number of threads","width":287},{"text":"and then we'll treat them to work, we'll actually separate them from the actual tasks that we want each one to do","width":680},{"text":"instead we'll put our tasks into a queue","width":226},{"text":"hey guess what, this is starting a bit like producer consumer","width":218},{"text":"our threads will go to the queue and say hey what's next what's next give me some work","width":296},{"text":"if there's no work for them to currently do","width":167},{"text":"that request will block until another thread puts some work into the queue","width":490},{"text":"right? so we've actually got conceptually now a whole load of threads going back to the queue saying okay I'm free give me some more work","width":439},{"text":"give me a little task structure and that might even have a pointer to a function","width":410},{"text":"and some other additional notes","width":120},{"text":"and integers etc and pointers to floats, whatever to actually perform the work","width":383},{"text":"so we think of our little thread as a little worker","width":218},{"text":"that just keeps going back to this and say okay I'm ready to consume the next task, okay?","width":299},{"text":"so our second idea then is to do thread pool","width":559},{"text":"that uses the ideas we've learned from the producer consumer and its consumer is consuming","width":600},{"text":"tasks","width":775},{"text":"now we have to be a little bit careful in this because suppose we've just finished creating let's say this block","width":823},{"text":"right? our task was to do the merge and to create this block","width":300},{"text":"another thing might be to say okay not I've finished this I should put in a new task into the producer","width":357},{"text":"I should submit a new job and that is to do this big merge","width":338},{"text":"but we have to be careful, we have to make sure that the other half of the data is actually ready is actually finished","width":592},{"text":"now, I'm not going to elaborate all of the ways you could do this because we're going to do a little competition and see who can actually write the fastest merge sort","width":780},{"text":"but I'll give you one idea","width":128},{"text":"and that's this: don't start on all of the five hundred and twelve jobs until you've finished all of the smaller jobs","width":512}],
  // Part 3
  [{"text":"and note the key word here is finished","width":394},{"text":"it might be there's no two hundred and fifty six jobs left inside the queue","width":296},{"text":"but that doesn't mean that they're finished","width":64},{"text":"there still could be another thread actually working on it, actually generating this data still","width":394},{"text":"so you need in your program a concept that no no, these jobs really have finished at this level","width":394},{"text":"I've finally got all of those small bits created into larger chunks and so I'm ready to start working on the larger jobs","width":656},{"text":"now a little bit of thought will tell you that you could probably even improve upon that idea as well but then it's starts getting a little bit more complicated","width":547},{"text":"as to improving the efficiency of this, but this is a good start","width":266},{"text":"and I encourage you to do this iteratively and to use subversion so that when you got a working version","width":356},{"text":"either copy it or put it aside so that when you blow it up etc, you can at least go back to a best working version","width":555},{"text":"alright so that's our thoughts about mergesort and in working on this you're going to learn about thread pools and thinking about producers, consumers, and you'll also think about barriers","width":674},{"text":"you're stopping work from happening until something is finished","width":299},{"text":"so just like the malloc mp, this again is a rite of passage","width":270},{"text":"but it's an asynchronous rite of passage where malloc was about pointers","width":433},{"text":"this is about concurrency and parallelism ","width":318},{"text":"right so you'll be learning about barriers, thread pools and producer consumers in the next MP","width":404},{"text":"questions?","width":427},{"text":"no questions","width":113},{"text":"are you ready for unofficial?","width":283},{"text":"you can see I'm wearing green myself alright","width":384},{"text":"so that was a context switch","width":255},{"text":"we flip from one subject to another subject","width":213},{"text":"except in systems programming a context switch means something a bit more specific than just simply switching the conversation","width":521},{"text":"what we're talking about is the idea that our CPU needs to be arrested, needs to stop working on one particular process and it needs to change contexts so it can start work on another process","width":867},{"text":"we can have of course many more processes which are active than actual CPUs in our system","width":474},{"text":"but a CPU could only work on one thing at a time","width":187},{"text":"it's got a whole load of registers and one of those of course it the program counter as to hey what instructions should it work on next?","width":472},{"text":"and we've got this idea of virtual memory, that for a particular process, address blah blah blah blah corresponds to this piece of RAM where we've got this particular state in so that's all about one process","width":718},{"text":"so when we do a context switch, we've got to stop all this, we've got to suspend the current process","width":1187},{"text":"and somehow store the active state of the CPU","width":1449},{"text":"so if you take an operating systems class, you'll discover that this stuff is stored inside the process control block","width":746},{"text":"and all this is happening deep inside the operating system, inside the kernel, the very heart of the operating system","width":406},{"text":"that manages processes, that manages the actual deep resources of the system for each process","width":498},{"text":"so obviously we have to store the program counter and obviously you have to store all the data registers","width":264},{"text":"so that when we want to reinvigorate this process and bring it back to life","width":297},{"text":"we can preset the CPU and then click the pause button again and start it off and off it goes and the little process never knew that it was put on ice","width":661},{"text":"and we reuse the CPU for another process","width":417},{"text":"so we store the active state of the CPU","width":199},{"text":"right when do you think this happens?","width":413},{"text":"every tuesday?","width":552},{"text":"come on give me a guess, yes!","width":450},{"text":"okay what if I have more processes than I have number of cores","width":172},{"text":"and I want to switch my shamrock to a diff yeah","width":377},{"text":"yes? what about virtual memory?","width":695},{"text":"yes if you want to store things to disk, yeah so it happens when we want to switch one process to another ","width":425},{"text":"and that can happen if our first process blocks","width":526},{"text":"so for example, let's say you call open or you call read","width":373},{"text":"and your waiting for some bytes to arrive from the user typing something or from the bytes that arrive over the network or the bytes to arrive from the disk","width":599},{"text":"your process cannot continue","width":119},{"text":"let's say that you call pthread_join or you call waitpid()","width":449},{"text":"your process cannot execute anymore statements right? it's waiting for an event","width":381},{"text":"where's that happening? it's when your process is deep inside an operating system call","width":392},{"text":"waiting for an event to arrive","width":304},{"text":"now operating systems are not going to return immediately","width":134},{"text":"there's nothing more for your process to do right now","width":154},{"text":"so that'll be a good time to do a context switch","width":338},{"text":"alright your process is no longer able to run","width":219},{"text":"so it happened when a process blocks","width":294},{"text":"it can also happen, in some operating systems, when a little timer goes off","width":344},{"text":"I'm sorry you've had too much time with the ice cream, the ice cream being the CPU","width":341},{"text":"I'm going to give it to someone else now","width":356},{"text":"so this brings us to scheduling","width":459},{"text":"but if we were to look at this further you'd say okay, when a process has exhausted its time quanta","width":834},{"text":"so if I'm going to let you have the CPUs for 100 milliseconds and we notice that you've had it now for 100 milliseconds I'm sorry I'm going to give the CPU to someone else","width":752},{"text":"so it happened when the process blocks and when the process exhausts its time quantas is two examples for when we might see a context switch when we might give the CPU to a different process","width":761},{"text":"so what does it actually mean to give it a different process?","width":117},{"text":"okay we've talked about the CPU but of course another critical part of the process is the amazing thing called virtual memory","width":576},{"text":"and I want to spend a little bit of time today talking about virtual memory","width":192}],
  // Part 4
  [{"text":"what we'll do we'll make a very simple piece of virtual memory","width":637},{"text":"and we'll let the hardware people actually make it real right?","width":216},{"text":"we're going to do it just today, the kind of five minute version and we'll let someone else worry about the actual hardware details","width":589},{"text":"here's the game we're going to play","width":181},{"text":"memory, real memory of course is expensive","width":306},{"text":"we'd love to have more of it but we're always constrained by the cost of memory","width":300},{"text":"the only really really great thing about memory is that it doesn't take up too much power","width":562},{"text":"we would like to be able to have processes that can actually use more memory than we physically brought","width":548},{"text":"we would like to have more than one processes believing that they've got all the memory in the world and that's where virtual memory comes in","width":496},{"text":"we're going to say make the addresses that the processes use","width":342},{"text":"only indirectly correspond to the actual ram or actual physical memory that we have on the machine","width":561},{"text":"so we need to do some sort of lookup","width":138},{"text":"anytime your process actually does a read or write","width":214},{"text":"we actually at the end of the day need to connect that to some RAM","width":173},{"text":"we actually need to connect it to a physical address","width":609},{"text":"so here is my physical address","width":293},{"text":"and what I'm going to do is divide it up into chunks","width":328},{"text":"and these chunks are called pages","width":401},{"text":"and I'm going to work with pages which are about 4000 bytes, 4096 bytes","width":850},{"text":"so when are we going to use this memory? ah all the time of course right?","width":424},{"text":"so if you've got an instruction like a CPU instruction that says okay increment register A","width":680},{"text":"just reading the instruction has to be in memory somewhere","width":446},{"text":"if you've got an instruction that says load from address 47000","width":337},{"text":"not only do we need the opcodes to be in memory, we need 47000 to correspond to some memory","width":446},{"text":"so I'm using my virtual memory addresses all the time","width":172},{"text":"not just for the data but for the code as well","width":198},{"text":"anytime you write a line of C code, this virtual memory lookup is happening for every single one of those","width":371},{"text":"we need to be able to somehow translate our virtual memory address into a place in memory","width":837},{"text":"so here's the big trick","width":183},{"text":"take your virtual memory address, get a really sharp knife and cut it conceptually into two pieces","width":344},{"text":"preheat the oven to two hundred degrees... no forget that bit, right","width":240},{"text":"we've got the lowest twelve bits which we are just simply going to ignore for now","width":305},{"text":"because what we'll do with those is that we'll just simply use them as an offset","width":600},{"text":"in other words, once I've decided which piece of memory, which memory frame or physical frame","width":490},{"text":"which page I'm going to use here","width":185},{"text":"Of those 4096 bytes, I need to tell you which of those I'm going to use and that's where my 12 lowest bit comes into play because guess what 2^12 is 4096","width":636},{"text":"so I can use those lowest twelve bits as just an offset into any one of these particular things","width":533},{"text":"the remaining bits and because I'm working in a little 32 bit system, I now need to map to memory","width":810},{"text":"okay so first of all, how many of these 2^20, how many bit combinations is that? how big is 2^20","width":1027},{"text":"okay well let's, i'll give you a clue, it's 2^10 times 2^10 how big is 2^10?","width":623},{"text":"2^10 is 1024","width":182},{"text":"so we're talking 1024 squared in other words a million","width":440},{"text":"a binary million","width":120},{"text":"a megabyte","width":86},{"text":"I've got a million entries, a million possible numbers up here","width":545},{"text":"we're gonna give these numbers a name","width":276},{"text":"we're going to call this the page number","width":582},{"text":"and we better give these pieces of memory a name","width":281},{"text":"we're gonna call them frame","width":345},{"text":"so, I need to convert one to the other","width":351},{"text":"right so page frame a miracle occurs we map it to a particular frame","width":734},{"text":"here's a really easy way to do it","width":134},{"text":"let's just have a table in memory","width":297},{"text":"of a million entriese","width":118},{"text":"right so we take our twenty bits","width":211},{"text":"somewhere in memory in a well defined location","width":646},{"text":"we need a table big enough for 2^20 entries","width":580},{"text":"and these just hold the frame number","width":172},{"text":"so if your looking say at this one","width":297},{"text":"then it turns out that you're going to use this particular frame of memory","width":377},{"text":"if you're looking at this piece of memory, it turns out that you need this one","width":394},{"text":"if you're looking at this piece of memory, it turns out that you need this one","width":459},{"text":"if you're looking at this piece of memory, haha, no it turns out that you can't look at that piece of memory","width":396},{"text":"if you try to look at that piece of memory, BOOM, we're gonna blow your process up","width":491},{"text":"do you remember things like seg faults?","width":187},{"text":"this is it!","width":112},{"text":"this is at that moment when we try to look at a particular page number","width":211},{"text":"and we say ah hah guess what, that's not actually mapped to any real memory","width":257},{"text":"ah ah ah, you can't do that!","width":281},{"text":"so we can now protect portions of our memory, we don't actually have to map all those addresses","width":315},{"text":"so when we say to our process hey pick a memory location, pick any memory location, do you feel lucky punk?","width":368},{"text":"alright if our programs are well written then we'll stick on the valid page numbers","width":363},{"text":"if their not then our operating system, our kernel will notice that it's trying to read an impossible entry inside here","width":720},{"text":"right okay so this is called a page table","width":363},{"text":"and we have one of these for each process","width":361},{"text":"alright let's see if you're awake ","width":123},{"text":"I know it's up silly question it's a friday. um, let's um","width":338},{"text":"let's figure out this, what would happen if we could actually write to our own page table?","width":569},{"text":"how machiavellian do you feel today?","width":264},{"text":"what could you do if you could change your own page table","width":256}],
  // Part 5
  [{"text":"okay i've got one person here","width":458},{"text":"if you've got an idea explain it to your neighbor","width":192},{"text":"[silence]","width":1881},{"text":"okay let me give you a clue ","width":185},{"text":"what about some of these other frames that I didn't bother to draw arrows to","width":246},{"text":"guess what, somewhere else, there is another process","width":499},{"text":"that has its own page table","width":201},{"text":"that says okay I've got some memory here please I've got some memory here","width":186},{"text":"so if you could change your own page table","width":247},{"text":"this is like escaping the matrix right?","width":168},{"text":"you've got out now you can arbitrarily read any piece of memory in your system wahahahahahahha","width":416},{"text":"in fact arbitrarily change any piece of memory in your system","width":161},{"text":"you say, actually, okay, I'm actually going to map this area say to this one in here and that's pretty useful because this is where this other process is storing all the secret passwords etc","width":699},{"text":"so you can break the security model of the operating system","width":328},{"text":"so each page table actually, each process has its own page table","width":414},{"text":"last thing I want to say about this","width":238},{"text":"is we can do some really clever tricks now we've got this mechanism","width":391},{"text":"here's what I'm going to do","width":99},{"text":"you see this entry down here? I'll just shade it in","width":198},{"text":"it's essentially a valid entry","width":158},{"text":"but right now it doesn't point anywhere","width":437},{"text":"why? because I decided that the memory that was being used there","width":388},{"text":"actually isn't being used by this process","width":162},{"text":"it hasn't touched it for at least 10 seconds","width":212},{"text":"and I've got other processes in the system that are starved for memory","width":224},{"text":"they would love to have more memory","width":94},{"text":"so I'm going to reallocate one of these pieces of RAM","width":238},{"text":"and say well actually you can be used by some other process","width":504},{"text":"so right now, it's as if all the atoms behind you in the back of siebel","width":305},{"text":"are unnecessary you haven't looked at them for ages right? you haven't collapsed their wave function, they are not part of this room at all","width":339},{"text":"but if you were to turn your head and actually try to look at that location","width":322},{"text":"we'll make it reappear","width":220},{"text":"and that's what we can do with virtual memory","width":157},{"text":"if at some stage in the future, our process decides to use some addresses down here","width":376},{"text":"then oops we run into a problem","width":168},{"text":"the kernel at that point is notified and we quickly say oop I tell you what I'll connect this up to somewhere say here","width":628},{"text":"I'll put in the right data in here and then we'll let our process go","width":316},{"text":"and we'll do that as fast as we can and the process will never know wahahahaha","width":474},{"text":"because it tries this memory access, we stopped it at that moment and we only let it continue after we got all of the data ready to go","width":790},{"text":"so we can play these tricks all the time and part of a operating system is to figure out the best use of this memory and then update the page tables accordingly","width":756},{"text":"last thing I want you think about is that we can set attributes on these page tables like","width":644},{"text":"this entry is read only","width":260},{"text":"and if we did that, that means we can safely share it with other processes","width":434},{"text":"knowing that none of them can change it","width":149},{"text":"so for example, we only need to have the C library and other libraries your process might use in actual physical memory once","width":595},{"text":"and then everybody else can share the same block of memory","width":426},{"text":"because none of them can change it","width":242},{"text":"so we can can set attributes on these pages","width":420},{"text":"right so that's our simple page table","width":160},{"text":"and I hope now you can see it's a mechanism so we can escape from virtual memory into real memory","width":397},{"text":"how do we do it? we took a really sharp knife, we took our memory address and we cleaved it into the offset and a page number","width":461},{"text":"and then we use a page table  to look up where to go in memory","width":374},{"text":"and you might ask where do you put this page table and the answer is in memory","width":382},{"text":"but of course we can't actually look [something] so this has to be a physical part of memory somewhere and we can't use the same mechanism to look itself up","width":924},{"text":"so how big is my page table in this case?","width":261},{"text":"well I said it had 2^20 entries and each one needs to be about 32 bits","width":445},{"text":"so it's going to be four megabytes in size","width":395},{"text":"why? because there are 2^20 entries and each one was 4 bytes","width":446},{"text":"so that we had enough bits to talk about every possible piece of RAM in my system","width":628},{"text":"right that's enough about virtual memory today are you ready for page 2?","width":235},{"text":"page 2!","width":178},{"text":"okay first of all yes it's true there is a quiz on monday","width":554},{"text":"okay what can you expect on this? what should we be able to do","width":223},{"text":"we should be able to implement a barrier using condition variables, semaphores that kind of thing","width":323},{"text":"you should understand the three steps of condition wait the fact that it unlocks the mutex before waiting","width":544},{"text":"and then relocks before returning ","width":223},{"text":"mutual exclusion, we should be able to make a ring buffer","width":292},{"text":"using semaphores or condition variables","width":149},{"text":"so what you did in section yesterday would be useful","width":198},{"text":"and we should be able to spot basic synchronization errors in semaphores mutexes and in condition variables","width":476},{"text":"you now know about the reader writer problem","width":158},{"text":"and you can see the notes on github about what we call the writers preference solution","width":421},{"text":"where if a writer comes along we delay any new readers which wish to read","width":475},{"text":"the writer still needs to wait for existing readers but we put new readers into a pen","width":358},{"text":"like new sheep arriving they cannot continue until the reader gets its chance to do the writing","width":462},{"text":"and then finally don't forget our dear old dining philosophers and coffman conditions","width":342},{"text":"so, let's talk about that","width":450},{"text":"the dining philosophers problem is a classic computer science problem, robin introduced it already","width":325},{"text":"and uh, don't be surprised if it comes up in interviews","width":299},{"text":"what is it? what's it mean? what's it about? it's not about philosophers, it's not a drinking song","width":379},{"text":"it's about concurrency, it's about deadlock and it exploring different solutions to deadlock","width":384}],
  // Part 6
  [{"text":"it's kind of a fun thing to try and implement","width":578},{"text":"so we can discuss so called candidate solutions and we can quickly bring out our coffman conditions and say okay does it satisfy all coffman conditions? is deadlock possible?","width":822},{"text":"or does it break them in some way?","width":202},{"text":"so what if we did this?","width":273},{"text":"we'll pick up a left chopstick","width":177},{"text":"after we've done that we pick up the right","width":207},{"text":"after we've succeeded at that, great we can eat and release","width":345},{"text":"is deadlock possible?","width":793},{"text":"right well clearly we have exclusive access, we're not sharing the chopsticks","width":268},{"text":"yes we can have circular wait, what else?","width":297},{"text":"hold and wait yes we've got hold and wait","width":323},{"text":"because we are grabbing one resource and we're not letting go until after we picked up the second resource so we have hold and wait as well","width":784},{"text":"so what have I missed?","width":187},{"text":"mutual exclusion, circular wait, hold and wait and preemption, no one is telling these philosophers to put them down so yes we have deadlock","width":735},{"text":"the host is not saying okay put that down alright","width":243},{"text":"what if we try to do this the other way? we picked up the right one and picked up the left","width":221},{"text":"ahh we can still have deadlock as well same condition applies this time of course we would have if each one is picking up the right then we could...","width":963},{"text":"we can see we've got","width":143},{"text":"we can form a circle of all the philosophers waiting for the other chopstick, they all manage to pick up the right chopstick at the same time and they never get to pick up the left chopstick because it's being held by another philosopher","width":900},{"text":"so they all get stuck holding one chopstick","width":196},{"text":"so yes again we have deadlock","width":344},{"text":"what about if we had eat what I tell you","width":216},{"text":"could we use this to avoid deadlock?","width":271},{"text":"yes, if we're in control, if we have a birds eye view of the table we can ensure that there's never ever circular wait","width":481},{"text":"we could avoid deadlock","width":274},{"text":"so this is okay but now it requires some sort of absolute look at the table","width":508},{"text":"and a complete understanding of the state","width":217},{"text":"so this is potentially okay provided I understand deadlock, provided my solution above this can avoid...","width":553},{"text":"we can avoid deadlock","width":404},{"text":"okay what about this one? pick up left chopstick, try to pick up right chopstick, if that doesn't work","width":469},{"text":"then release both and restart","width":340},{"text":"deadlock?","width":233},{"text":"it's not deadlock","width":263},{"text":"it's not deadlock because there's no hold and wait, we've fixed...","width":457},{"text":"hold and wait","width":251},{"text":"but...","width":101},{"text":"this is a kind of classic approach to try and solve these kinds of problems","width":230},{"text":"that oh we didn't get both resources we'll just back out a bit and retry","width":289},{"text":"these kinds of implementations usually suffer from livelock","width":478},{"text":"usually what you'll end up with is one poor philosopher that doesn't get to eat as much as the others possibly none at all","width":494},{"text":"because it never gets a chance to pick up both","width":209},{"text":"it's continuously picking up one chopstick and putting it down, picking it up and putting it down so you're wasting a lot of CPU time attempting to get both","width":554},{"text":"but it's in fact very hard to get both","width":258},{"text":"so yes you can avoid deadlock but then you have to worry about livelock","width":345},{"text":"and with that have a wonderful weekend we'll let you know shortly when the next MP is out ","width":373},{"text":"and as always I have time now if you have any questions for me","width":274},{"text":"thank you very much, have a fun and safe unofficial","width":320}],

  // Start Lecture Video 16 (QUIZ NO CAPTIONS)

  // Start Lecture Video 17
  // Part 0
  [{"text":"So good morning ladies and gentlemen and welcome to another exciting episode of CS 241","width":714},{"text":"...the Dining Philosopher's Code Edition!","width":163},{"text":"Alright, are you ready for some synchronization?","width":305},{"text":"Okay, so, here we go. What we're gonna do today is we're gonna talk about dining philosopher's, we're gonna look at what makes a good dining philosopher's solution, we're gonna look at what makes a bad dining philosopher's solution, even if you find it on the internet, it's probably wrong.","width":790},{"text":"We will also","width":187},{"text":"...make a fat wallet, and we'll see about that in a little bit. Also, if you're looking for your exam script because you forgot to put your netid or something else on it, I've got them all in the corner over there, so you're welcome to come down anytime during lecture or after lecture to help find your exam script in that pile.","width":1102},{"text":"Okay, and, so let's get started. Right, so.","width":200},{"text":"Dining philosopher's... Hello! Welcome to lecture, what's dining philosopher's about?","width":735},{"text":"Okay, thank you, yes! It's a resource problem! It's about we've got some philosopher's sitting at a table and sometimes they want to be inside a critical section or do something and they gotta try and grab their fork, or, if you prefer, chopstick...","width":808},{"text":"Doesn't really matter to the actual conceptual problem, right?","width":178},{"text":"We can deal with abstraction here...","width":109},{"text":"And our problem is that we might run into deadlock because they want to grab two at the same time, and we've talked about deadlock. What are the four necessary and sufficient conditions for deadlock? Give me one...","width":831},{"text":"You don't know. Okay, good answer! Alright, give me another one:","width":185},{"text":"Circular wait! Thank you, yes! What is circular wait?","width":455},{"text":"Okay, yes, it's from they're spinning around really fast here... no, no, yes, thank you! Yes, correct. It's when we have a set of processes where there's a cycle in the dependency graph, where one has to wait for the next one wait for the next... Okay, give me another one!","width":860},{"text":"No preemption! What do you mean by that?","width":123},{"text":"Thank you! Yes, correct.","width":170},{"text":"Okay, so what do you mean by no preemption?","width":175},{"text":"Yes! Correct, okay great!","width":141},{"text":"Correct, you can, we're not gonna interrupt a process once it's got a lock","width":441},{"text":"Okay, right, it's not like you've heard now. Like, yeah okay","width":157},{"text":"Okay","width":104},{"text":"Right, so we've done two. Any others?","width":283},{"text":"Mutual exclusion! What do you mean by that?","width":238},{"text":"Okay, yeah, we're both talking at the same time, yes!","width":232},{"text":"Right, so, mutual exclusion: that once a resource has a lock, no one else can use that lock at the same time.","width":628},{"text":"Okay, so obviously with our gardener tools example, if the gardeners choose to be nice and actually share tools at the same time, there's no problem! It's only when they say, \"no, I want exclusive access to this!\" Because there we have a possibility.","width":697},{"text":"Right, have we forgotten anything?","width":304},{"text":"Hold and wait, yes!","width":107},{"text":"I need to be holding onto at least one resource, and wanted to get another one, in order to get a circular dependency.","width":585},{"text":"If I only had one resource, that's not a problem. It's only when I try to grab two.","width":351},{"text":"Right, so, you see dining philosopher's conceptually, this was used as basically as a academic discussion problem for many, many papers because it's simple to describe, it encapsulates a lot of the problems of asynchronous systems, systems trying to do things at the same time.","width":1184},{"text":"And we can look at different solutions and say why they suck.","width":384},{"text":"And analyze what the problem with them is. And do all philosophers get to eat the same amount? Could it be, for example, the last philosopher does eat, there's no possibility for deadlock, but maybe when we actually run an experiment we discover that they're less likely to be able to get both forks. So, there's actually quite a lot of literature about dining philosopher's.","width":1181},{"text":"And, it would be embarrassing to be a computer scientist and not know about this.","width":291},{"text":"And not know about dining philosopher's.","width":110},{"text":"Hence, we teach you at UIUC.","width":91},{"text":"So let's actually today look at some code, and that's what I've got in front of you right now.","width":418},{"text":"Because I don't know about you, but being a recovering physicist, you know, I like to experiment with stuff and play with stuff.","width":461},{"text":"Okay, overhead, let's start off with this...","width":143},{"text":"Actually build things, and kind of kick them until they don't work.","width":296},{"text":"You know, standard kind of experimental physics stuff, right? We like to, just, play with things and see what happens.","width":424},{"text":"So, I thought okay, let's build dining philosopher's and then see what happens, and you can download this stuff from the web.","width":344},{"text":"And so here's how we might start:","width":208},{"text":"Right, I need to conceptualize each philosopher and so I'm going to give them a name, there will be a thread associated with each philosopher,","width":593},{"text":"and whether they've failed or not to pick up their two forks, or whether they've managed to lock both mutexes.","width":526},{"text":"Okay, so, here's our struct. Why do we do typedef? Because I don't wanna have to write \"struct philosopher\" all the time, so,","width":415},{"text":"so, here's how we read this, we say here look, this is the actual type, I'm defining inside here,","width":301},{"text":"and here's the alias, \"Philosopher.\"","width":156},{"text":"Then I have a global flag \"running\"; so at some point, I want to stop my program.","width":368},{"text":"And if we spin down to the bottom of this code, here's the plan: right, we're gonna sleep for 40 seconds in our main thread, then we change \"running\" to zero,","width":661},{"text":"and if everything has worked okay, then at some point, our philosophers won't have deadlocked, and they will escape their loop","width":452},{"text":"and we'll be able to finish.","width":143},{"text":"So, then we can call \"pthread_join\" on all of them, and exit.","width":328},{"text":"Oops, I'm sorry, exit down here with \"return 0\".","width":199},{"text":"If we couldn't join on them, for whatever reason, if they failed somehow, then we'll know about it at this loop here, so we can find out whether our solution is good or not.","width":638},{"text":"Okay, let's check that those mutex locks really were initialized...","width":351},{"text":"Okay, so, here let's go back and have a look at the top of the code... where is it...","width":358},{"text":"Okay, so we've got our \"nameList\",","width":228},{"text":"we've got all of our forks,","width":153},{"text":"so, we're actually gonna define our forks as automatic variables inside our main method","width":434},{"text":"that means we cannot use this static initializer, we better call \"pthread_mutex_init\" here because the mutexes are actually on the stack now.","width":726},{"text":"Okay, so now let's pass in the address of each fork","width":216},{"text":"there's no special options we need to set today, and oh look how robust this code is: it even checks the return value to see if it failed. Right, so if we get past here, we know for sure that all those mutex locks have been initialized.","width":955},{"text":"Now it's time to set up each philosopher.","width":224},{"text":"So, each philosopher just has a pointer to a left and right fork.","width":390},{"text":"And fortunately, we know about modular arithmetic, so that the very last philosopher, the index 4, will get the 0th fork again because we go 'round, right, so now each philosopher has a left fork and a right fork.","width":1156},{"text":"And the last thing we can do with a philosopher is stop them! We've got a \"Philosophunction\" called \"Phil\",","width":444},{"text":"which we're gonna run and we give it a pointer to our struct.","width":396},{"text":"So, when you work on the MP, you'll be reusing mutex locks as well, so hopefully this lecture is useful to you, and, oh yeah, that's something else we'll talk about in a little bit.","width":792},{"text":"Right, so that's our main loop; pretty simple, right? Just initialize everything, sleep 40 seconds, and then, just like any dinner party, you have to clean up at the end.","width":702},{"text":"That's not the interesting bit. Here's the interesting bit: page two!","width":320}],
  // Part 1
  [{"text":"Okay","width":173},{"text":"First interesting comment","width":256},{"text":"This actually claims to be a solution to the dining philosopher's. If you put dining philosopher's solution, this is one of the pages you find","width":456},{"text":"But, let's see if you, today are more intelligent, no more can do more system programming than the interweb","width":461},{"text":"Because today we're gonna find out if this code is correct or not","width":320},{"text":"Right so let's see how it works","width":141},{"text":"Remember, this is gonna be run for each philosopher","width":201},{"text":"so the first thing we'll do is we'll take that pointer that was passed and we'll cast it so now we've got a pointer for each thread","width":439},{"text":"each thread has its own pointer to that little struct that we've set up, okay?","width":277},{"text":"And let's see what we do then... okay, so","width":341},{"text":"Our philosopher has two states, right","width":99},{"text":"They're either sleeping or eating.","width":235},{"text":"Well, that's not quite true because we also have this middle state where we're trying to eat","width":296},{"text":"Right but most of the time philosophers get paid to sleep","width":384},{"text":"a.k.a. think, right? so","width":82},{"text":"Between 1 and 8 seconds, our philosopher's not doing much, just sleeping","width":316},{"text":"but occasionally, they wake themselves up with a fantastic thought","width":222},{"text":"\"I am! To be or not to be!\" Or something like that.","width":155},{"text":"And they say \"oh, I'm kind of hungry now!\" Right, this philosophy is kind of, uh... ha, makes me hungry.","width":351},{"text":"Right, so what do we do","width":124},{"text":"We get our two forks","width":165},{"text":"We announce that we're hungry","width":188},{"text":"and then we try to pick up, we try to lock our two mutexes","width":269},{"text":"now, here's some cleverness in this code here, here's a function we haven't seen before:","width":416},{"text":"we're gonna do something called \"trylock\"","width":247},{"text":"what trylock does is it trys to grab the resource, but rather than getting stuck, rather than blocking if that mutex is already locked, it just immediately returns.","width":652},{"text":"it immediately comes back to you and says \"I'm sorry, that resource is actually currently locked\".","width":544},{"text":"So, you can play again later if you want, but you didn't actually get to lock the resource","width":288},{"text":"So either two things happens:","width":80},{"text":"either you lock the resource and continue","width":151},{"text":"or it returns a non zero value and you continue","width":268},{"text":"right, so this code tries to avoid deadlock because you and I know","width":268},{"text":"something terrible could happen, right?","width":115},{"text":"something terrible... if every philosopher picked up their left fork first at exactly the same time,","width":494},{"text":"we've got a problem","width":87},{"text":"every philosopher will be holding onto their left fork trying to grab the right fork and they wouldn't because there's another philosopher saying \"get your grubby mitts off that, that's mine!\"","width":536},{"text":"Yes,","width":44},{"text":"so that's what we're trying to avoid; we use this \"trylock\" to prevent that.","width":455},{"text":"So what do I do if it failed? If it failed...","width":284},{"text":"We let go of our left fork.","width":186},{"text":"Brilliant, right? We got no hold and wait anymore. Alright, so, look at this:","width":478},{"text":"No hold and wait... We could actually annotate this code with some stuff that shows that we actually know a bit of computer science, or at least, more than the people at rosetta's","width":608},{"text":"Rosetta Code.","width":77},{"text":"Okay, so look, no hold and wait.","width":467},{"text":"And then we do something funky here:","width":149},{"text":"And we go around again.","width":254},{"text":"This, unfortunately, ladies and gentlemen, is where I stop talking, and your brain starts working.","width":409},{"text":"At this moment in time, I'm gonna ask you with either your imaginary friend or a neighbor of your choice, to figure out if this code is any good.","width":588},{"text":"If it is good, why? If it is not good, why?","width":313},{"text":"Okay, so I'm gonna give you a few minutes to look at this code and analyze it and be prepared to say something about it.","width":448}],
  // Part 2
  [{"text":"I have a story once about a ","width":5706},{"text":"A friend that got 200 applicants for one job, so","width":462},{"text":"The programmers, the software developers were saying \"ha! how do you deal with like this big stack of resumes?\"","width":407},{"text":"So the boss picked up exactly half the pile, put them in the trash, and said \"I don't like dealing with unlucky people.\"","width":373},{"text":"(laughter)","width":126},{"text":"Alright, so let's have a look at this code:","width":86},{"text":"Right, so","width":55},{"text":"Here's the plan, right: we know about circular wait, so","width":233},{"text":"What we're trying to do is, if we fail, we'll swap our ideas of left and rights and next time around the loop, we won't actually be picking up the fork on the left, we'll actually be picking up the fork on our right.","width":795},{"text":"And then we'll try to pick up the other one.","width":112},{"text":"And if that fails again,","width":148},{"text":"Well, we swap our ideas of left and right again","width":130},{"text":"And so we end up picking up on the left first, and then on the right.","width":329},{"text":"So, does this code work?","width":552},{"text":"If you're in your Google interview, and someone says \"okay, look at this code! Does it work?\"","width":470},{"text":"What would you say?","width":123},{"text":"\"Excuse me, I need to run back to CS 241!\"","width":109},{"text":"\"Can I make a phone a friend?\"","width":261},{"text":"Right, what do people think?","width":372},{"text":"I'm sorry","width":141},{"text":"Okay, it tries to break circular wait","width":141},{"text":"By not having a... by saying, \"okay, I'll pick up the other side first\"","width":326},{"text":"Alright","width":47},{"text":"True, this last kind of probably the thinking behind it this","width":191},{"text":"But...","width":58},{"text":"Does the code actually run? Will it deadlock ever, or are you confident this code will never deadlock?","width":456},{"text":"Remember, our understanding of this is not just about dining philosophers; it's about being able to write multithreaded code in general and spot problems.","width":479},{"text":"Yes?","width":899},{"text":"Yeah.","width":761},{"text":"So you, are you saying there is deadlock or not deadlock?","width":298},{"text":"So you're saying there's potential for livelock where one philosopher never gets to eat or two are constantly interchanging?","width":505},{"text":"Okay, I'll come back to that, I'll the point in a moment. Yes?","width":407},{"text":"Uh huh?","width":169},{"text":"Yep.","width":579},{"text":"So, when you say \"pthread_mutex_lock\" line at the same time, which lock line are you talking about?","width":985},{"text":"This one?","width":78},{"text":"Okay.","width":76},{"text":"Right.","width":92},{"text":"So","width":101},{"text":"Let's talk about the \"live lock\" thing, right.","width":296},{"text":"So","width":123},{"text":"Yes, and I'll come back to that. Right, so let's talk about the first question, right: could there be live-lock here?","width":294},{"text":"Alright, live-lock, remember, is when we don't have deadlock, our processes haven't actually just ground to a halt, waiting for an event; no, they're dancing around, trying to make progress, but they never actually make progress.","width":681},{"text":"They never actually are able to proceed, they're always saying, \"okay, can I take it now? Can I take it now?\"","width":354},{"text":"It's, it's like trying to make a continuous kind of phone calls and you're never actually getting through","width":390},{"text":"You're using up your, you're running your CPU program but it doesn't actually achieve what you want it to. So you still suffer from starvation.","width":512},{"text":"So, the code tries to prevent live-lock","width":288},{"text":"That's kind of the idea behind this \"tries_left\" thing.","width":280},{"text":"We don't want a philosopher to starve; if it kind of keeps trying to pick up one fork and it fails to pick up the second one, 'cuz our trylock says \"I'm sorry, another philosopher has already got it\"","width":736},{"text":"Eventually, the philosopher gets angry and says \"I'm not standing for this live-lock business. I don't wanna keep holding onto the left, picking up the right, letting go, picking up, letting go, picking up, letting go, picking...\" you know.","width":691},{"text":"\"This is not working out for me, I'm hungry. I really want to get access to my resources, I refuse to be live-locked.\"","width":350},{"text":"So, on the third try, I get a lot more aggressive and I don't do this \"trylock\", right, when my \"tries_left\" has been decremented to zero, I just say \"ah, just grab the right fork.\"","width":1003},{"text":"And I'm refusing to play anymore games. I'm just gonna grab that right fork.","width":442},{"text":"So, on the third go,","width":282},{"text":"We say, \"no, I will pick up the fork on my left, and I'm gonna wait until I can pick up the fork on the right.\"","width":507},{"text":"So then yes, we could be unlucky, it could so happen that there is a precise moment in time when all five philosophers are holding onto their left fork.","width":859},{"text":"And they've all done these games of trying to do \"trylocks\" etc.","width":225},{"text":"But on the third time, they all decide \"ah, I'm just gonna wait until I can grab that other mutex.\"","width":432},{"text":"And if that happens...","width":116},{"text":"The system deadlocks.","width":81},{"text":"Yes? So.","width":52},{"text":"So if they all end up in here","width":133},{"text":"If all five philosophers end up in here","width":163},{"text":"Then we have a problem. We're gonna have deadlock again, we're back to our original problem.","width":415},{"text":"So we haven't solved it;","width":91},{"text":"We've just written code that appears to work.","width":342},{"text":"Right. Let's see if we can prove this.","width":816},{"text":"Right, so, we can see a way that deadlock could happen.","width":1007},{"text":"Do I have... right... okay, right, so...","width":896}],
  // Part 3
  [{"text":"Alright so let's run it let's actually see let's actually watch this deadlock","width":426},{"text":"here we go","width":64},{"text":"alright im just gonna make it a little bit faster","width":200},{"text":"im going to ","width":155},{"text":"instead of sleeping for so many seconds im gonna do microsleep","width":246},{"text":"because we want deadlock to happen right there in a few seconds","width":197},{"text":"right so here we go","width":442},{"text":"there you go see! it's working. deadlock!","width":289},{"text":"what? did I just? make a mistake? We showed that theoreticlally deadlock is possible","width":726},{"text":"but it doesnt seem to be happening!","width":380},{"text":"Our test is good! We should deploy this to our google servers and run our email system based on this code.","width":640},{"text":"So hang on we showed that deadlock is possible, why didn't it happen?","width":389},{"text":"Yeah, you have to be really unlucky.","width":180},{"text":"Just how unlucky?","width":101},{"text":"Right, and it ran for 40 seconds and we've just proved that our code is great.","width":266},{"text":"No, we didn't/","width":150},{"text":"We can only prove that the stuff is good or bad by actually reasoning about it","width":267},{"text":"so let's see if we can force it to have a deadlock","width":331},{"text":"how could we try to force to have deadlock? well we need to make the chances of circular wait to be much greater","width":486},{"text":"and right now, uh we, we uh","width":242},{"text":"we grab one lock and we grab the other one","width":232},{"text":"so let's make it so that we'll grab our left fork, we'll wait for a little bit, and then we'll grab the right fork","width":530},{"text":"alright so im between these two locks","width":144},{"text":"im going to increase the percentage time that my system is doing hold and wait","width":341},{"text":"so im increasing the probability that we're gonna have a circular wait during this time","width":388},{"text":"so let me put in a number here like say","width":313},{"text":"10 microseconds","width":70},{"text":"right we'll run this","width":205},{"text":"still no deadlock! [jibberish] when I played with this earlier, so that's fascinating. right this is a hard demo","width":354},{"text":"so then i tried, okay well let's try making it random","width":287},{"text":"so i'll do say rand mod 10","width":168},{"text":"and that still didn't work","width":83},{"text":"oh okay 20, okay well that didnt work","width":105},{"text":"but when i did 60, now we're much more likely to have deadlock","width":393},{"text":"so let's, actually no, i managed to get it to work with 30, so","width":289},{"text":"okay so here's one possibility is that now by making it long enough there's a chance it might deadlock straight away","width":478},{"text":"because all five threads started and all five threads ended up doing those two tries and getting to the point where they all decided to say \"oh no, forget this. i'm gonna just not use try lock anymore, i'm gonna call lock\"","width":813},{"text":"right so if we made that time period long enough, there's a chance it might deadlock straight away. but it doesn't always happen, right?","width":478},{"text":"so it could be that... okay there we go","width":172},{"text":"this managed to break eventually ","width":285},{"text":"Okay","width":169},{"text":"so, that was kind of a deadlock and what i have shown you is real code for dining philosopher's and also this idea that just simple testing is not enough to prove that your mutex locks and your other stuff is correct","width":912},{"text":"we gotta reason about it carefully and","width":170},{"text":"and then proving it does work is also kind of difficult. you actually have to show... you have to expand the time where hold and wait and circular wait actually might happen","width":766},{"text":"otherwise, a simple like minute test or 40 second test is not enough to prove that your code is correct","width":444},{"text":"questions about this?","width":386},{"text":"Okay, right. So, a couple of comments","width":170},{"text":"first of all, there is no prep for section this week","width":237},{"text":"because the MP is out","width":169},{"text":"Well, there will be some stuff in the section. um we,","width":336},{"text":"We'll probably give you some things to play with with dining philosopher's","width":239},{"text":"I'm gonna write section stuff today","width":171},{"text":"but there's nothing to prepare for, for section","width":378},{"text":"right,","width":188},{"text":"now i've gota  challenge for you","width":351},{"text":"time for the fat wallet challenge, okay so do I have my wallet with me? Haha, I don't have my wallet with me","width":549},{"text":"Can I borrow this?","width":58},{"text":"Right, say this is my wallet","width":115},{"text":"Alright, umm","width":149},{"text":"Actually, I need something","width":112},{"text":"here we go right","width":132},{"text":"right, this is my wallet, okay, it's got, I don't like it to be empty","width":257},{"text":"It's also there's a constraint on the number of items I can actually put in this, okay?","width":313},{"text":"So I've got some functions where I can add and remove things from my wallet","width":702},{"text":"Here it is","width":274},{"text":"And I can define some constants like hey I never want to be less than zero or greater than 100","width":579},{"text":"I wrote about money because we like to think about money but it doesnt have to be money","width":321},{"text":"so I want to keep this variable always within those bounds","width":213},{"text":"always at least zero and always 100 or less","width":411},{"text":"But here's the exciting thing","width":227},{"text":"This is hints for the next MP! Right, for the MP that's currently out, if we can reason about this, maybe you can do well on the MP","width":498},{"text":"Right,  and here's a challenge then:","width":189},{"text":"So, I've written or sketched out how these functions should work","width":283},{"text":"If I didn't know about synchronization","width":302},{"text":"So, if you try and remove something from this wallet","width":292},{"text":"If you want to remove a certain amount","width":221},{"text":"First of all, don't do it","width":295},{"text":"While I shouldn't quit and if the money minus a certain amount is less than min, do nothing!","width":447},{"text":"spin, spin, spin","width":51},{"text":"so it's just a busy loop","width":120},{"text":"Right, busy loops are bad, they burn up CPU time","width":307},{"text":"And our CPU could be spent doing other things instead","width":328},{"text":"Well finally, okay, if we dont want to quit, so if quit is still zero, then actually subtract it","width":421},{"text":"Okay, add works the same way, if the money is greater than the amount, then spin spin spin spin spin and just wait","width":395},{"text":"And finally add it to the amount","width":243},{"text":"Right, being seasoned CS 241 students, you can immediately see \"oh we've got a potential race condition here\"","width":405},{"text":"right, if i've got two threads calling remove or a thread calling remove and a thread calling add at the same time,","width":429},{"text":"then, I've got all sorts of race conditions like this negative equals and plus equals they're not actually atomic operations","width":391},{"text":"It could be that you read a stale value of money because another thread is updating it at the same time","width":393},{"text":"There's another race condition that ","width":175},{"text":"The value I read it in here is protected so another thread could be changing the value","width":594},{"text":"before I get to subtract it","width":256}],
  // Part 4
  [{"text":"self","width":121},{"text":"so we've got a lot of work to do","width":105},{"text":"we've gotta have first mutex locks in here and we're gonna have to put some condition variables in here so that","width":366},{"text":"if we're not yet ready to add or subtract our thread should just block, it should just go to sleep","width":365},{"text":"right, so a quick refresher on condition variables","width":328},{"text":"how should we use them? well, remember, before calling cond wait, ","width":610},{"text":"you must have locked a mutex","width":289},{"text":"right, so above it somewhere at the beginning of your code you're going to lock a mutex","width":266},{"text":"but the good thing about cond wait is that it will unlock the mutex for you","width":269},{"text":"right, so let's pass in our pointer to a condition variable and a pointer to a mutex","width":443},{"text":"and when we do that, it unlocks the mutex, the other threads have an opportunity to run, and then it sleeps","width":368},{"text":"okay, how we wake up a sleeping a thread inside cond wait? easy, kick the monk","width":365},{"text":"right, how do we kick the monk?","width":335},{"text":"call cond signal!","width":207},{"text":"and that wakes up the monk","width":71},{"text":"before that thread can continue, though, it must reacquire the lock on the mutex","width":577},{"text":"so, it's ready to go, it's woken up, well now it's stuck inside a lock call","width":474},{"text":"so remember this actually does three things:","width":149},{"text":"it unlocks","width":265},{"text":"locks or sleeps","width":159},{"text":"and then relocks before returning.","width":522},{"text":"right, so this doesn't actually tell you what happened. so, in practice, what do we need to do?","width":326},{"text":"we need to write a little while loop","width":279},{"text":"here where we put some condition","width":190},{"text":"while something is true, go back to sleep","width":296},{"text":"if we want to wake up a whole load of monks, then you use broadcast ","width":471},{"text":"on the condition variable","width":346},{"text":"right, the last thing to do is before you return, call unlock","width":419},{"text":"and the beautiful thing about this is that the code that we actually see in front of our eyes can only be executed by one thread at a time","width":540},{"text":"because of this lock that we've booked, i'm sorry, unlocked","width":364},{"text":"because of the mutex","width":184},{"text":"these mutual exclusion means that only one thread can be doing stuff, can be accessing our variables inside the code that we write","width":471},{"text":"alright, so I'm going to stop and then i'm gonna let you go, so we've got the pthread mutex","width":385},{"text":"initialized in here","width":440},{"text":"and, there's something similar for condition variables as well, so there's pthread","width":293},{"text":"cond initializer","width":200},{"text":"so it's just a magic constant","width":181},{"text":"which says","width":115},{"text":"please initialize my","width":455},{"text":"my object here, my condition variable or my mutex","width":196},{"text":"right and now this is where you come in.","width":141},{"text":"it's time to write those","width":197},{"text":"three methods","width":97},{"text":"using mutex locks and condition variables","width":320}],
  // Part 5
  [{"text":"Okay so let's convert this code into some actual code that works.","width":10102},{"text":"Remember that there might be multiple threads actually trying to do this at the same time. There could be multiple threads calling remove, multiple threads calling add,","width":452},{"text":"and we only want one of them at a time to actually change the value of our money variable.","width":306},{"text":"And we wanna make sure that we don't end up in deadlock and if we say, add enough money into our wallet, then a waiting thread will now move, she could then potentially carry on.","width":794},{"text":"So let's think of how we can do this","width":94},{"text":"first of all, let's put in some mutual exclusion here so only one thread at a time can actually access these variables","width":415},{"text":"right so how do we do that? ","width":79},{"text":"well we're gonna need our pthread mutex lock calls and let's pass in...","width":423},{"text":"variable and we'll... course we'll need that","width":383},{"text":"inside our add method as well and at the end","width":216},{"text":"i'll need a pthread mutex unlock","width":341},{"text":"if I could spell it, there we go, all right","width":459},{"text":"okay","width":78},{"text":"And you might say \"oh hold on a moment, you didn't stop pthread mutex lock correctly.\"","width":224},{"text":"That's okay, with vim I can do regular expressions, where I can say things like ","width":373},{"text":"Substitute on all lines","width":194},{"text":"p_m for pthread_mutex","width":306},{"text":"and do it global on each line so if there is more than one match per line, don't do it so... so there we go. right um, so okay right","width":693},{"text":"We haven't done condition variables yet though so the next thing is rather than doing a spin loop, ","width":288},{"text":"we wanna go to sleep, and guess what? ","width":141},{"text":"Our code we've written here is very close to what we need for condition variables.","width":275},{"text":"Rather than just burning up CPU, let's just send our little to sleep.","width":332},{"text":"How do I do that? Well, I can...","width":307},{"text":"Let's delete this word","width":127},{"text":"Delete word delete word delete word, right","width":136},{"text":"oops, too much...","width":115},{"text":"alright","width":111},{"text":"I can say pthread_cond_wait","width":321},{"text":"And say okay, wait on the condition variable and here's the mutex I want you to unlock.","width":807},{"text":"Okay","width":72},{"text":"So you might start by initially ","width":312},{"text":"By having, okay, paste that line in again","width":407},{"text":"By saying \"oh I just need one condition variable\"","width":135},{"text":"But actually, let's do better than that. Let's make all the threads that are trying to subtract go to sleep on one condition variable, and all threads which are trying to add...","width":643},{"text":"Go to sleep on another variable. And if we do that, we can make better performant code because we only need to wake up the right kinds of threads when we make a change to our system.","width":736},{"text":"Alright, so","width":165},{"text":"This one will make sleep on our second one. So if you're trying to add, then go to sleep","width":405},{"text":"This other condition variable","width":300},{"text":"Right, are we done?","width":238},{"text":"No, okay, so one thing we should do is wake everybody up. So if we stop, we should pthread_wait wake a thread up or two, how can I wake up all my threads?","width":801},{"text":"So broadcast, and I should wake up at least all the ones on cvs1 and also ","width":478},{"text":"do it on cvs2, right","width":100},{"text":"Now, how am I doing with time? okay, so","width":454},{"text":"So this thread, this broadcast would work in this particular case because its a one-way flag on most processes. ","width":522},{"text":"But actually, if we want to be really correct, what we should really do is","width":324},{"text":"We should always lock a mutex before doing this","width":440},{"text":"Okay","width":258},{"text":"Okay, so, just by for convention, if you're going to just as a kind of pattern thing,","width":286},{"text":"and for technical reason involving many barriers","width":206},{"text":"we're gonna actually just lock our mutex before calling broadcast.","width":192}],
  // Part 6
  [{"text":"Right, so, we're gonna wake all the monks up","width":270},{"text":"But have we finished our code?","width":576},{"text":"I'm sorry? Signal?","width":479},{"text":"Okay, so if we've just added money to our wallet, it could be that somebody that's trying to subtract could now proceed","width":546},{"text":"So let's wake up","width":141},{"text":"someone in the subtraction","width":132},{"text":"So are you going to do something like","width":207},{"text":"pthread_cond_signal on which one, on the other condition variable?","width":481},{"text":"Right, so, this will wake up one thread and that happens to be waiting to subtract.","width":481},{"text":"Would you do that?","width":513},{"text":"So hopefully your answer is \"no, I wouldn't do that, I wouldn't write that code\"","width":326},{"text":"Why not?","width":239},{"text":"Perhaps you could explain to your neighbor ","width":122},{"text":"or to your imaginary friend","width":126},{"text":"why you don't wanna wake up one thread","width":3728},{"text":"Okay, so, let's think about a particular example","width":196},{"text":"Let's suppose you've got ten dollars in your wallet","width":332},{"text":"Are we doing... I'll change it like this","width":205},{"text":"Say we've got 90 dollars in our wallet","width":178},{"text":"And one thread wants to add 10, another one wants to add 20","width":503},{"text":"I'm going to make them larger sorry","width":127},{"text":"Add 20 or add 30","width":246},{"text":"So they're both blocked right now","width":114},{"text":"And then ","width":234},{"text":"A moment later, another thread comes in and say, pull out, let's say, 15 bukcs","width":498},{"text":"I could see that the adding 20 could now proceed","width":389},{"text":"But our code was unlucky, it decided to wake up just one of the other threads, and so it woke up the one trying to add 30.","width":496},{"text":"It came out, it managed to lock the mutex, it tested its conditions and said \"oh i'm sorry, I would still blow the budget, I would still go above 100, and so therefore I'm going back to sleep\"","width":640},{"text":"What we should have done is woken up all of the threads trying to add, in case any one of them could now continue","width":455},{"text":"Right, so the correct code in this","width":279},{"text":"And get rid of that...","width":67},{"text":"Is to wake up all of the other threads, right, so let's fix our code... let's substitute the word \"signal\" for \"broadcast\" everywhere in my program","width":641},{"text":"There we go","width":37},{"text":"Right, and now I think I'm done. Now I think I've got an asynchronous wallet where all threads sleep until they are able to add money, yes!","width":812},{"text":"When do I unlock, when?","width":343},{"text":"Why do I unlock after broadcast?","width":170},{"text":"In this particular example, it doesn't matter...","width":186},{"text":"for the stop method...","width":107},{"text":"But for the other ones, it does matter.","width":159},{"text":"And it comes down to the fact that you can reason about exactly when things happen.","width":392},{"text":"And you don't want another thread going into... ","width":261},{"text":"Let's say you're an add, you don't wanna know the threads going into the remove method, ","width":215},{"text":"and going to sleep just as you are sending the broadcast message.","width":322},{"text":"Otherwise you have a very small but potential race condition.","width":206},{"text":"If you have the lock, then you know that it can't actually go to sleep while still sending the broadcast message.","width":398},{"text":"And it's a tiny, tiny, tiny race conditon","width":134},{"text":"but it's easy to fix by always having this mutex lock.","width":288},{"text":"So, with that, welcome to the world of synchronization.","width":229},{"text":"Thank you very much, hope you got a lot out of this lecture; for those of you that want to find your tests, please come down here and have a great section and have fun with the MP! Thank you very much.","width":576}],

  // Start Lecture Video 18
  // Part 0
  [{"text":"I didn't get the memo that half the class would be in EOH i guess","width":345},{"text":"so for those of who are here, welcome, and congratulations for making it, also sent to myself","width":380},{"text":"right , so here's what we're gonna do today.","width":158},{"text":"we're gonna talk about virtual memory","width":161},{"text":"and uh, we're gonna look at how it is implemented in 32 bit systems and 64 bit systems, okay?","width":379},{"text":"so, we're fortunately not gonna need to design any hardware","width":362},{"text":"but we are gonna understand enough of how it works so that we can see some the advantages that it gives us","width":427},{"text":"and also see some of the considerations that you need","width":243},{"text":"when you scale from 32 bits to 64 bits","width":238},{"text":"right, so, just a, first of all, an important point","width":339},{"text":"is that uh","width":203},{"text":"let's see, if i got, if I've got 32 bit addressing","width":522},{"text":"if i got a 32 bit address to talk about","width":156},{"text":"then in 8 bit bytes then i need to oversee 4 bytes to store that pointer, yeah?","width":472},{"text":"and, if i got a 64 bit address, then just double that","width":449},{"text":"i need 8 bytes","width":142},{"text":"to represent","width":54},{"text":"a pointer or to represent an address","width":189},{"text":"so that's gonna come up again when we talk about storage relief","width":265},{"text":"because remember, for each of these entries, it depends on on whether we're talking about 32 bit system or 64 bit system","width":471},{"text":"okay, so, yeah, we're used to seeing this with pointers","width":190},{"text":"but w'ere gonna see this again in terms of our storage of addresses","width":424},{"text":"right, so, here's our first question","width":299},{"text":"so what's a page table?","width":128},{"text":"what's a page table!?","width":111},{"text":"who remembers?","width":117},{"text":"yes! thank you! yes, it's a way to translate a virtual address to a physical address","width":573},{"text":"you can imagine that if we didn't have page tables, well then we can have a HUGE associate map for EVERY possible virtual address and map it to an arbitrary physical address","width":741},{"text":"okay, how much space do we need for that map? well we'll need one entry for every possible physical address and each entry will take 4 or 8 bytes","width":741},{"text":"hold a moment, we have just invented a scheme that actually takes more memory than i actually have","width":299},{"text":"so we do better than that by dividing our memory up into pages ","width":314},{"text":"and we do this arbitrary mapping for not every possible byte but we have a map for every possible page not on memory ","width":728},{"text":"right so here's the basic idea, we got some virtual memory address","width":437},{"text":"and, we're trying to turn that into a physical address","width":725},{"text":"so on a 32 bit system we'll take a virtual memory address and conceptually split it into two parts","width":630},{"text":"these bits here are called the what? paging? paging? page number!","width":1387},{"text":"and what about these lowest bits?","width":180},{"text":"yes, they're the offset","width":628},{"text":"so if we're writing this in C code we can probably come up with a way to extract the page number from an address","width":588},{"text":"okay so if i say i got some pointer and i shift it right by 12. what have i got?","width":874},{"text":"the page number! yes","width":381},{"text":"and what about the offset","width":69},{"text":"could you write an expression for the offset","width":299},{"text":"i only care about the lowest twelve bits","width":350},{"text":"i could AND it with something yes","width":251},{"text":"so i can mask it","width":109},{"text":"how do i get the lowest twelve bits","width":192},{"text":"okay, for this ill give you a couple of clues","width":156},{"text":"everyone knows that two to the eight is 256","width":264},{"text":"and of course we also know that two to the ten is a 1024","width":203},{"text":"so two the twelve is four times that also known as 40996","width":296},{"text":"yes!","width":166},{"text":"so... i could write what","width":289},{"text":"4095, is that correct? okay.","width":972},{"text":"in other words, the bit pathing 1 2 3 4 5 6 7 8 9 10 11 12 in binary","width":755},{"text":"so that means when i AND it with this number, all of my upper bits will be disappeared, masked to zero","width":535},{"text":"so this give me the offset","width":143},{"text":"i could have written an expression here, i could have said something like: take one and shift it left eleven more times, the subtract one as well","width":755},{"text":"so we got ourselves a page number and offset","width":249},{"text":"now just like any good cooking show, this is where we take what we've made and we set it aside for later","width":400},{"text":"okay, we'll be pouring the offset back in","width":187},{"text":"at the very end","width":67},{"text":"we don't care about the offset until the very very end","width":171},{"text":"what we're gonna try to do now is convert this page number which goes from zero up to 2^20.","width":598},{"text":"how big is 2^20?","width":255},{"text":"okay, how do we work that out? well, I just told you that 2^10 is about a 1000, so 2^20 is bout a million!","width":468},{"text":"binary million","width":100},{"text":"so what a bout a million possible numbers to look up","width":259},{"text":"so we're gonna take these page numbers","width":115},{"text":"and stick them","width":232},{"text":"into just a big table","width":233},{"text":"and inside this table, i need to know where to go inside my RAM","width":333},{"text":"and in fact","width":233},{"text":"I'm gonna convert from this virtual numbers to these physical numbers","width":292},{"text":"they're called physical","width":422},{"text":"frame","width":212},{"text":"most of the time we'll never talk bout frames","width":149},{"text":"because most of the time we don't actually care about real memory","width":350},{"text":"most of the time, our programs that we write live in this virtual address space","width":376},{"text":"but today because we're actually gonna figure out how to convert virtual memory to real memory, yeah we need to talk about them","width":336},{"text":"so these are our physical frames","width":80},{"text":"so we just have a big lookup table","width":106},{"text":"ok how might that work,","width":154},{"text":"easy, let's just have a big array","width":280},{"text":"and that can give us the frame number","width":640}],
  // Part 1
  [{"text":"Okay, so if we got the frame number","width":290},{"text":"how do i now combine that with the offset","width":331},{"text":"to find the actual piece of RAM, the actual RAM location","width":258},{"text":"could you write down an expression that takes the frame number and somehow combines it with the offset to give you the actual address in memory that you should use","width":821},{"text":"you're not simply gonna add them together","width":344},{"text":"alright, i'm hearing some good things down here, but...","width":199},{"text":"lets see","width":150},{"text":"what do we got up here","width":113},{"text":"any ideas","width":865},{"text":"somebody shout out something","width":72},{"text":"even if it's wrong, it's okay!","width":122},{"text":"alright what do we got...","width":103},{"text":"gimme an idea","width":107},{"text":"Adam! Okay. thanks for playing... guess again!","width":169},{"text":"right. Our problem is that our page number just goes up in ones. err Sorry our frame number goes up in ones","width":384},{"text":"zero one two three four five.","width":65},{"text":"we dont want that","width":61},{"text":"we want our addresses as you can see. they go up by 4096 bytes","width":341},{"text":"so we need to multiply that by 4096 bytes. Yes you got the correct answer thank you [something]","width":319},{"text":"right, so, I heard you talking about it earlier","width":171},{"text":"right so, we wanted to take this and somehow multiply by 4096","width":362},{"text":"so i could write that that the physical address is gonna be then the frame number, Fnum multiplied by 4096","width":1123},{"text":"plus the offset","width":302},{"text":"but i dont want in hardware to multiply by 4096. do you realize how much silicon that would take???","width":440},{"text":"NO i dont want to do multiplication. What would be a better thing that multiplication ","width":316},{"text":"Yes!","width":44},{"text":"Just a step to the right","width":159},{"text":"if you haven't seen the rocky horror picture show, I encourage you to do so. Right so we want to step to the left","width":451},{"text":"we're going to shift left...right?","width":216},{"text":"and we need to go up by how many?","width":285},{"text":"is it twelve? yeah we need to multiply by 2 to the twelve. so we'll shift it left by 12","width":351},{"text":"how do you shift left by 12 in hardware?","width":255},{"text":"easy you just move the wires off by 1. you just move the wires up","width":313},{"text":"so by shifting in hardware is trivial, you just relabel what the electrical wires actually mean","width":481},{"text":"okay so got ourselves a physical address. fantastic! easy! that's our page table!","width":334},{"text":"so life back in 32 bit world is easy, we calculated how many, how big, our table was. it doesnt seem to big, we just have a million entries.","width":696},{"text":"so, uh okay, so now we can work out this kind of typical exam question.","width":416},{"text":"right, 32 bit system. in other words, on a 32 bit system, each entry is gonna be 4 bytes. ","width":395},{"text":"if each page table is 4 kilobytes. okay so that tells me","width":417},{"text":"that","width":127},{"text":"the offset then is gonna be, two to the, this is the size of the page table it's two to the twelth","width":473},{"text":"so this means","width":129},{"text":"that that my offset is gonna be 12 bits","width":424},{"text":"so that means Ive got 32-12 bits remaining","width":1104},{"text":"so number of entries is 2 to the 20. or about a million","width":794},{"text":"okay, so we worked out a number of entries. how much space is it actually gonna require to store this entire page table for this process","width":907},{"text":"well each entry, has to store a number, the physical frame, and I'm gonna say we'll use 4 bytes for that","width":594},{"text":"you could squeeze it into a little bit less, but...","width":276},{"text":"we could squeeze it in into kind of three bytes or so, but let's not do that. lets keep things simple.","width":332},{"text":"each entry is 4 bytes... why did i need 4 bytes? because I'm taking back numbers which are 4 bytes long","width":343},{"text":"so ive got two to the twenty times four bytes","width":338},{"text":"is what?","width":243},{"text":"4 megabytes!","width":134},{"text":"so the overhead of using virtual memory here is 4 megabytes!","width":543},{"text":"and we better store this table in some well known place in physical memory","width":341},{"text":"alright? we can't store this table somewhere in virtual memory address otherwise we'd have to use the table to figure out where it is stored in real memory","width":725},{"text":"so the cpu has another register that says: okay if you want to actually turn a virtual address into a physical address","width":500},{"text":"for this particularly process... there's somewhere in memory where i put aside 4 megabytes to store this table","width":1181},{"text":"okay, so, a little challenge for you here","width":502},{"text":"let's say Ive got a program that's gonna read a byte at this virtual memory address","width":694},{"text":"how we many memory reads  are required?","width":1745},{"text":"so if I didnt have a virtual memory, I would just need one memory read. I would just read the byte location 512","width":510},{"text":"yeah, I would just read the byte hexadecimal value 200","width":210},{"text":"but we now have virtual memory, so how many memory reads are required","width":474},{"text":"two! YES!","width":151},{"text":"we need to actually go back to main memory and say \"okay I'm tying to read this particular address\"","width":377},{"text":"so, I need to turn this into a page number and offset and once ive got the page number, i'll go back to my table, lookup table, which is stored in real memory in order to pull out the actual physical frame","width":954},{"text":"and so this might be pointing anywhere. okay its actually in here","width":432},{"text":"so it took me two memory reads, i had to read the 32 bits in here, and then finally, the byte that i cared about","width":711},{"text":"what have i just done to my machine?!","width":201},{"text":"I've just through sheer brilliance managed to make it twice as slow! I've halved its speed!!","width":568},{"text":"remember, memory is really slow! compared to the CPU, you could often do ten to a hundred, if not more instructions for the time it takes to go to main memory","width":776},{"text":"remember? HI MEMORY MEM READ? \"HELLO","width":250},{"text":"youre gonna do that twice now. for every single time youre gonna read or write","width":320}],
  // Part 2
  [{"text":"So we have a problem, yeah?","width":326},{"text":"we have invented virtual memory, but we have halved the running speed of our machine","width":416},{"text":"this might be a difficult thing to sell in the marketplace if we half the speed","width":352},{"text":"so we need to do something about this","width":114},{"text":"okay we can have caches, etc but we still got the problem","width":258},{"text":"Now, we've invented virtual memory which is great, we don't have to worry have fragmentation so much","width":544},{"text":"but we halved the speed","width":299},{"text":"we halved the speed because we're doing this lookup","width":174},{"text":"alright, lets see what happens when we use a two level page design","width":483},{"text":"so why might be care about two level page design","width":344},{"text":"well lets do a similar calculation but for a 64 bit system","width":447},{"text":"lets keep our page sizes at 4096 bytes","width":741},{"text":"so, what is this? this is 12 bits... so if thats my offset. how many bits do i have for my page number?","width":978},{"text":"64 - 12. i got 52 bits left","width":604},{"text":"thats gonna be used for my lookup table, alright? so","width":637},{"text":"how big is my lookup table gonna be?","width":190},{"text":"2^52","width":127},{"text":"how big is 2^52?","width":472},{"text":"okay so how do we work this out roughly. well 2^10 is a 1000.","width":425},{"text":"so","width":648},{"text":"okay its a little big","width":151},{"text":"this is the number of entries i'll need inside my page table","width":170},{"text":"i better go home and and buy a lot of memory just to store my page table","width":425},{"text":"so what worked really well in 32 bits is completely falls over in 64 bit land","width":343},{"text":"because, we... heh. our page table is just too large!","width":552},{"text":"BUT","width":70},{"text":"to quote black adam","width":109},{"text":"\"we have a cunning plan.. we'll have a cunning plan\"","width":260},{"text":"We will use a multilevel page table","width":287},{"text":"because, our address space is huge, but guess what: most of it is unused!","width":651},{"text":"so, let's split this 52 bits up into multiple lookups","width":850},{"text":"so we'll take this and split it up into pieces. uh, we'll um","width":762},{"text":"lets start it with just two. so the idea is that","width":271},{"text":"I've got an initial lookup here","width":359},{"text":"lets say that its, that we use um... i dunno.. 10 bits?","width":519},{"text":"sometimes they only uses 4, but this is matter of example","width":340},{"text":"so we use the upper most 10 bits","width":203},{"text":"some of these can be empty, they may not refer to anything. they may not be used in that huge swath of address space","width":397},{"text":"we dont even need an entry in here","width":228},{"text":"so lets say that the lowest and highest entries are used here","width":290},{"text":"so this will point to another page table ","width":326},{"text":"with a whole lot of entries, lets say in this one, we have twelve bits","width":546},{"text":"and these entries may or may not be filled, but they dont refer to frame numbers yet. i can keep playing this game for as long as i want","width":619},{"text":"until i got up to a total of 52 bits","width":284},{"text":"alright so how many bits have i used up so far... twenty twentytwo.... ","width":282},{"text":"so now ive got","width":271},{"text":"thirty bits, for example in my last one:","width":279},{"text":"and so on","width":163},{"text":"so ive just invented a little page table system here, a multilevel page system, where","width":436},{"text":"to convert the page number to a frame number, i now have to do one two THREE memory reads","width":853},{"text":"and each of these can point to a different table","width":330},{"text":"right so this one will point to a different area of memory... just say okay","width":280},{"text":"these are the entries in here, they may or may not be filled","width":326},{"text":"and","width":91},{"text":"so on","width":251},{"text":"so now i've made my 64 bit machine even slower than my 32 bit machine, right?","width":309},{"text":"now a single read or single write now takes 4 memory looks up","width":345},{"text":"the actual read itself and all these page table look upss","width":454},{"text":"if I was working at Intel at this point, I think i'd be fired, yeah?","width":269},{"text":"we've come up with a machine that is now twice as fast as last years model","width":254},{"text":"but dont worry its got a bigger number on the box, so people are gonna buy it","width":263},{"text":"right","width":92},{"text":"so this is the idea: so we've got a basic idea of how to split this up with the idea that we can do multiple table looks ups","width":735},{"text":"we have just got a little bit of a problem that most of the time, its incredibly slow","width":212},{"text":"so in a little bit, we'll talk about how to fix that","width":405},{"text":"alright so lets do this","width":181},{"text":"we'll work this out on a 32 bit system","width":333},{"text":"and for a two level page table example, we'll say we'll have 10 bits","width":507},{"text":"wait a moment, i wanna get up to uh yeah, 32","width":162},{"text":"okay, and then um","width":137},{"text":"12 bits for offset","width":426},{"text":"so how many memory reads are require to read a byte at this address","width":190},{"text":"well you wanna do a read first of all, you go to top level page table.","width":388},{"text":"this gives you the address of the next page table and finally this gives you the frame number","width":748},{"text":"for memories","width":50},{"text":"so in a two level page table, we are running at three memory reads for every actual read or write that you wanna do","width":674},{"text":"sorry. three memory accesses that your program tries to do.","width":377},{"text":"so we're three times as slow","width":424},{"text":"so this is a great system that allows us to have virtual memory, but as i keep saying: ITS SLOW","width":355},{"text":"so whats the fix?","width":141},{"text":"the fix is this...","width":126},{"text":"translation lookaside buffer","width":192}],
  // Part 3
  [{"text":"called TLB","width":1886},{"text":"so our processes rarely need to access page frames in a completely chaotic, random manner","width":609},{"text":"most of the time, if you recently accessed a particular page in memory.","width":360},{"text":"guess what! in the next few nanoseconds or microseconds, youll likely want to access that again","width":449},{"text":"so lets cache the result","width":124},{"text":"lets cache the result of all the lookups that we're doing","width":341},{"text":"on the off chance that we'll need it again in the next few nanoseconds","width":465},{"text":"as thats the purpose of the TLB","width":231},{"text":"its an associative cache","width":393},{"text":"if you have a query about which physical frame you want for a particular page number","width":563},{"text":"then if youre lucky, we've already calculated that in the recent past and we still got the result in the TLB","width":700},{"text":"in fact, TLB is designed so that 99% of the time, we have a cache hit","width":492},{"text":"the result IS in the TLB","width":288},{"text":"one thing to note about the TLB, we do this in parallel","width":292},{"text":"this is hardware. so in trying to figure out what physical frame we want to go to, we ask the TLB at the same time as trying to start this other lookup through the multiple page tables","width":1196},{"text":"and whoever gives this answer fastest, wins","width":294},{"text":"because remember, we're using this everytime we want to talk to memory","width":299},{"text":"so it is a critical piece of CPU performance","width":546},{"text":"ok, questions at this point?","width":190},{"text":"yes","width":830},{"text":"okay, so uhhhh let me give you an anology and then i'll try to do as it as the concept itself","width":882},{"text":"its bit a like this:","width":206},{"text":"suppose i wanted to go from a phone number to a student name","width":327},{"text":"so I use the first few digits of the phone number to go to a particular filling cabinet, so the \"217's\" im all gonna put in this particular filing cabinet. and the 604s in the other cabinet","width":1108},{"text":"so i start off with ","width":387},{"text":"the top most digits (000 to 999)","width":412},{"text":"but i wouldnt have the actual entries inside that filing cabinet, this should tell me which other filing cabinet i should go to for those entries","width":664},{"text":"so its...","width":152},{"text":"and it could be that some of these are empty, we dont have anybody with a 555","width":350},{"text":"filing.. uh phone number","width":230},{"text":"okay?","width":294},{"text":"so it will be a bit like this ","width":282},{"text":"we'll get the first result and we'll have our first table","width":577},{"text":"and we'll use the ","width":276},{"text":"the highest bits ","width":232},{"text":"but we've shifted them down... so this is just kind of pseudo code","width":252},{"text":"and this tells us, where the next table is","width":341},{"text":"so if you like, its a pointer to another array","width":202},{"text":"ok result 1","width":342},{"text":"and we'll use the middle bits as a number inside that table","width":569},{"text":"and that gives us finally our frame","width":168},{"text":"and then we just need to multiply or shift it and then add the offset ","width":354},{"text":"so we dont know.. so theres multiple ones of these middle tables","width":307},{"text":"and they correspond to different entries in the whole address space","width":307},{"text":"so if you think about your process. \"OKAY the stacks at the top. The heaps near the bottom. and the very bottom is the program code\"","width":519},{"text":"so you might find that you might actually got three entries for example, in your very first table. one of the very memory addresses and a couple for a the lowest memory addresses. nothing in the middle","width":1079},{"text":"yes. yes it skips all of these lookups","width":705},{"text":"itll give us the frame number","width":478},{"text":"no because the TLB is part of the CPU","width":436},{"text":"it doesnt need to go back to main memory. its a tiny piece of associative cache","width":250},{"text":"its a expensive, its fast, and it tries to do it if possible within one instruction","width":541},{"text":"because without this, the whole CPU, it doesnt matter we're gonna add the most played numbers together.","width":334},{"text":"as soon as step outside trying to use registers, we have to use the TLB","width":1052},{"text":"its essentially, its stored in these pairs","width":161},{"text":"a page to ","width":128},{"text":"...","width":150},{"text":"frame number","width":307},{"text":"and i dont want to go too much further, because guess what, we can spend a whole semester talking bout TLB's if we were hardware people","width":584},{"text":"it turns out that on real hardware, we have TLBs associated with each level of cache. we have a TLB associated with table lookups and data lookups and TLBs associated with CPU instructions etc etc etc","width":825},{"text":"this is how intel figures out to make very very fast chips by optimizing the size and performance characteristics of these TLBS that youll find on the cache","width":785},{"text":"and you gotta decide as well.. how do you.. do you want to share these between different CPUs","width":457},{"text":"theres a lot more detail than we're gonna think about today","width":601},{"text":"I wanna comment on one important idea though","width":267},{"text":"we've talked context switch when we get our CPU do something else, when we want to take the CPU state and save it","width":576}],
  // Part 4
  [{"text":"so we need to do a context switch","width":509},{"text":"for example, you're gonna need your CPU to start working on a different thread","width":247},{"text":"or start working on a different process","width":328},{"text":"so a context switch as far as we're concerned, we save the CPU state","width":536},{"text":"my question for you is what should we do with the TLB","width":442},{"text":"is it still valid, are there the entries in the TLB still valid in a context switch?","width":539},{"text":"what.. take a moment to talk about it with your neighbor","width":4553},{"text":"okay so the question is... what should we do with the TLB","width":192},{"text":"we got these lookups from a page to a particular frame of memory","width":376},{"text":"and what happens during a context switch well its a trick question","width":331},{"text":"it depends on the kind of context switch","width":191},{"text":"because here's one example, suppose we got our CPU to stop working on one particular thread of our process and please instead start working on this other thread of the same process","width":955},{"text":"all our virtual memory is still the same","width":162},{"text":"since inside the same process","width":105},{"text":"so all the cache lookups that we've done ... we can keep that","width":218},{"text":"ok here's a different example","width":71},{"text":"suppose we tell the CPU to stop working on this process and start working on another process","width":444},{"text":"our virtual memory is no longer the same","width":124},{"text":"the address is no longer mapped to the same pieces of memory, so then if we swapped another process we should clear the TLB","width":915},{"text":"the state of the TLB is only relevant to a particular process because virtual memory addresses are unique to each process","width":1882},{"text":"as long as is... it depends on how much money you have to spend","width":318},{"text":"okay right ready? page 2! alright so our processes are working along one day and tries to do a simple read or write to an array, an ah! the TLB says 'i have no memory of this page' and a few nanoseconds hundred nano seconds later, we finished walking through the page tables and hah! NOTHING. nothing i got nothing of this particular page number. it doesn't actually point to a piece of real memory. what happens?","width":2904},{"text":"its on the harddrive. yes! we can cheat","width":269},{"text":"ok heres the beautiful thing about virtual memory is that we can lie to our processes","width":390},{"text":"is that, they are like inception, live in inside virtual world in virtual memory","width":546},{"text":"and we actually need to have their data in physical RAM when our processes try to read or write it","width":511},{"text":"for the rest of the time, haha! we can just dispose of it and use that ram for other things for other processes that always want to access memory","width":652},{"text":"ok so where it can be find. it might be found on disk inside secondaray storage","width":463},{"text":"ok so, we can store it","width":424},{"text":"where might you find it? for example","width":317},{"text":"what's known as a swap file","width":165},{"text":"or in linux: a swap partition","width":448},{"text":"where area of your disk is not used for storing/making files but for storing this copy of memory","width":485},{"text":"so we can swap out","width":138},{"text":"a page at a time","width":258},{"text":"and store it on disk","width":201},{"text":"and we'll leave it there until ","width":358},{"text":"an attempt to read/write memory fails","width":385},{"text":"stop and think how that might work","width":180},{"text":"alright your processes are like \"okay read this piece of the array, or read this variable, or call this function\"","width":481},{"text":"at that moment, the hardware says \"oh guess what\" this virtual memory address doesn't correspond to a physical address","width":487},{"text":"i better kill the process","width":156},{"text":"the hardware of course doesn't actually kill the process","width":210},{"text":"instead what it does, it raises an interrupt on the CPU","width":431},{"text":"and we have to write some operating system code that says \"aha look at that!\"","width":298},{"text":"\"our memory hardware is complaining. it couldn't find it\"","width":331},{"text":"we got two options at this point","width":116},{"text":"we could say \"clearly this process is a bad program, and that address is just invalid; it was trying to read a bad segment of memory. segfault\"","width":912},{"text":"Or it says \"hold on hold on. dont look! and pull the relevant data from the relevant disk and stick it to memory\"","width":684},{"text":"itll be like trying to call comcat and they employed people in that time that you actually called them up","width":291},{"text":"hello i'd like to complain....","width":143},{"text":"um so","width":237},{"text":"we can do something clever right here and that is where","width":277},{"text":"the dirty bit comes in","width":254},{"text":"with each frame of memory, we can store a little bit of matter information about how its being used by the process","width":712},{"text":"for example","width":101},{"text":"has this piece of memory ever been modified","width":305},{"text":"as long as its dirty","width":176},{"text":"why didnt we call it the modification bit I DONT KNOW ","width":120},{"text":"but anyway its the dirty bit","width":104},{"text":"to say that the contents of this memory has changed since it was first created","width":429},{"text":"either loaded in from disk or malloc'd when you expanded the heap ","width":503},{"text":"but the point is we got stuff in memory that we care about","width":280},{"text":"so if the dirty bit is set, we know that if we want to put this data on to disk, we actually got to save it","width":704}],
  // Part 5
  [{"text":"so what kind of optimization can you make if the dirty bit is not set","width":769},{"text":"if the page is clean","width":449},{"text":"thanks! yes! great! you don't need to necessarily write it back to disk. it could be we already got a perfect copy on disk. ","width":410},{"text":"whats the point of actually writing it again when you know that its identical","width":281},{"text":"so you can save yourself from time","width":221},{"text":"if you know the page is clean","width":131},{"text":"could be that the page for example is just NULL / zero. you havent touched it at all. youve allocated some memory and you havent used it yet","width":507},{"text":"it could be part of your process. the CPU instructions that actually make up your program","width":379},{"text":"when you know you got that stored on DISK, whenever you need to read that, just load that page in","width":516},{"text":"so it tells us whether the page has been modified","width":289},{"text":"thats not all we can store about each page","width":124},{"text":"what else can we store","width":200},{"text":"we could have a ","width":191},{"text":"happy bit","width":95},{"text":"we could have a Fri.. not im just kidding","width":227},{"text":"we dont have a friday the 13th bit or a happy bit but i invite you to take on a hardware company and add that yourself when you want it","width":375},{"text":"so what else can we put inside each page. thats matter information. what would be useful to us","width":1080},{"text":"yes! a valid bit","width":697},{"text":"okay. we should a valid bit that says its a real valid address, perhaps its not currently loaded into memory","width":612},{"text":"what else?!","width":221},{"text":"ok...","width":78},{"text":"clearly clearly i need to make you a lot more evil","width":388},{"text":"think for a moment how we can our processes more secure","width":816},{"text":"how would you like protect memory in some way. yes! okay, what's that do?","width":639},{"text":"if you try to read from memory it gets you a segfault. okay i'll that ! yes","width":469},{"text":"how about we protect what you can do with this memory","width":169},{"text":"so two common ones are whether its read only","width":641},{"text":"and whether you can execute it or not ","width":430},{"text":"so think about your virtual memory map for a moment. weve got our instructions down here. our functions that we've written","width":651},{"text":"or the CPU code. we've got the heap we've got the stack","width":353},{"text":"up here","width":169},{"text":"ok i realize thats unreadable but you notice now! we've got the stack at the top and heap and functions","width":400},{"text":"the only error that we'd expect the CPU to execute instructions in is this bit down here, where we've written function code","width":458},{"text":"we dont expect to start executing instructions inside the heap and the stack","width":265},{"text":"and in fact if that happened, it mightve happend because someone's managed to have a buffer overflow and DELIBERATELY put malicious instructions into our memory and somehow managed to get the CPU to jump to that location","width":910},{"text":"so most processes, you should not be able to execute code thats store on the stack/heap","width":579},{"text":"and an exception might be a just in time compiler, such as java","width":198},{"text":"but most of the time we don't expect that so we should be able to mark our pages and say","width":241},{"text":"\"do not execute stuff inside this page, if you do raise an interrupt and tell the operating system about it\"","width":509},{"text":"another one is read only. read only is really cool","width":250},{"text":"because that allows us to share pieces of RAM","width":437},{"text":"for example","width":239},{"text":"the code for malloc, for example for strlen","width":523},{"text":"how about all the of the code inside the C library, libc","width":483},{"text":"we could put that inside one piece of memory and then share it with all processes that need it. for example how about the openGL library","width":672},{"text":"for example, right, and i can start listing all the common libraries and we only need to put them inside physical memory once!","width":529},{"text":"so its a huge saving","width":105},{"text":"and i  can share with all these other processes, so that i can minimize the total amount of physical RAM","width":699},{"text":"right","width":1214},{"text":"here's a little demo here","width":288},{"text":"okay, so in fact i can ","width":215},{"text":"look at this special file called maps","width":453},{"text":"and ","width":1661},{"text":"in fact with linux i can see how thing are mapped","width":282},{"text":"so ive got and we'll talk about this virtual file system later on in the course","width":319},{"text":"but you can see ive got libc, and for this particular process","width":481},{"text":"libc, different parts of libc are mapped into different parts of my address space","width":1280},{"text":"right so we talked about sharing stuff","width":201},{"text":"to be able to share libraries","width":493},{"text":"theres another reason why we might want to share some ram","width":194},{"text":"and that is IPC","width":222},{"text":"also known as inter-process communication, a way for two processes to share","width":399},{"text":"and ","width":203},{"text":"today we're just gonna talk about a few examples just so you can at least name drop this stuff inside interviews","width":437},{"text":"and here they are","width":341},{"text":"mmap","width":93},{"text":"allows me","width":153},{"text":"to setup some shared memory between two processes ","width":349},{"text":"so i can say fork and now actually have some shared memory that exists between the child and the parent","width":578},{"text":"so its a deliberate way to say \"nonono we actually want to share this physical piece of RAM together between the child and parent\"","width":836},{"text":"how else can you connect two processe?","width":284},{"text":"how could else you could send some info","width":256}],
  // Part 6
  [{"text":"signals yes!","width":517},{"text":"its a very simple form of interprocess communication but you can","width":453},{"text":"send a little signal for example \"HEY TIME TO QUIT\"","width":270},{"text":"or send it say 'siguser1 and siguser2' and you can decide what these particular signals mean","width":737},{"text":"how else can you comunicate","width":125},{"text":"well ill give you a hint about we'l talk about next lecture and that is pipes!","width":556},{"text":"and the nice thing about pipe is that you can push stuff down one end and another process can pull stuff out the other","width":707},{"text":"right so ok in the last 30 seconds lecture we'll talk about Amdahl's law","width":522},{"text":"ill give you hint about what this means for mpmerge","width":183},{"text":"im asking you to make mergesort go fast","width":295},{"text":"but think about the program for a moment. whats it do","width":367},{"text":"it reads a whole load of data, look at the source code . youll discover its using scanf","width":386},{"text":"and converting a line at a time into an integer. then we do the sort","width":515},{"text":"and then we printed it out to a file","width":595},{"text":"so","width":83},{"text":"your challenge is to make this bit go faster","width":275},{"text":"but in the basic week 1 version of the MP","width":277},{"text":"theres nothing you can do about the timings of in and out.","width":167},{"text":"and in fact if your interested, you can see just how much time these take","width":307},{"text":"and that would help inform you what kind of speedup you might expect for the process as a whole","width":585},{"text":"and with that. have a wonderful weekends. im here if you have any questions. ill you see monday!","width":290},{"text":"thank you very much","width":121},{"text":"monday we'll talk about pipes and seeking through files","width":320}],

  // Start Lecture Video 19
  // Part 0
  [{"text":"Good morning class","width":318},{"text":" How are you? Good Morning","width":188},{"text":" How are you? Great, Isn't the weather wonderful?","width":206},{"text":"So here we are only a week back from the Spring Break","width":145},{"text":" Let's kick back and relax","width":70},{"text":" As you know","width":60},{"text":" Uh","width":152},{"text":" Come on","width":243},{"text":" Okay, alright so","width":379},{"text":" We are going to look at two important things","width":129},{"text":" First is pipes","width":93},{"text":"The second is working with file descriptors and moving around in files","width":413},{"text":"Okay","width":63},{"text":" So, the  other important thing to note is that there is a quiz on Friday","width":259},{"text":" No, just kidding","width":93},{"text":" It's Wednesday","width":191},{"text":" Okay, so the quiz on Wednesday we'll talk about in the second half of the lecture","width":208},{"text":" So let's get started with pipes","width":186},{"text":" Pipes are a form of IPC","width":256},{"text":" Interprocess communication","width":113},{"text":" It's an easy way to go to send data from one process to another process, especially when you want to talk about child and parent processes","width":655},{"text":" And the great thing about is that the data that you sent stay in memory","width":408},{"text":" So, yes we could have opened a file and write to communicate with different process","width":330},{"text":" But we can use pipes very efficiently when we have processes in memory, so the kernel system can manage this as a stream","width":668},{"text":" Now why do we call it a pipe","width":78},{"text":" Because it behaves like a pipe","width":94},{"text":" We can use one file descriptor to push data down one end and another process can say \"Okay, I'm ready to read data","width":463},{"text":" Let me start pulling data out","width":206},{"text":"And it behaves exactly the same way as reading and writing to a file","width":450},{"text":" So this is a fundamental concept in Linux and other operating systems is let's have something called a file descriptor which can actually be more than a simple file descriptor","width":663},{"text":" We're going to see this again later in the course when we talk about socket and when we talk about networks","width":266},{"text":" Guess what I'm going to set up a communication to another machine somewhere on the intweb and I want to send some data to it or pull some data from it, and it just like reading from a file","width":801},{"text":"Well","width":22},{"text":" Kind of","width":38},{"text":" Of course there is little bit more details but that is the basic idea","width":176},{"text":" I have an integer that represents the communication pipe and I want to be able to send and receive data","width":411},{"text":" Now, first thing to note about pipes is that actually you get two file descriptors for the price of one","width":388},{"text":" We're gonna use the first one for reading and the second one for writing","width":308},{"text":" Okay, so we have two file descriptors","width":145},{"text":"So they are specialized","width":49},{"text":" So a pipe actually is a one way device","width":318},{"text":" We could use it to send data to ourselves","width":314},{"text":" It would be pretty silly, but we could use it","width":103},{"text":" There is a danger to that though, which is that the pipes like a ring buffer have a limited capacity","width":387},{"text":" If you try to send too much data on the pipe, your write call will block until somebody actually pulls data","width":574},{"text":" So if you use single threaded process that's bad news, because now there is another thread available to actually do the read","width":534},{"text":" So let's actually start by actually looking at some code here","width":380},{"text":" Okay, right","width":113},{"text":" Let's pull up the screen","width":182},{"text":" Do we have a picture","width":786},{"text":"Okay","width":143},{"text":" Ah","width":158},{"text":" Step 1, plug it in","width":944},{"text":" Hurray","width":35},{"text":" Okay","width":40},{"text":" Right","width":364},{"text":" So here is our device now","width":174},{"text":" other comments on this that there is more to read about pipes and you can read more in my little wiki book","width":694},{"text":" Here we go","width":25},{"text":" For example, files and working with pipes","width":229},{"text":" And so there is more to read about this","width":450},{"text":" So, how do we make a pipe","width":430},{"text":" Okay, so the trick is first of all just make an integer array of size 2","width":417},{"text":" Here it is","width":26},{"text":" I'm going to call it my file descriptors","width":166},{"text":" Here we go","width":169},{"text":" And so we are going to pass a pointer to my array","width":204},{"text":" How do I do that? Easy, just use the name of the array to this function called \"pipe\" ","width":630},{"text":"Okay","width":81},{"text":" So that makes an object inside the kernel that represents the communications","width":275},{"text":" I can now use between different processes","width":116},{"text":"So for example let's now just have a look at those numbers so we got the two file descriptors fds 0 and fds 1","width":974},{"text":"So we made ourselves a pipe","width":112},{"text":" Now this being an in memory thing","width":191},{"text":" Here we go, it used file descriptors three and four","width":331},{"text":" That shouldn't be too much surprise because I already know that 0, 1, and 2 are being used, right? 0 for standard in, 1 for standard out, and 2 for standard error","width":438},{"text":" Alright, so we got ourselves a pipe which then just died because process died","width":380},{"text":" So we want to do a bit more than this","width":105},{"text":" We want to set it up so that we can send the message from our parent to a child","width":354},{"text":" Okay, so let's make a parent and child","width":161},{"text":" How do I do that? It's time to fork","width":233},{"text":" So here is our fork result, and if I get a number bigger than 0, then that mean I'm actually the what? The parent or the child?","width":895},{"text":"I'm parent! Alright","width":172},{"text":" I have a child f so I am the parent","width":676},{"text":" Okay, so we are going to send something from the parent to child","width":234},{"text":" So let's send something down to the file descriptor","width":186},{"text":" Right, now the first file descriptor is used for reading and the second one is used for writing","width":308},{"text":" We should send something to fds 1","width":236},{"text":" Right, what should we send? So how does the write work? So remember, it's just takes a pointer to some memory, and if we pass in a string like Hello, what do we get there? Well you get a pointer to where this string constant Hello's","width":922},{"text":"So we have the address of the H and we can send that","width":134},{"text":"And we can send that right","width":146},{"text":" Later I send a new line as well","width":158},{"text":" So how many characters","width":49},{"text":" How many bytes is that to send down? That's one, two, three, four, five, six, right","width":237},{"text":" So we will send six bytes to that file descriptor, Now we could have send it to the standard out, and we would have seen it appear on the output, right? But we are not doing that","width":501},{"text":" We're going to push these six bytes down the pipe","width":218},{"text":" And we stand a good chance of not blocking","width":131},{"text":" Most operating systems allow you to send at least 4 kilobytes of data","width":383},{"text":"Others actually some allows you up to 128 kilobytes I've seen in the past, so we know this is not gonna block but what should we do now? let's just prove that we've done something we want to print out","width":916},{"text":" Okay, so parent sent some bytes","width":550},{"text":" Okay, and we'll  just finish","width":274}],
  // Part 1
  [{"text":"Okay, so other thing to do then is to be the child","width":372},{"text":" As a child, you want to write from this","width":93},{"text":" Okay, so how can we do this? Well one low level way of doing without the c-library is to do directly call read, and if you call read, you need say which file descriptor and so, that would be fds 0","width":922},{"text":" You need to say, Hey here I got some buffer, I got some memory you can use, and also say how many bytes I am prepared to accept","width":586},{"text":" so if I were to make, for example, a little space on my stack here","width":365},{"text":" I could then say read into the buffer, and here is the size of my array","width":537},{"text":"Now if you call read like this, of course you may not get a thousand twenty four bytes","width":444},{"text":" So actually we should see how many bytes we got","width":231},{"text":"So here is the number of bytes and we expect that to be greater than zero","width":340},{"text":" In fact, read will block until we get some bytes out of that pipe","width":422},{"text":" Okay, what should we do with this bytes?","width":81},{"text":" Well, let's for now print out \"Hurray I can't some bytes\"","width":655},{"text":" say the number, and we could say, read what happens","width":284},{"text":" Right, and you can perhaps guess what might happen here","width":150},{"text":" So we want to say we got this number of bytes and here is our buffer","width":526},{"text":" Okay, and I'll do a new line, so we flush this","width":294},{"text":" Right so let's try this and see what we get","width":836},{"text":"Alright, so parent sent some bytes, and \"Hurrag I cant some bytes\"","width":374},{"text":"\" Right, so my typing today is a little off","width":149},{"text":"But we saw six bytes, and we saw \"Hello","width":206},{"text":"\" Now, one two three four five","width":424},{"text":" We were lucky in this case","width":165},{"text":" Why were we lucky? Yes! correct, we didn't send the null byte","width":564},{"text":" We sent \"Hello\" and then new line, which happen to be six bytes","width":223},{"text":" But we never actually sent a null byte","width":123},{"text":" We chose to not send a null byte","width":91},{"text":" We just sent it as bytes","width":96},{"text":" And the operating system doesn't care","width":99},{"text":" It just says \"Okay we got some bytes from my parent\"","width":201},{"text":"got some bytes from pipes that stick them down, and later it says \"Okay we'll read this many bytes\"","width":349},{"text":"So, our code is actually dangerous","width":183},{"text":" Our code could have printed out gibberish after the \"Hello","width":547},{"text":"Let's fill up our buffer with some garbage, right","width":303},{"text":" Let's put an extra character in there","width":1225},{"text":" And you'll see that we manage to print out the hash as well","width":288},{"text":" which is not a part of the message","width":264},{"text":" So our mistake here is that we forget that the string has a null byte, and if you want to do string processing on the byte that you get back, remember to include the null byte","width":703},{"text":" Either send it explicitly down your pipe or add it afterwards","width":452},{"text":"The operating system doesn't know that you're sending a string data","width":200},{"text":" It's just bytes as the operating system concerned","width":185},{"text":" It's just Hey, I'm gonna put this on the memory","width":133},{"text":" Here's some bytes to send the pipe","width":300},{"text":"So, what could we do with this","width":396},{"text":" One common thing to do is to include special character in the end of our message","width":320},{"text":" Maybe a null byte, for example","width":101},{"text":" Or another character to say \"Okay, I'm not going to send anymore data\" So, if I for example, I could say I know that my normal data would never use an exclamation point","width":788},{"text":" So that my reader would say, Oh look, I just saw an exclamation point","width":287},{"text":"I now know that was the special terminator to say that okay my parent is done with me, and it's never gonna send any more data","width":539},{"text":"So telling the reader that you have no more data is easy","width":301},{"text":" You could just simply include a special character","width":266},{"text":"Okay, so telling the reader, you just send something special You send \"Okay, good bye\", and then you write a little bit of code and say, \"Oh look, I've just got the final piece of information","width":962},{"text":"I know there is no more data coming","width":249},{"text":"There is another problem, which is \"What if the reader closes and the writer doesn't know\"","width":638},{"text":"And we will return to that in the second half of the lecture, so this just a quick introduction to pipes","width":522},{"text":" Look they are pretty easy and now they can give you a form of inter-process communication","width":332},{"text":" If you want your child and your parent to send stuff to each other, guess what? You need two pipes","width":600},{"text":"And, I deliberately didn't tell you one more detail, which we will review in a little bit","width":545},{"text":" About closing these file descriptors","width":162},{"text":" This is kind of naive version of pipes","width":201},{"text":" We'll come back just in a little bit","width":174},{"text":" Instead, we'll gonna talk about fseek and ftell","width":314},{"text":" Unless any has any quick question","width":417},{"text":"No quick question","width":113},{"text":" So the comment here is \"Whoops, we should be closing stuff\"","width":100},{"text":"And we should be closing stuff here too","width":846},{"text":" Okay","width":273},{"text":" Alright, so let's do fseek and ftell","width":546},{"text":"Alright, so the next thing we'll talk about is our file descriptor, when it talk to a normal file when we call let's say open or fopen a file","width":636},{"text":" Have a position","width":66},{"text":" Right? We can say Okay give me the next line","width":141},{"text":"Say call read line","width":84},{"text":" Or read the following next 8 bytes","width":264},{"text":"And every time we talk to a file descriptor then, we're changing the position in a file","width":396},{"text":" So the operating system is keeping track of that","width":220},{"text":" We can change it","width":222},{"text":" One other cool thing we can actually do is jump to the very end of the file","width":465},{"text":"So, why might that be useful? Okay, we want to write some data again","width":610},{"text":" Suppose you want to know how big your file was is the plan","width":487},{"text":" Move the file descriptor, so it's right at the end of the file, and then say \"Excuse, what position am I?\" And that tell's you how big the file is","width":684},{"text":" So please tell me my current position","width":287}],
  // Part 2
  [{"text":"So, the things I'm talking about are fseek and ftell","width":467},{"text":" Let's have a look at that","width":775},{"text":"Okay, great","width":384},{"text":" So, ftell, tells us our current position","width":672},{"text":" So if you go to file descriptor and you say, \"Where am I in the file?\" That's useful in case you want to get back there later for example","width":638},{"text":" It's also useful if you get to the end of the file and you want to know how big the file is","width":347},{"text":" So a common way of finding out how big the file is is the following","width":368},{"text":" We'll fseek to the end","width":375},{"text":"Call ftell and then fseek to the beginning of the file","width":516},{"text":" To do what we're gonna do, say copy it","width":494},{"text":"In fact, past cs 241 exam had asked you to identify or write code that does this very thing","width":470},{"text":" I wanna know, for example, how big of buffer I should need in order to read in the entire file","width":291},{"text":" Great, no problem","width":54},{"text":" I'll just find out how big the entire file is, and then go back, so I can read in the entire data","width":449},{"text":" And it's a common gotcha or common mistake to forget this line","width":279},{"text":" If you move to the end of the file, they say, \"Okay now we need this many bytes\" your operating system will say, Ha ha ha","width":338},{"text":"I'm sorry, I don't have that many bytes","width":185},{"text":"Alright, so don't forget to move back to the beginning if you intend to actually read the data in","width":316},{"text":" Now, fseek is actually pretty powerful","width":253},{"text":" You can use it in three different ways","width":198},{"text":" You could say \"Hey, I want to get to the end, I want to get to the beginning, or I want to get to the absolute position","width":1067},{"text":"So if you'd actually earlier called \"Hey, ftell was my current position\"","width":306},{"text":" You could use that to say \"Now I want to return to at that point\"","width":617},{"text":"Okay, let's have a play with this","width":586},{"text":"Okay","width":473},{"text":" So, I want to open a file, how do I do that? Well let's do it in using C, so we have a File pointer here","width":586},{"text":" Remember all these basically wrap a low level file descriptor, so we can call things like fprintf and fscanf, but underneath it all, they will be calling write and read","width":849},{"text":" So, we could say open a file","width":229},{"text":" Let's call it \"data.csv\"","width":139},{"text":" and I want it to say open it for reading and writing","width":259},{"text":" So, let me print some data to it, so I'll have 1, 2, 3, 4","width":632},{"text":" And, let me fclose this","width":380},{"text":" So, that means creating a file, writing to a file descriptor, and closing it","width":466},{"text":" Okay, so we'll will run this","width":235},{"text":"And we made a file","width":154},{"text":" Now inside here, I got my data.csv","width":324},{"text":"and I could look at its contents","width":308},{"text":" There we go","width":90},{"text":" Oh look, there it is, 1, 2, 3, 4","width":253},{"text":" So, let's do this again, but this time , we will play out our tricks with it","width":316},{"text":" Let's have a look at fseek","width":388},{"text":" Here it is","width":20},{"text":"So we pass in a point to the stream","width":103},{"text":" We can specify an offset that typically is gonna be 0, and then this whence constant, which is either gonna be \"Hey an absolute position, the very beginning, or the very end\"","width":617},{"text":"So we can just seek to the end today","width":307},{"text":" So we'll go fseek on f","width":241},{"text":" No offset needed today","width":95},{"text":" And we want to go to the end","width":201},{"text":" And please tell me then where am I in the file","width":454},{"text":"If we look at the ftell, ftell gives us back a long","width":611},{"text":" Let's not print anything to it this time","width":581},{"text":"Okay, and we'll have a look at that position","width":1080},{"text":"Alright, what do we get? Oh zero, L","width":465},{"text":"How did we get zero L? Because that's not a real type","width":508},{"text":"Right","width":54},{"text":" So we made a file with 1, 2, 3, 4","width":108},{"text":" But the position is zero","width":199},{"text":" Why?","width":926},{"text":"I'll give you a clue","width":52},{"text":" Let's look at our data file","width":507},{"text":"Whoops","width":51},{"text":" We just opened a new file for writing and we cleared its contents","width":362},{"text":"So the file is empty","width":72},{"text":" We've truncated it back to zero","width":190},{"text":"Alright, so let's have a look at this data that I made earlier","width":784},{"text":"This time we'll open hello.c for reading","width":600},{"text":"Okay, I will see that this time we found that our program size","width":310},{"text":" Whoops, why can't you see that?","width":222},{"text":"Just jump to the left","width":100},{"text":"Is that better? Right, yeah","width":132},{"text":" We printed out 71","width":71},{"text":"Okay, so what do we do? We opened hello.c","width":247},{"text":"for reading and we seek the end","width":162},{"text":" And we said \"Okay, what's the current position?\"","width":145},{"text":"So, with this, then I could now read in all those bytes from that file","width":454},{"text":" For example, I might at this point say, \"Now I know how big this file is, let me have a buffer of exactly of right size\"","width":565},{"text":"Alright, so malloc position and then I can call fread","width":476},{"text":" Okay, so fread, I would like to read all bytes as possible please","width":411},{"text":" And how many bytes do I want? Well that many","width":250},{"text":"So, does that manage to read in my file? ","width":341},{"text":"Let's see what we get","width":144},{"text":" Alright, so this time, let's print out the ","width":244},{"text":" okay that was our position","width":82},{"text":"Let's print out, call it, num bytes read","width":749},{"text":"Okay, forget size of this","width":137},{"text":" Probably it is size type or long, but we will use that for now","width":426}],
  // Part 3
  [{"text":"Okay. Let's check man 7 fread.","width":1093},{"text":"So we need a pointer and size of nmemb, and stream, so we got the order wrong here","width":897},{"text":"So our pointer into the buffer.","width":435},{"text":"And okay. Alright, the number of bytes read was zero.","width":565},{"text":"Why?","width":339},{"text":"Yes! It's still at the end! Whoops. ","width":153},{"text":"Okay. So before we read in the entire file, let's seek back to the beginning. Alright, so how can I do that?","width":493},{"text":"I could do this two different ways.","width":152},{"text":"We could specify an absolute position 0.","width":348},{"text":"So I could call SeekSet. Okay, let's do that. Where is my..there it is.","width":871},{"text":"Or I could do relative to the current position. So if I know that I'm 71 bytes ahead. I could say move negative 71 bytes backwards. Alright, this time how many bytes we got?","width":685},{"text":"What? 1?","width":163},{"text":"Oh I must have messed up the constants here. Number of bytes read...","width":784},{"text":"Uh.. bop ba bop ba doo. Alright.","width":524},{"text":"Or we may have to read the... Oh no no no no no. That's correct.","width":479},{"text":"I did this wrong way around. Okay. Here we go.","width":304},{"text":"So, I specify this as \"Hey read 1 chunk and that chunk size is position.\"","width":363},{"text":"So now if I set my fread constants correctly, it would say the size of chunk is 1 and I want to read 71 of them. In other words 71 characters.","width":625},{"text":"Then the result I get is correct! I managed to read 71 characters.","width":341},{"text":"So great, I read the entire file into memory in one go. And we could print it out.","width":450},{"text":"So let's just puts. Where is the buffer? Okay. Buffer.","width":711},{"text":"Now is this safe code? Do you trust it?","width":391},{"text":"Look, it printed out the contents of that file. Printed out Hello world. ","width":332},{"text":"Is that safe?","width":285},{"text":"Correct! There is no null pointer guarantee at the end.","width":211},{"text":"So actually we should have made the buffer one byte larger and then actually put a zero byte in at the very end.","width":673},{"text":"So, safer code would just say \"Look, I know the file is there, so I'm gonna treat it like text later.\"","width":356},{"text":"But fread is just saying, okay read all the bytes into this memory. If I truly wanted to treat it as a single string, c-string. I better make sure that it is terminated at the end.","width":886},{"text":"So my code might have to be put at the buffer.. There we go.. Make sure that truly is terminated.","width":975},{"text":"Alright, so now we got a fast way to read in the entire file.","width":488},{"text":"Yes! ","width":492},{"text":"Here?","width":199},{"text":"fseek here?","width":259},{"text":"Okay, so this means the very end. Past the end of the file.","width":325},{"text":"So if you would to then open this as reading and writing, you would actually being appending to the current contents of the file.","width":509},{"text":"Yes?","width":645},{"text":"Okay. So.. does the a typical text ... does a typical text have a null characters in it?","width":537},{"text":"No they don't. It's only when we pull strings into memory when we append a null character to represent the c-string.","width":655},{"text":"But files don't have the null characters in them.","width":134},{"text":"Sorry, the text files don't normally have a null characters in them.","width":315},{"text":"No. It does not have an end of file character.","width":173},{"text":"So, instead there's some meta information to say, \"Oh actually this file is currently have this many bytes.\"","width":452},{"text":"And there is going to be an alternative ..so the meta information we will see about the file is the thing would be something like when was it modified? Who modified it?","width":419},{"text":"Who created the file, and how many bytes on disk does it currently use.","width":805},{"text":"Right. So the fseek does not actually walk along the file checking for the byte. It can quickly use the meta information of the file to tell how big the file is. So it's pretty fast.","width":757},{"text":"Yes?","width":449},{"text":"Would there be what?","width":490},{"text":"Yeah. There's actually is something call stat. But we will talk about it later.","width":342},{"text":"Yes. So the alternative way to get the file length is to use stat.","width":217},{"text":"But I'm using the fseek, ftell as a way to introduce fseek and ftell as \"Hey here is one practical way of using it.","width":620},{"text":"And stat is low level system call. If we use fseek and ftell, you are using a c-library and nice thing about that is that it is little bit more portable then getting straight down into the POSIX.","width":954},{"text":"land of using stat.","width":340},{"text":"Okay, for example, this would work on a windows machine.","width":456},{"text":"One gotcha is that you saw is that fseek gave you a long.","width":433},{"text":"So this would only work on medium sized files. These days we can have files that are gigantic.","width":545},{"text":"And much larger can be represented than just a long type.","width":325},{"text":"Yes?","width":534},{"text":"Right, so if you fseek back to the beginning, you can set it up so you can only write over specific bytes.","width":691},{"text":"So the trick here is the option we give to fopen. As so whether you want it to start brand new file or append to an existing file.","width":799},{"text":"But the way to think about this is simply that my file is basically just an array on disk.","width":594},{"text":"And I've got a pointer that points to where I would write some bytes. So if I wrote 3 bytes, I'm going to just overwrite 3 bytes.","width":636}],
  // Part 4
  [{"text":"Other questions?","width":546},{"text":"So... Interesting problem happens is. What happens if we open these file descriptors and then we fork?","width":893},{"text":"What happens, right? Cause I've got clearly something opened, talking to a file.","width":344},{"text":"So I can now modify that. I can fseek to different places","width":398},{"text":"And I can close it.","width":372},{"text":"Okay, so. First the little problem is let's suppose your parent calls fclose.","width":1152},{"text":"What do you think will happen to the child?","width":228},{"text":"Can a child still use the file descriptor?","width":182},{"text":"Make your guess now, and you want to be sociable, tell your neighbor","width":877},{"text":"Okay, here is why I told to tell your neighbor, because psychology has shown that you'll actually remember things more if you're surprised when you are wrong.","width":539},{"text":"Okay, so make a commitment. It doesn't matter if you get wrong. Just at least be surprise. Okay.","width":380},{"text":"Alright, so the answer is that it doesn't affect the child.","width":364},{"text":"That these actually appeared to be independent, so actually if the parent closes, the child can continue to use the file descriptor and vice versa.","width":859},{"text":"Alright, so, in that sense they are independent.","width":432},{"text":"Alright, now what about this one? ","width":143},{"text":"What happens if you fseek before forking?","width":314},{"text":"What do you think the child and parent see? Do they see the same position?","width":439},{"text":"Make your guess now.","width":2198},{"text":"Okay, so if you seek and then fork, both the child and parent will start from that position","width":389},{"text":"So for example, if you seek to the very end of the file, and then forked. Both the child and the parent start from that position.","width":570},{"text":"So, they will both see or use the new position.","width":883},{"text":"Okay, what about this one?","width":113},{"text":"What happens if say the parent or the child fseeks?","width":452},{"text":"Does it affect the other process?","width":296},{"text":"Make your guess now","width":1592},{"text":"Right.","width":354},{"text":"Yes, it affects the other process","width":699},{"text":"Okay, hey, that's not fair, is it?","width":184},{"text":"Alright, so here's why.","width":153},{"text":"Let's think about this from the system's perspective.","width":268},{"text":"It's got a big list of file descriptors which are opened, and if you fork, then actually it increase reference counter and says \"Oh look, I've actual got two processes using my internal file descriptor.","width":1124},{"text":"So it's a bit like showing a library book with somebody that if you want to turn the page of the library book, guess what everybody else using the same file descriptor has to look at that page of the book.","width":917},{"text":"Alright, so the analogy is like a book page.","width":658},{"text":"Okay, so the surprise is, \"Yes\", in terms of closing it, it's independent, but in terms of using it, \"No.\" It's actual one open reference. ","width":598},{"text":"So, think of it as the kernel holding a reference to a file at a particular position.","width":411},{"text":"And by forking, all you've done is double the number of, or increment it by 1 of number of processes using this same open resource.","width":779},{"text":"That means the parent could play bad news on a child.","width":193},{"text":"Here you go. Have this file descriptor. Oh ha ha. I'm going to change the position that you are looking at and you didn't know.","width":415},{"text":"Alright, so you can really mess with child's mind here.","width":273},{"text":"So it's like a book. There is one particular position, so that's a common gotcha. ","width":558},{"text":"And thus. Here's something that is kind of useful. If you wanted to write code to write to different parts of a file, at different positions.","width":1207},{"text":"Then, if you had multiple threads, then there is a problem, right?","width":365},{"text":"all of them would be calling fseek trying to move to a different position.","width":326},{"text":"It would be nice if you can just say, \"No, no. I want to send some bytes and this is the absolute position in the file that I want to send these bytes.","width":431},{"text":"And so, this is why high performance code these days. If you go to the HPC. HPC lands high performance computing stuff.","width":528},{"text":"They often use something call pwrite, which allows you to specifically write to a certain position in the file independently of this fseek and ftell stuff.","width":711},{"text":"I don't think we'll use it inside cs 241. I just want it to mention it. It is just like a cute thing to talk about in an interview.","width":380},{"text":"It's like, \"Oh yeah by the way, this pwrite stuff exists\"","width":232},{"text":"That came about because of changing the position of the file becomes the bottle neck.","width":449},{"text":"That all of your threads or child processes suddenly say, \"Okay, hands off everybody. I want to change the absolute position of the file and no one else can change it once I'm using it\" So that's clearly a course of contention","width":764}],
  // Part 5
  [{"text":"Okay. Are we ready? Page 2!","width":1073},{"text":"Let's so.. Okay here we go.","width":178},{"text":"What's a named pipe and unnamed pipe?","width":237},{"text":"So, I actually showed you in an example of an unnamed pipe.","width":305},{"text":"Where inside your c-code, you can say \"Okay, give me a pipe.\"","width":227},{"text":"And you pass it a reference to a little array and it fills that in with two file descriptors. That's an unnamed pipe.","width":417},{"text":"Does not exist anywhere other than inside the memory.","width":191},{"text":"There's actually another form of this, which isn't used very often. But it's called a named pipe.","width":479},{"text":"Which is something you can create apparently on the disk, and here's how you call it.","width":492},{"text":"You could say make fifo and give it a file name.","width":455},{"text":"Okay, so we'll call it a bag pipe.","width":259},{"text":"Anybody from Scotland here?","width":223},{"text":"Okay. ","width":273},{"text":"Right, so bag pipe is an instrument where you can set up a drone and you keep squeezing it, and you wear a kilt and you","width":738},{"text":"Stand on the great hills of Scotland.","width":121},{"text":"Alright, so that's a bag pipe. It seems to exist on the file system, and in fact the joy of using a bag pipe like this is that it's lifetime is independent of your process.","width":732},{"text":"The bag pipe will live for other processes","width":344},{"text":"And you can create it using this make fifo. ","width":217},{"text":"What do you think fifo stands for?","width":196},{"text":"First In First Out, right. So your first breadth into the bag pipe will be the first data that comes out when you try to read from this file.","width":533},{"text":"Except this is not a file. It's a pipe, so the order of the data.","width":335},{"text":"So reading from it and the writing of it doesn't behave like a file. It's like a queue. First-in First-out queue.","width":594},{"text":"They are not often use, but they are worth knowing about","width":467},{"text":"Remember signals? I'm not talking about con-sig. I'm talking about software interrupts we can do such as sigchild, sigint, sigkill.","width":610},{"text":"Pipes themselves have a signal","width":414},{"text":"Alright. You get a signal","width":1400},{"text":"If you send data down the pipe and no one is listening","width":524},{"text":"See, if a tree falls in a forest, does anybody hear it?","width":325},{"text":"As the writer, how can you discover that your reader has died?","width":323},{"text":"Is no longer listening to the data","width":135},{"text":"And here's how.","width":91},{"text":"Actually, you can get a software interrupt, you can get the signal.","width":208},{"text":"Say, Oh by the way, there is no one listening anymore. All the file descriptors have disappeared, have been closed.","width":696},{"text":"Maybe deliberately, or maybe the child process itself has finished, but guess what? You can send as much data we used, because you'll like try down this pipe, but there is no one there to read it anymore.","width":949},{"text":"So you get a sigpipe, so you can choose to handle that. You can set up a signal handler to say, \"Oh look, my reader from the pipe is not getting anymore data\"","width":834},{"text":"Now, a couple of comments on this.","width":445},{"text":"First of all, this means if you fork, then make sure you close the unwanted file descriptors","width":1378},{"text":"So what do I mean by that?","width":460},{"text":"Remember we did this kind of thing, we said \"Okay, give me two of these\", we call pipe. ","width":347},{"text":"Look how easy this is. Alright, so now I got my read and my write. Then I call fork","width":557},{"text":"So now, conceptually, we got four file descriptors. Yes, the child has two, the parent has two.","width":404},{"text":"But we're only going to use half of them.","width":250},{"text":"If the parent gonna do the writing, the parent does not need the read.","width":192},{"text":"If the child is gonna do the reading, it doesn't need the writing file descriptor.","width":397},{"text":"So a common pattern of this is in the child, the first thing you do is that you would close the one that you're not gonna use.","width":802},{"text":"So for example, we might close the second one, and in the parent, we do the same thing. ","width":789},{"text":"We close the first one, the read.","width":495}],
  // Part 6
  [{"text":"Why'd do that?","width":206},{"text":"To make sure that when our true reader really does finish or close their file descriptor then we'll get the signal.","width":584},{"text":"Then the system truly knows that there can be no more, that there is no one left to actually hear the message.","width":391},{"text":"Right? So that's the pattern. you'll see this, and you can read the wiki book to see examples of this, where you close the unwanted one.","width":548},{"text":"Okay, now the joke of the day and on EWS it doesn't work.","width":406},{"text":"The EWS linux kernel 2.6 whatever it is, has a bug such that you never see sigpipe. ","width":708},{"text":"But don't worry. I'll tell you a work-around on Friday. ","width":331},{"text":"Or maybe the end of today, we'll see","width":242},{"text":"Right, should we have time for this?Alright, how do we send an integer... a value of a variable?","width":379},{"text":"Okay. I showed you code that just use read and write to send stuff down to a pipe.","width":481},{"text":"If you wanna start sending more interesting data like integers, etc, we want to be able to call things like fprintf(), right?","width":454},{"text":"We actually want to send.. a user send a c-library.","width":190},{"text":"Guess what? Here's something very useful. I can call fdopen.","width":777},{"text":"Where it pass in one of my integers, a file descriptor","width":325},{"text":"So, for example, if I want to use the write end, and then the other is... I'm not trying to use this for reading or writing.","width":652},{"text":"And this gives me back one of the file objects.","width":432},{"text":"There, I can then call fprintf().","width":204},{"text":"Or if I'd opened the reading one, I can then call fscanf()","width":465},{"text":"So this is a way to promote a low level unix file descriptor up to a c-based object that we can now... I don't mean object in C++. ","width":745},{"text":"I just mean a resource in a system so then we can call fprintf or fscanf and work with more structured data.","width":749},{"text":"So this takes us from a simple integer to the C-based version. Now I can use fscanf and fprintf.","width":836},{"text":"Questions? Yes?","width":272},{"text":"Yeah fdopen.","width":151},{"text":"Alright so we're going from an integer to a C-level object","width":479},{"text":"Alright, yes?","width":433},{"text":"When it happens, it happens when you try to write stuff in into the pipe no one is listening.","width":475},{"text":"So you want to try to write some data and then you just discovered that no one's listening.","width":839},{"text":"You don't what happens to the reader. That's the point. Maybe you could set up a different pipe to say \"Okay, I'm gonna finish it, you can use another pipe to send the data.\"","width":717},{"text":"But the idea is that the pipe itself can tell you when no one is listening.","width":546},{"text":"No. no, it's when you try to send the data itself. If there is no one there already, you get the signal.","width":1035},{"text":"Okay, so.. right. Yes we have a quiz on wednesday. I'll publish some practice questions in a little bit. But here are the topics you can expect.","width":875},{"text":"Conditional variables, semaphore, mutex locks. You have mastery of these amazing tools. You know what producer consumer is.","width":591},{"text":"You know how to make a fixed size multi-threaded ring buffer.","width":246},{"text":"You could do it with semaphores, you can do it with conditional variables. You know how to analyze a good and bad implementations.","width":587},{"text":"You know the coffman conditions. You could understand the definition. You know reader-writer.","width":469},{"text":"You could analyze good and bad implementations.","width":244},{"text":"You know dining philosophers.","width":175},{"text":"You could talk about the different implementations and will they suffer from deadlock or livelock.","width":321},{"text":"And finally, resource allocation graphs and how to use them to determine which processes are deadlocked.","width":533},{"text":"With that have a wonderful week, and I'll see you on Wednesday. Thank you very much.","width":409}],

  // Start Lecture Video 20 (QUIZ NO CAPTIONS)

  // Start Lecture Video 21
  // Part 0
  [{"text":"okay good morning class","width":247.18181824684143},{"text":"as you might have realized, spring break is starting and so congratulations for being here","width":349.18181824684143},{"text":"as opposed to enjoying the sunny weather outside, oh wait","width":164.18181824684143},{"text":"so first of all if your sitting in the back and want to have a more cozy experience, why don't you get up and move to the front and see what it's like at the front for a change","width":549.1818182468414},{"text":"I promise not to bite too hard","width":291.18181824684143},{"text":"either sit down and relax or come on down and see what it's like at the front","width":230.18181824684143},{"text":"and we can have a cozy class","width":102.18181824684143},{"text":"right so here's what we're going to do today","width":80.18181824684143},{"text":"we're going to talk about handling errors and how we detect them with our system calls","width":273.18181824684143},{"text":"and then we're going to talk about some fun stuff, we're going to start talking about networking","width":259.18181824684143},{"text":"and this is kind of important right?","width":83.18181824684143},{"text":"we want our machines to talk to each other so we'll get done today with some of the basics about ip4 and what's the difference between UDP and TCP","width":654.1818182468414},{"text":"but before we do all of that, let's see if your brain cells are working today in terms of pipes","width":367.18181824684143},{"text":"right so I mentioned before that you can get a SIGPIPE when something happens - when?","width":659.1818182468414},{"text":"when does your process get a SIGPIPE?","width":410.18181824684143},{"text":"I'm sorry I'm not listening","width":144.18181824684143},{"text":"yes, when you have a PIPE and you write some bytes to the pipe and there's no one there to listen","width":508.18181824684143},{"text":"and the failure [will cause your process to] get a SIGPIPE so you can write some code inside your signal handlers to say oh look the listeners died, maybe I'll just fork exec a new one for example","width":686.1818182468414},{"text":"now a common gotcha though is when your playing with pipes and fork as you might have found out in the lab, is that you forget to close all of those file handles that you don't need","width":618.1818182468414},{"text":"so if you still happen to have a reading file descriptor open, you won't get the signal because in theory you could still read form that","width":698.1818182468414},{"text":"okay, so that's our first little question right","width":428.18181824684143},{"text":"alright so when all the readers have closed and you try to write to a pipe, you should get a signal","width":1093.1818182468414},{"text":"in practice we've found it doesn't actually work on EWS","width":218.18181824684143},{"text":"the old EWS machines don't support that yet","width":292.18181824684143},{"text":"but here's the good news, you may have gotten an email, did you get an email from me this morning?","width":310.18181824684143},{"text":"fantastic, right that's my new email script","width":156.18181824684143},{"text":"I can now send email as anybody to anybody inside UIUC","width":469.18181824684143},{"text":"anyway I won't make jobs about the provost","width":92.18181824684143},{"text":"so hopefully you've logged into your new virtual machines","width":392.18181824684143},{"text":"brand new feel free to destroy it, install software, etc etc","width":378.18181824684143},{"text":"and in the worst case, I'll just give you a new one","width":273.18181824684143},{"text":"so it's probably not a great idea to store your family archive on this machine","width":273.18181824684143},{"text":"but it is important because hey with this box you've got root","width":195.18181824684143},{"text":"you can do root-y things like mount file systems, like connect to named ports and run them ports","width":415.18181824684143},{"text":"we'll be talking about that in a little bit","width":134.18181824684143},{"text":"but anyways, so let's finish our pipes off","width":146.18181824684143},{"text":"so when can a listener discover that there are no more writers","width":237.18181824684143},{"text":"how about this then, because in section our listener right was wc, we were using word count to pull data from standard in","width":625.1818182468414},{"text":"how do you think wc knew that the pipe had closed, that there was no more bytes coming","width":730.1818182468414},{"text":"okay so we had to flush it but actually we had to do more than flush","width":189.18181824684143},{"text":"flush simply says to the C library hey you know those bytes you're looking after for performance sake","width":334.18181824684143},{"text":"I don't want you to look after them anymore","width":96.18181824684143},{"text":"send them down the pipe, in other words call write","width":227.18181824684143},{"text":"but we need to do more than that because flushing doesn't actually mean that the pipe itself has closed","width":369.18181824684143},{"text":"we want to close it but we haven't actually answered the question yet of how does the listener know when it's not going to get anymore bytes","width":724.1818182468414},{"text":"and the answer is if you call read, it returns zero","width":512.1818182468414},{"text":"so it's not an error yet, it's just simply that hey I'm going to give you zero bytes and the pipe is closed","width":736.1818182468414},{"text":"so let's do this","width":243.18181824684143},{"text":"let's have a little play","width":207.18181824684143},{"text":"okie dokie right so I made a pipe ","width":279.18181824684143},{"text":"I'm going to close the second file descriptor, in other words the write end","width":283.18181824684143},{"text":"and let's try reading from it","width":204.18181824684143},{"text":"okay so bytes read equals read","width":216.18181824684143},{"text":"we need to give it a file descriptor okay so what shall I say","width":270.18181824684143},{"text":"fd[0] is where we read from, how many bytes do we want? well here's a pointer to buffer and I'll take sizeof buffer minus one","width":582.1818182468414},{"text":"why minus one you say? well for safety for example I might put in at the very end a termination byte","width":583.1818182468414},{"text":"for example, just to make sure my strings don't go on forever","width":236.18181824684143},{"text":"okay so let's print out to see what value we get","width":277.18181824684143},{"text":"okay and I want to print out the result of my read call","width":844.1818182468414},{"text":"hey and look it's true, we do get zero, fantastic okay go away","width":333.18181824684143},{"text":"right so that's one way right? now that's obviously if we're doing the low level calls like read and write","width":515.1818182468414},{"text":"if your working at the C library level","width":349.18181824684143},{"text":"you can check for an end of file EOF condition on that pointer","width":744.1818182468414},{"text":"so remember how we do fdopen to get yourself a C library pointer","width":261.18181824684143},{"text":"well then there's a thing called fopen","width":256.18181824684143},{"text":"right so that's relatively easy then to discover that something is closed","width":306.18181824684143},{"text":"another way of doing it of course is that you come up with a special token or special character to say hey if I send them asterisks or a zero bytes, then I know that that signifies to me that there's no more bytes coming","width":745.1818182468414},{"text":"another way is to say at the beginning of your message, hey I'm going to send exactly 4000 bytes and here they come","width":402.18181824684143},{"text":"another way is to know exactly how many bytes you are going to send beforehand anyway and hard code it into your program","width":437.18181824684143},{"text":"so that's all we're going to say about pipes today","width":313.18181824684143},{"text":"let's mess up our program, let's try and read from a file descriptor that doesn't exist","width":363.18181824684143},{"text":"okay so let's say from one hundred and twenty three","width":167.18181824684143},{"text":"okay I don't need this right, so what's going to happen now?","width":680.1818182468414},{"text":"alright we get a result of negative one","width":171.18181824684143},{"text":"the read failed, I cannot read from file descriptor 123","width":259.18181824684143},{"text":"well you and I know that's because there's nothing connected to that integer","width":240.18181824684143},{"text":"it's an invalid file descriptor","width":156.18181824684143},{"text":"but we want to actually know more than that, we want to know something about what went wrong","width":409.18181824684143},{"text":"and for that there's actually this global constant called, whoops come back thank you, errno","width":750.1818182468414},{"text":"right error number, so error number will have been set","width":265.18181824684143},{"text":"so let's find out what value it was ","width":230.18181824684143},{"text":"okay so we'll stick this in here and we'll print it out","width":316.18181824684143}],
  // Part 1
  [{"text":"actually we can do more than just print out an error number","width":328.18181824684143},{"text":"there's a function that allows us to go from that error number to a useful string","width":422.18181824684143},{"text":"so we've got strerror and we can pass in a number","width":293.18181824684143},{"text":"like twelve well I don't want just twelve, I actually want the number that the system has set for us, so let's print that out as well and see what we get","width":807.1818182468414},{"text":"okay right here we go so yeah our read returned -1 to say hey I've failed","width":465.18181824684143},{"text":"we've got an error number that's now set to a non zero value","width":211.18181824684143},{"text":"and we've got bad file descriptor, which now makes sense to us","width":206.18181824684143},{"text":"yeah we've passed in an invalid file descriptor number","width":324.18181824684143},{"text":"so before we've played around with things like printerror","width":302.18181824684143},{"text":"and it will print out something like","width":426.18181824684143},{"text":"It is a Friday let us go okay","width":674.1818182468414},{"text":"and perror takes the text we've got followed by okay here we go","width":586.1818182468414},{"text":"It's a friday let's go with a colon and guess what, the same message: bad file descriptor","width":320.18181824684143},{"text":"which is if you were a user a completely useless message","width":329.18181824684143},{"text":"bad file descriptor? sounds like the beginning of a bad movie","width":327.18181824684143},{"text":"no it's worse, so okay put this into your log file but don't display it to the user of course","width":423.18181824684143},{"text":"but now you can see how perror might actually be implemented in terms of this strerror function","width":612.1818182468414},{"text":"okay so that's our error number, it's set when a system call fails","width":483.18181824684143},{"text":"so if we go back to our little handout here","width":321.18181824684143},{"text":"so what is errno? it's just an int","width":409.18181824684143},{"text":"and when is it set?","width":129.18181824684143},{"text":"well when a system call fails","width":735.1818182468414},{"text":"you can find out what went wrong","width":720.1818182468414},{"text":"so nine is not a particularly... yes","width":420.18181824684143},{"text":"[question]","width":742.1818182468414},{"text":"a new line? you mean because printerror adds a new line as well?","width":435.18181824684143},{"text":"is that your question?","width":125.18181824684143},{"text":"okay right so we don't need to deal with these numbers like nine, we don't need to remember that nine means bad file descriptor","width":597.1818182468414},{"text":"because guess what? on the man page of read","width":247.18181824684143},{"text":"[something] we discover the return value","width":283.18181824684143},{"text":"we got a list of errors, here they all are","width":625.1818182468414},{"text":"so lots of things can go wrong and if we wanted to write a robust program","width":362.18181824684143},{"text":"we might actually choose to handle some of these","width":289.18181824684143},{"text":"you might say okay in the generic sense, just crash the program or write to the log file","width":273.18181824684143},{"text":"but there might be others where you might decide to say print a message to the user","width":253.18181824684143},{"text":"and that's how we can do it, we can check errorno to see exactly why the system call failed","width":581.1818182468414},{"text":"and then we can just compare it to these constants","width":326.18181824684143},{"text":"so in our code here, we could say if errorno equals bad file descriptor EBADF, your file descriptor, your program is a mess!","width":1514.1818182468414},{"text":"okay so we are going to handle this particular problem","width":1089.1818182468414},{"text":"what are we going to do about multiple threads?","width":151.18181824684143},{"text":"let's say I've got threads making system calls, they are calling mutex lock, they are calling sem wait, they are calling read, they are calling write","width":652.1818182468414},{"text":"if they fail, don't we have a problem?","width":437.18181824684143},{"text":"how would you know which one actually failed?","width":163.18181824684143},{"text":"suppose you're trying to read error just as another thread also fails","width":500.18181824684143},{"text":"houston we have a problem","width":125.18181824684143},{"text":"we don't know which thread set errorno","width":780.1818182468414},{"text":"muahahah yes, okay, errorno is not just an int","width":479.18181824684143},{"text":"each thread gets its own errorno integer","width":1100.1818182468414},{"text":"how does that happen you ask? easy magic","width":493.18181824684143},{"text":"actually it uses something called thread local storage but never mind about that","width":240.18181824684143},{"text":"so that means if you want to know what happened inside your thread, easy, write errno","width":324.18181824684143},{"text":"if you want to know what error happened inside another thread, you can't","width":330.18181824684143},{"text":"you'd have to write the mechanics to share that information","width":239.18181824684143},{"text":"right, so it's actually local to each thread which is particularly clever","width":396.18181824684143},{"text":"yes, you can which brings us to the next question thank you very much for playing, right","width":288.18181824684143},{"text":"when is errno set to zero?","width":209.18181824684143},{"text":"when your process starts and that's it","width":397.18181824684143},{"text":"so here's a gotcha, that if we did something like if errorno is equal to something like we have the EBADF","width":1290.1818182468414},{"text":"then we just assume that that happened because of the previous call we just made","width":260.18181824684143},{"text":"that may not be true, perhaps this happened, perhaps errno was set many many many microseconds earlier in our program","width":690.1818182468414},{"text":"so errno is never reset back to zero","width":228.18181824684143},{"text":"if you want to set it back to zero, do it yourself","width":252.18181824684143},{"text":"and in fact that's quite a good kind of programming practice","width":150.18181824684143},{"text":"that if you intend to check its value","width":241.18181824684143},{"text":"then remember to set it to zero beforehand","width":2171.1818182468414}],
  // Part 2
  [{"text":"right so there's one other thing to be aware of with errorno is","width":507.18181824684143},{"text":"remember signal handlers?","width":133.18181824684143},{"text":"where we could write some code to cope with a signal like hey hey we've got a closed pipe condition","width":822.1818182468414},{"text":"so in your signal handler","width":626.1818182468414},{"text":"if we're going to be calling things which might set error number","width":327.18181824684143},{"text":"say we want to remove a file","width":241.18181824684143},{"text":"or we want to make a system call that we're allowed to call","width":188.18181824684143},{"text":"from a signal handler","width":127.18181824684143},{"text":"then it would be really really impolite to change error number for the other part of the code","width":647.1818182468414},{"text":"remember how does a signal handler work? we steal the current thread of execution","width":330.18181824684143},{"text":"we don't make a new thread. we just actually say to the CPU hey stop executing the current piece of code","width":366.18181824684143},{"text":"I want you to run this other little piece of code over here please","width":200.18181824684143},{"text":"and when you finish yeah you go back to what you were doing","width":169.18181824684143},{"text":"I'm not going to give you a new stack, I'm not going to... right we literally just steal it to run it","width":450.18181824684143},{"text":"so that means our signal handler might do bad things to error number","width":207.18181824684143},{"text":"so a good handler, a polite signal handler will remember the old value","width":554.1818182468414},{"text":"and just before returning","width":290.18181824684143},{"text":"we set it","width":689.1818182468414},{"text":"so it might go, if you want to write robust code...","width":298.18181824684143},{"text":"be careful with your signal handlers","width":287.18181824684143},{"text":"and two, if you're going to check the value of errno, it's probably a good idea to reset it to zero beforehand","width":436.18181824684143},{"text":"so that you know that if you're discovering an error, that it actually came from the code that you were looking at","width":623.1818182468414},{"text":"I've got a cute example here","width":1504.1818182468414},{"text":"the other thing to be careful about is in your error handlings","width":270.18181824684143},{"text":"be careful that you're not looking at errorno values from your actual error handling","width":214.18181824684143},{"text":"so for example here it is where we're trying to discover why does semwait fail","width":361.18181824684143},{"text":"and so we printed out the problem with this code is that the very first fprintf itself may set errno","width":608.1818182468414},{"text":"and that could then lead us down a rabbit hole right? we could say okay","width":383.18181824684143},{"text":"why am I getting a bad file descriptor? well it turns out standard error was closed or something like that","width":312.18181824684143},{"text":"we had out of memory and it was actually coming out of the fprintf call","width":288.18181824684143},{"text":"so it's better to if you're going to make more system calls, more function calls, grab it and stick it inside your own variable so you know that the value you're looking at actually arose from the original call","width":1595.1818182468414},{"text":"okay right so do you remember how do we print out a particular string message?","width":459.18181824684143},{"text":"yeah, easy, just call strerror and that gives you back a pointer to a string","width":606.1818182468414},{"text":"so typically you'd pass in errno here","width":245.18181824684143},{"text":"and you'd get the string","width":123.18181824684143},{"text":"that string might mean something to you and another system programmer but not much to anybody else","width":467.18181824684143},{"text":"I've got some bad news for you though","width":671.1818182468414},{"text":"it's not thread safe","width":378.18181824684143},{"text":"brought to you by homer simpson, yes that's correct your code in trying to handle errors might run into difficulties because in calling strerror in calling two different threads at the same time can contend with each other","width":851.1818182468414},{"text":"and overwrite each other's value","width":266.18181824684143},{"text":"so we've got two ways to fix this","width":303.18181824684143},{"text":"one is that you call mutex lock","width":409.18181824684143},{"text":"and unlock between getting back the pointer and using it","width":1351.1818182468414},{"text":"so you would get the pointer perhaps copy it into your own memory that is being used solely by your own thread","width":502.18181824684143},{"text":"and if you do this everywhere","width":188.18181824684143},{"text":"in your code that's going to call strerror then you can be confident that only one thread at a time will be calling strerror","width":486.18181824684143},{"text":"you've made it into a critical section","width":98.18181824684143},{"text":"just remember to do that everywhere inside your code","width":187.18181824684143},{"text":"including all of the library calls that wait you control? you don't control. you don't have the source code of all the library functions that might call strerror","width":562.1818182468414},{"text":"so this is actually pretty hard to do well and consistently","width":338.18181824684143},{"text":"but I have seen people do it","width":121.18181824684143},{"text":"the other way is that actually there is an alternative called strerror with an underscore r strerror_r which is thread saf","width":535.1818182468414},{"text":"and the reason why it's thread safe is because you pass in a pointer to some memory that you would like to use","width":413.18181824684143},{"text":"okay","width":1021.1818182468414},{"text":"so the next thing we're going to talk about is this EINTR","width":231.18181824684143},{"text":"hey this is the hey I got interrupted, do you want to retry?","width":687.1818182468414},{"text":"so there's quite a lot to say about this interrupt idea and we're not going to talk about all of it inside 241","width":657.1818182468414},{"text":"suppose you make a system call that's going to go on for a long time","width":197.18181824684143},{"text":"for example, you want to write some bytes down to a pipe that's going to connect to the internet","width":371.18181824684143},{"text":"you want to call semwait which is going to wait until someone calls sempost","width":665.1818182468414},{"text":"these calls can sometimes be interrupted and immediately returned","width":528.1818182468414},{"text":"so basically, they fail","width":196.18181824684143},{"text":"they fail to actually do what you ask them to do","width":203.18181824684143},{"text":"now in the simple kind of lecture code and in the MPs we just say hey don't bother about this, it's fine","width":386.18181824684143},{"text":"but in robust code, we actually have to check for this","width":231.18181824684143},{"text":"when you are writing robust code, you have to say ok what was the return value of this system call, did you really do what I asked you","width":369.18181824684143},{"text":"it's a bit like talking to a toddler, did you really flush?","width":333.18181824684143},{"text":"[gibberish] I'm pretty sure","width":207.18181824684143},{"text":"so that's what we have to do, we actually have to say oh look, it returned negative one to say it didn't work","width":369.18181824684143},{"text":"and now we have to say but why","width":150.18181824684143},{"text":"was it something bad like I gave it a bad file descriptor?","width":263.18181824684143},{"text":"or was is it just being annoying","width":164.18181824684143},{"text":"and if it's being annoying I say hey I've been interrupted, I'm sorry do you want to play again? just call it again","width":444.18181824684143}],
  // Part 3
  [{"text":"now we're only going to see this for slow running potentially blocking calls","width":613.1818182468414},{"text":"so things like semwait reading and writing to the network","width":372.18181824684143},{"text":"but it's important to handle this stuff well, otherwise","width":258.18181824684143},{"text":"your code will get to what we tested but in real situations it will then fail","width":388.18181824684143},{"text":"and imagine playing kind of russian roulette with your code","width":228.18181824684143},{"text":"I tell you what, just for fun we'll make sure one of the calls you make today is not going to work","width":307.18181824684143},{"text":"do you still feel lucky punk?","width":171.18181824684143},{"text":"so that's the purpose of this EINTR, it's to say oh look these thing were interrupted, we better call them again","width":578.1818182468414},{"text":"so let's see what the kind of code would look like in this case","width":270.18181824684143},{"text":"we'll make a call like semwait","width":603.1818182468414},{"text":"and we need to check to see if it failed","width":263.18181824684143},{"text":"okay how do I do that?","width":422.18181824684143},{"text":"you could say was its return value equal to negative one?","width":513.1818182468414},{"text":"right so if that's true, we know there was an error","width":483.18181824684143},{"text":"so let's find out if the error was hey I've got interrupted","width":1102.1818182468414},{"text":"if that's true, hey we'll go again","width":127.18181824684143},{"text":"right so here's our plan","width":358.18181824684143},{"text":"while this is true...","width":353.18181824684143},{"text":"go again!","width":73.18181824684143},{"text":"alright so perhaps you and your neighbor can tell me what's wrong with that code","width":256.18181824684143},{"text":"[silence]","width":1259.1818182468414},{"text":"so I'll give you a clue, what's an equals sign between friends?","width":913.1818182468414},{"text":"the worse thing about this error is that you get to see this kind of pattern right?","width":304.18181824684143},{"text":"you see this kind of code and you immediately say oh that's just calling sem_wait inside a while loop","width":272.18181824684143},{"text":"it's trying to be robust code, and you don't bother of course to actually read it","width":252.18181824684143},{"text":"so what are we doing here? well errno is settable, it behaves just like an integer and so we're just setting it","width":624.1818182468414},{"text":"so what's the result of this expression?","width":159.18181824684143},{"text":"a non-zero value so therefore it's true","width":261.18181824684143},{"text":"so what our code does then is say rather than check to see if it's equal to EINTR we just set the value to EINTR","width":683.1818182468414},{"text":"and so we go around again","width":93.18181824684143},{"text":"right so what effect would this have on the code?","width":348.18181824684143},{"text":"would you spot this error?","width":173.18181824684143},{"text":"when would it do bad things for you?","width":525.1818182468414},{"text":"thank you yes, if sem_wait failed for other reasons","width":265.18181824684143},{"text":"so for example, suppose you forgot to initialize the semaphore or you're running this on a system that doesn't support semaphores","width":522.1818182468414},{"text":"sem_wait might return a different message","width":379.18181824684143},{"text":"so what do you do? you call it again!","width":177.18181824684143},{"text":"it behaves exactly like a semaphore, it doesn't proceed, it just keeps on going around this loop forever","width":498.18181824684143},{"text":"and then you say ahhhhh why is this not working? right so be careful about that, watch out for your equal vs that","width":537.1818182468414},{"text":"so that is kind of a typical pattern","width":169.18181824684143},{"text":"sometimes you see a little bit more to this as well","width":201.18181824684143},{"text":"sometimes you see that actually we want to know say the number of bytes read","width":264.18181824684143},{"text":"so we might write something like this","width":170.18181824684143},{"text":"while negative one equals okay let's store the value of our return call so let's say we want to know the result of calling read","width":807.1818182468414},{"text":"blah blah blah blah blah alright","width":244.18181824684143},{"text":"and errno equals EINTR","width":948.1818182468414},{"text":"so now I'm assigning the value of read to my result so I can use that later inside the code","width":598.1818182468414},{"text":"perhaps I want to know for example if this is zero","width":185.18181824684143},{"text":"or the number of bytes that read managed to perform","width":303.18181824684143},{"text":"so if you were to drill down into the C library you would discover this kind of implementation","width":370.18181824684143},{"text":"that every time we make a system call, we potentially have to check to see whether it was interrupted or not","width":448.18181824684143},{"text":"for CS241 exams, unless I specifically ask you to write code that does this checking, I'm not going to expect anybody to have to write this full length out","width":614.1818182468414},{"text":"but put this in the back of your mind for the day that you're actually writing real system code outside a class","width":622.1818182468414},{"text":"questions? yes?","width":456.18181824684143},{"text":"aha, right","width":212.18181824684143},{"text":"so this normally happens when a signal comes in and your process has to process the signal","width":408.18181824684143},{"text":"but that could be anything, that could be a child finishing for example","width":477.18181824684143},{"text":"you might have noticed in some of the earlier programs we wrote that if you had a sleep and a SIGCHILD happened, the sleep itself could be interrupted","width":823.1818182468414},{"text":"so why is this? the short answer is that it makes operating system programming easier","width":579.1818182468414},{"text":"remember how I said that when we have to process a signal interrupt, we steal the CPU and we actually run some code for a moment","width":643.1818182468414},{"text":"and then we give the CPU back as if nothing happened","width":161.18181824684143},{"text":"well as you can see, it's not quite true","width":162.18181824684143},{"text":"actually as part of giving the CPU back, we just give up","width":304.18181824684143},{"text":"we say hey you know that system call I was trying to do, ha, I just gave up","width":351.18181824684143},{"text":"it's a nice day, I don't have a problem with that. do you?","width":398.18181824684143},{"text":"it's kind of like the californian hello, hello yes let's do lunch and not really","width":503.18181824684143},{"text":"so in making the design of the operating system easier, we've actually put the onus on systems programmers on our user code","width":584.1818182468414},{"text":"to actually deal with handling these interrupts, with failing system calls","width":893.1818182468414},{"text":"so fantastic, you actually now know a lot about how to actually write much more robust code by checking errno ","width":393.18181824684143},{"text":"by knowing that you have to potentially check this EINTR thing","width":288.18181824684143},{"text":"there's a bit more to say I'll let you read it on the wiki book as you usual","width":345.18181824684143},{"text":"but I'm not going to be writing this code all the time in future examples","width":574.1818182468414},{"text":"are you ready? page 2!","width":293.18181824684143}],
  // Part 4
  [{"text":"great, we get to talk about networking","width":429.18181824684143},{"text":"so here's another cool bit of CS241","width":260.18181824684143},{"text":"we're going to write code to make servers","width":151.18181824684143},{"text":"we're going to make code to make Yik Yak type stuff","width":249.18181824684143},{"text":"where we can send text and other data between different machines","width":448.18181824684143},{"text":"you could start with your virtual machine right now and with a friend on their virtual machine you could start setting up servers and clients and start transmitting information","width":581.1818182468414},{"text":"and this stuff is kind of near and dear to UIUC","width":200.18181824684143},{"text":"we were involved in some of the earliest network designs","width":171.18181824684143},{"text":"we are still today designing the network protocols deal with the internet 2 and the internet of things","width":422.18181824684143},{"text":"but we're going to go right back, all the way back to talk about a very important protocol which is called ip4","width":489.18181824684143},{"text":"so ip4 or ipv4 is a way to send data from one machine to another","width":547.1818182468414},{"text":"and for that every machine will have a number, an address","width":407.18181824684143},{"text":"so if we're going to send these little packets of information from me to you or from my machine to your machine","width":393.18181824684143},{"text":"I have to know, what your address is","width":168.18181824684143},{"text":"and this is what ip version 4 is about","width":555.1818182468414},{"text":"so this is not a full exposition of the whole description of ip4, just that every machine here or every connected device","width":1191.1818182468414},{"text":"can have ","width":268.18181824684143},{"text":"an ip4 address","width":457.18181824684143},{"text":"okay sounds pretty good to me, that was the plan that was the vision","width":301.18181824684143},{"text":"so when we are sending some bytes down a wire","width":263.18181824684143},{"text":"what we'll do is we'll say here's a sender, here's my ip address and here's the ip address of where it needs to get to","width":600.1818182468414},{"text":"and so these ip addresses we'l make them huge","width":290.18181824684143},{"text":"we'll say two hundred and fifty six, we'll have 256^4","width":303.18181824684143},{"text":"in other words four bytes or if you want to be precise, four octets","width":683.1818182468414},{"text":"so octets is a fancy word for byte in other words eight bits, in other words, we've got thirty two bits to play with","width":549.1818182468414},{"text":"in other words, ","width":273.18181824684143},{"text":"four billion possible addresses","width":253.18181824684143},{"text":"I need a red pen, anybody got a red pen?","width":337.18181824684143},{"text":"throw me a red pen","width":154.18181824684143},{"text":"ah alright great, this is a great plan when it was designed","width":855.1818182468414},{"text":"we can't do every device anymore","width":183.18181824684143},{"text":"why?","width":166.18181824684143},{"text":"sorry! the pen that wouldn't fly","width":393.18181824684143},{"text":"thank you, yes, we've run out of address space","width":415.18181824684143},{"text":"but this is the dominant way, today 95% of the internet traffic is still ip version 4","width":368.18181824684143},{"text":"so we have some tricks, we can hide a whole load of machines behind just a few ip addresses for example","width":508.18181824684143},{"text":"we can have multiple websites hosted on the same machine","width":287.18181824684143},{"text":"and so they all share the same ip address","width":172.18181824684143},{"text":"but we've got a problem, this initial specification of saying every device just had a ipv4 address is no longer sufficient","width":565.1818182468414},{"text":"so we'll be going over to ip6 slowly","width":220.18181824684143},{"text":"the protocol is already out but today ip version 6 accounts for less than 5% of the internet traffic","width":414.18181824684143},{"text":"we'll talk more about the actual details of ip version 4 after spring break","width":298.18181824684143},{"text":"so let's instead talk about a very special place, anybody going home for spring break?","width":471.18181824684143},{"text":"yes! great this is where you're going","width":243.18181824684143},{"text":"okay, so 127.0.0.1 is a very special place in our hearts","width":322.18181824684143},{"text":"it is the ip address of your local host","width":242.18181824684143},{"text":"your home machine, so if you try and send a packet here, it doesn't have very far to go","width":382.18181824684143},{"text":"next time you find a script kiddie on the internet, tell them to hack this ip address","width":410.18181824684143},{"text":"right so it's very very common, every system programmer knows this address","width":367.18181824684143},{"text":"if you set up a server for example and you want to test it","width":281.18181824684143},{"text":"you might to try and open this address in your web browser to say okay connect to the server on this very machine","width":489.18181824684143},{"text":"alright so rooting this address is this trivial, it doesn't even need to go to the network port","width":495.18181824684143},{"text":"the kernel will notice that hey I'm trying to talk to myself and not bother to actually craft any electrical pulses on the wire, it doesn't actually leave your machine","width":706.1818182468414},{"text":"and you can use this on a virtual machine or a real machine etc etc etc","width":216.18181824684143},{"text":"so this is your local host","width":456.18181824684143},{"text":"you can even buy door mats that say there is no place like 127.0.0.1","width":1027.1818182468414},{"text":"okay so that's your first ip address, fantastic!","width":519.1818182468414},{"text":"most people don't remember many ip addresses but they know that one and they might know an ip address for the dns server but more about that after break","width":504.18181824684143},{"text":"instead let's talk about a port","width":310.18181824684143},{"text":"so we're going to send some electrical pulses, some bits, down the wire and hopefully it will arrive at the other end","width":456.18181824684143},{"text":"at the machine of our choice","width":129.18181824684143},{"text":"so once it gets there we have to say well what are we going to do with these bits","width":228.18181824684143},{"text":"who are they for?","width":205.18181824684143},{"text":"so the idea is to think of a port, like a C port where things arrive","width":446.18181824684143},{"text":"we won't give them character names though","width":237.18181824684143},{"text":"we'll just give them numbers","width":109.18181824684143},{"text":"so on the outside of our packet, we'll say hey this data is going to go to machine whatever","width":481.18181824684143},{"text":"one hundred and twenty three point one blah blah blah","width":246.18181824684143},{"text":"and I want to go to a particular port","width":120.18181824684143},{"text":"so our packets then have thirty two bits or four octets","width":374.18181824684143},{"text":"hey look, here's an octet octet octet so in other words we can choose numbers","width":593.1818182468414},{"text":"between zero and two hundred and fifty five","width":183.18181824684143},{"text":"I just made this ip address up","width":223.18181824684143},{"text":"so this is our ip address","width":319.18181824684143},{"text":"four times eight bits or four octets","width":224.18181824684143},{"text":"but we also need a port number","width":235.18181824684143},{"text":"and port numbers use sixteen bits","width":478.18181824684143},{"text":"why? it seemed like enough at the time","width":192.18181824684143},{"text":"and eight bits didn't seem to be enough","width":213.18181824684143},{"text":"these are fairly arbitrary decisions back in the nineteen seventies and earlier","width":313.18181824684143},{"text":"to say well we know that we think that this internet thing is going to get big","width":469.18181824684143},{"text":"and if we have this many bits, then hopefully we can have different processes listening to different port numbers","width":684.1818182468414},{"text":"and that's the basic idea","width":239.18181824684143}],
  // Part 5
  [{"text":"so perhaps you know a few standard ports like","width":457.18181824684143},{"text":"port 80, what's port 80 used for?","width":196.18181824684143},{"text":"yes, the web!","width":111.18181824684143},{"text":"if you make an HTTP connection","width":275.18181824684143},{"text":"to get a webpage, there's a process listening on port 80","width":232.18181824684143},{"text":"so today you could write a process that listens on port 80 and sends arbitrary bytes back to people and you've got a basic web server","width":739.1818182468414},{"text":"what about port 443?","width":263.18181824684143},{"text":"this is secure HTTPs","width":176.18181824684143},{"text":"so secure HTTP","width":432.18181824684143},{"text":"does it have to have https content? no, it's just a convention","width":544.1818182468414},{"text":"and your client then, your web client, if you connect to say the BBC","width":451.18181824684143},{"text":"if you put this into your web browser","width":662.1818182468414},{"text":"it's going to turn this into an IP4 address","width":225.18181824684143},{"text":"this is the simplified version for friday okay?","width":151.18181824684143},{"text":"and also it's going to say look I'll try and connect on port 80","width":297.18181824684143},{"text":"and I'll connect to port 80 and I'll say something like hey give me the home page","width":324.18181824684143},{"text":"and hopefully the process at the other end will send back some bytes","width":270.18181824684143},{"text":"okay do we know any others?","width":240.18181824684143},{"text":"22, what's 22? yes ssh","width":613.1818182468414},{"text":"so your ssh client knows by default to connect to port 22","width":238.18181824684143},{"text":"it doesn't have to connect to port 22 by the way, you can tell it to connect to a different port","width":601.1818182468414},{"text":"now if you write a program and try to try to listen to these ports, you'll fail","width":736.1818182468414},{"text":"here's why","width":250.18181824684143},{"text":"port numbers up to 1023 are known as well known ports","width":1559.1818182468414},{"text":"and only root can connect to them","width":953.1818182468414},{"text":"or sorry, only root can listen to them, only root can serve on these ports","width":1323.1818182468414},{"text":"the thinking here was hey we've got some trust issues, if people are going to connect to my box, then we don't want any old user process being able to serve content from these ports","width":708.1818182468414},{"text":"we'll restrict it to people who have, to all the processes that have root access, that are admins ","width":808.1818182468414},{"text":"questions?","width":669.1818182468414},{"text":"so the last thing we'll talk about today is two different ways to talk to a server","width":496.18181824684143},{"text":"this is not a complete set","width":125.18181824684143},{"text":"there are other ways to send bytes to a server","width":241.18181824684143},{"text":"there are different protocols","width":116.18181824684143},{"text":"but these two are good ways to get started because they are very common and they have different characteristics","width":851.1818182468414},{"text":"here's the first version","width":159.18181824684143},{"text":"UDP","width":82.18181824684143},{"text":"UDP is packet based","width":296.18181824684143},{"text":"meaning, can I borrow this? thank you, that I can write where my packet wants to go so I write down your IP address","width":760.1818182468414},{"text":"and then I send it out in the wire","width":145.18181824684143},{"text":"and who knows? maybe we'll get there","width":218.18181824684143},{"text":"it did!","width":159.18181824684143},{"text":"in fact today, if you were to do a test between two different data centers between two different continents, 97% of UDP packets would get there","width":1230.1818182468414},{"text":"so it's packed based, and if you like, it's kind of fire and forget","width":712.1818182468414},{"text":"you don't get any tracking number with these things","width":146.18181824684143},{"text":"you simply say here's my bytes, I want to send them to this IP address, away you go, good luck out there, hope you make it, if you don't, too bad","width":847.1818182468414},{"text":"and like I said, typically 97% will make it","width":368.18181824684143},{"text":"the other 3% who knows? they just died half way, they gave up, they found a cafe","width":475.18181824684143},{"text":"so there's no guarantee, there is no real reliability guarantee that UDP packets will get there","width":444.18181824684143},{"text":"however, it's pretty fast","width":101.18181824684143},{"text":"because there's no accountability","width":115.18181824684143},{"text":"it's just hey let's get it through as many routes as possible to get to its destination","width":382.18181824684143},{"text":"there is no ordering guarantee either","width":202.18181824684143},{"text":"so if you send two packets one after the other, they may arrive in different orders","width":1256.1818182468414},{"text":"here's the other thing that can happen","width":266.18181824684143},{"text":"there could be duplicates","width":510.18181824684143},{"text":"right, so you send one packet the other end gets 0 gets 2 gets 4 of them","width":424.18181824684143},{"text":"so this is the wild west of sending data","width":243.18181824684143},{"text":"what do you get for all of these issues? answer: speed","width":274.18181824684143},{"text":"you're not trying to track anything, you're not making any constraints on the network, you just say hey get as many of these things to the other end as possible","width":625.1818182468414},{"text":"so when might that be useful? yes?","width":259.18181824684143},{"text":"video games? for what kind of traffic? why?","width":323.18181824684143},{"text":"okay so if you want to stream some data out where you don't care about the old data","width":309.18181824684143},{"text":"and you just want to, say, update the current position of all the players or perhaps send some audio where if you drop a few frames, it doesn't matter","width":784.1818182468414},{"text":"then UDP is a pretty good choice","width":498.18181824684143},{"text":"but you do have to work harder under these kind of constraints","width":256.18181824684143},{"text":"your code that you write has to say I might not get the data, I may not get the data in the right order, I might skip some data","width":490.18181824684143},{"text":"yeah so it's often used in where let's say audio or games","width":901.1818182468414},{"text":"where old information or data is unimportant","width":636.1818182468414}],
  // Part 6
  [{"text":"alright so the other one TCP","width":1047.1818182468414},{"text":"we'll talk about what TCP stands for after break","width":173.18181824684143},{"text":"TCP is the opposite","width":203.18181824684143},{"text":"TCP is like a pipe","width":993.1818182468414},{"text":"unlike the pipes that we saw before however, you already have one file descriptor","width":2042.1818182468414},{"text":"TCP allows us to say okay here's all the bytes that are going to make my home page","width":394.18181824684143},{"text":"off you go","width":73.18181824684143},{"text":"here are all the bytes in my file","width":183.18181824684143},{"text":"push it down that pipe","width":216.18181824684143},{"text":"and out the other end, at the other machine that we've connected to, those bytes will come out in order","width":447.18181824684143},{"text":"without duplicates","width":186.18181824684143},{"text":"without missing bits","width":363.18181824684143},{"text":"so some magic must have happened between our two endpoints","width":288.18181824684143},{"text":"the packets that were sent maybe some got missing, maybe got duplicated, but we are unaware of that complexity","width":499.18181824684143},{"text":"with TCP, it becomes just a pipe","width":285.18181824684143},{"text":"and if the network between our two endpoints improves","width":349.18181824684143},{"text":"TCP will speed up the rate at which packets are sent","width":187.18181824684143},{"text":"if it degrades, it can automatically reduce the speed","width":384.18181824684143},{"text":"so TCP gives us a way to hide a lot of the actual network complexity of how those packets get from one machine to another","width":726.1818182468414},{"text":"and we'll talk about those guarantees after spring break","width":206.18181824684143},{"text":"have a wonderful but safe spring break, I hope you have a lot of fun playing with the new virtual machine","width":349.18181824684143},{"text":"the TAs will be in touch with you when it comes to grading MPs","width":222.18181824684143},{"text":"thank you very much! come down and see me if you have any questions","width":379.18181824684143}],

  // Start Lecture Video 22
  // Part 0
  [{"text":"okay","width":1066.1818182468414},{"text":"good morning and welcome back from spring break","width":219.18181824684143},{"text":"you might recognize that music as part of the Star Wars music, we'll find out why in a little bit","width":478.18181824684143},{"text":"well what we're going to do today, of course, is talk about networking","width":158.18181824684143},{"text":"here we are towards the end of the semester and the major topics we're going to look at is networking","width":490.18181824684143},{"text":"that is, how we can connect one computer to the rest of the internet","width":180.18181824684143},{"text":"and also how can we deal with scheduling and files and a few of the, kind of, loose ends towards the end of the semester","width":460.18181824684143},{"text":"so this is it, right?","width":58.18181824684143},{"text":"this is the part of the systems programming that allows us to watch Star Wars on a computer from another machine, or anything else who you'll find on Youtube, which of course, was invented here by a student","width":849.1818182468414},{"text":"and we'll see how you might've even seen Star Wars prior to Youtube","width":511.18181824684143},{"text":"so let's, kind of, take a look at that, right","width":203.18181824684143},{"text":"so let's get started","width":179.18181824684143},{"text":"first of all, kind of a little bit of sure case for, perhaps you're interested in networking, we're not going to all networking, or course in 241","width":699.1818182468414},{"text":"but, there are courses here that take it a lot further","width":213.18181824684143},{"text":"so this is really just some highlights of first of all, if you wanted to know about networking and you wanted to able to talk like you know what you sound lick","width":573.1818182468414},{"text":"you're very to quick to start talking about the OSI model","width":320.18181824684143},{"text":"and this is really just a set of abstraction layers, so when you talk about vulnerabilities, or you want to design a protocol, you're actually going to be doing it inside one of these levels","width":718.1818182468414},{"text":"so let's have a look at some of these","width":243.18181824684143},{"text":"okay","width":109.18181824684143},{"text":"so, for example, our friends over at the ECE building","width":276.18181824684143},{"text":"they worry about the physical level, like what voltages do I want and how am I going to represent my 1's and 0's etc.","width":545.1818182468414},{"text":"241, we're going to be playing mostly with in this level in terms of looking at packets and different mechanisms of transport","width":713.1818182468414},{"text":"in particular, we're going to be playing with TCP and UDP","width":372.18181824684143},{"text":"that's not the whole story though because of course, we don't want to simply send a packet of arbitrary data","width":352.18181824684143},{"text":"we like to make applications","width":248.18181824684143},{"text":"applications themselves have protocol","width":259.18181824684143},{"text":"so, if TCP and UDP are methods, are well-defined ways to communicate at lower level, at the higher level, you're going to find things like HTTP","width":724.1818182468414},{"text":"when do you see HTTP?","width":172.18181824684143},{"text":"websites! yes sir, if you wanted to talk to a web server, you need to know how to talk HTTP, and there's a document about that","width":491.18181824684143},{"text":"about how what it means to talk HTTP, what bytes you should send, what responses you should get","width":375.18181824684143},{"text":"if you want to send mail, there's a prototype called SMTP","width":418.18181824684143},{"text":"alright, so how about all of these different kind of levels of protocol","width":326.18181824684143},{"text":"inside CS 241","width":285.18181824684143},{"text":"what are we going to see?","width":87.18181824684143},{"text":"well, we're going to see, like I said TCP, UDP","width":176.18181824684143},{"text":"most of the internet today, as you know, uses IPv4, or often shortened to just IP4, or even sometimes IP","width":550.1818182468414},{"text":"and this is an addressing protocol that allows me to talk to machines, but we only use 32 bits","width":494.18181824684143},{"text":"to describe the endpoints, the starting point and the endpoint","width":271.18181824684143},{"text":"so we're limited because we have more devices than that","width":279.18181824684143},{"text":"so don't panic, we came up with a new protocol called IPv6","width":209.18181824684143},{"text":"which now has 128 bit addressing","width":238.18181824684143},{"text":"except even though it was designed many years ago, it still represents less than 5% of today's traffic and it still has problems that you'll find routers, which are misconfigured throughout the internet and IPv6 is not yet as reliable as it should be","width":954.1818182468414},{"text":"right","width":53.18181824684143},{"text":"but there are, okay","width":150.18181824684143},{"text":"so that's the kind of as far as we go in terms of these lower level protocols","width":425.18181824684143},{"text":"i'll show you what the actual bytes look like for IPv4 and IPv6 in another lecture","width":450.18181824684143},{"text":"but for now, we're just going to say, hey this stuff exists, and this is the way I can send data from one machine to another machine","width":523.1818182468414},{"text":"so let's have a look at this TCP and UDP","width":272.18181824684143},{"text":"alright, first of all, we better understand what they stand for","width":424.18181824684143},{"text":"so UDP is \"user datagram protocol\"","width":1081.1818182468414},{"text":"so, by the way, the word datagram comes from data and telegram","width":323.18181824684143},{"text":"it's like this, I want to send this telegram to you and I'm not quite sure when it's going to arrive and in fact, if I send two telegrams to you, maybe they'll arrive out of order","width":534.1818182468414},{"text":"maybe we'll get lost along the way, the carrier pigeon will be eaten by a hawk","width":408.18181824684143},{"text":"who knows, right?","width":93.18181824684143},{"text":"we don't know whether the information I send will truly get to the endpoint","width":395.18181824684143},{"text":"maybe a scribe will actually send you two of these things","width":213.18181824684143},{"text":"so, we talk about datagrams when we have this unreliable delivery mechanism","width":451.18181824684143},{"text":"so that's its main characteristic, it's unreliable","width":209.18181824684143},{"text":"and that pen doesn't work too well, so let's a different one","width":141.18181824684143},{"text":"unreliable","width":591.1818182468414},{"text":"so we can get our datagrams out of order","width":643.1818182468414},{"text":"if your general says, \"hey! retreat!\", and another telegrams says, \"hey! advance!\"","width":298.18181824684143},{"text":"without actually putting your own timestamp information inside that, you don't know which one is sent first","width":632.1818182468414},{"text":"so UDP gives you no guarantees about when things are going to arrive, the order of things going to arrive, and whether you have missing data, or even duplicate data","width":1283.1818182468414},{"text":"so, essentially it's making no guarantees about the lower levels of the internet","width":473.18181824684143},{"text":"it's saying, if there's any problems, if someone decides to disconnect the cable, or the router between you and me is misbehaving, you're open to those problems","width":583.1818182468414},{"text":"you have to deal with it","width":203.18181824684143},{"text":"but","width":287.18181824684143},{"text":"it's fast","width":216.18181824684143},{"text":"there's no handshaking","width":393.18181824684143},{"text":"as soon as I send a packet, and arrives at your end, you see it","width":510.18181824684143},{"text":"okay, so one of the main characteristics is it's unreliable, what does that mean?","width":201.18181824684143},{"text":"we may see dups","width":152.18181824684143},{"text":"we may see missing datagrams","width":634.1818182468414},{"text":"it may be out of order","width":187.18181824684143},{"text":"so there's no guarantee about sequencing","width":393.18181824684143},{"text":"essentially, it's saying, \"yeah, I've got a post office and I've got telegram service, but I make not guarantees about how good it is\". it might change from second to second","width":528.1818182468414},{"text":"\"it might change from second to second\"","width":64.18181824684143}],
  // Part 1
  [{"text":"alright, so why would anybody use UDP's?","width":227.18181824684143},{"text":"and the answer is: most of the time, we don't","width":134.18181824684143},{"text":"because it doesn't give us many guarantees","width":232.18181824684143},{"text":"however","width":300.18181824684143},{"text":"if we were writing an application where we prefer to handle these missing packets, so all of these unreliabilities stuff","width":367.18181824684143},{"text":"over late packets, over late information arriving, then maybe UDP will be a good choice","width":901.1818182468414},{"text":"alright, so let's flip to the other protocol, that is quite common, and that is","width":400.18181824684143},{"text":"TCP","width":273.18181824684143},{"text":"or","width":420.18181824684143},{"text":"transmission control protocol","width":635.1818182468414},{"text":"so if UDP was giving direct access to those telegram service","width":288.18181824684143},{"text":"TCP inserts some control now between you and actually what happens, actually what goes out on the wire","width":547.1818182468414},{"text":"actually, it will abstractly","width":369.18181824684143},{"text":"no, it will hide all of the problems we might see when packets are actually sent from one machine to another machine","width":579.1818182468414},{"text":"so what are we talking about?","width":111.18181824684143},{"text":"well, you're going to see the following great things","width":119.18181824684143},{"text":"first of all, it tries to add some reliability","width":577.1818182468414},{"text":"I feel like I'm a used car salesman at this point","width":125.18181824684143},{"text":"\"Hey! Don't worry about your car! If it breaks down, we'll send you a new one. No questions asked.\"","width":509.18181824684143},{"text":"if your packets get lost in transit, don't worry, I will handle it for you","width":230.18181824684143},{"text":"I guarantee that your data will get from A to B","width":324.18181824684143},{"text":"and in the right order!","width":242.18181824684143},{"text":"just give me the data you want to send, and you'll be fine","width":296.18181824684143},{"text":"and in fact, I'll give you some error collection as well","width":303.18181824684143},{"text":"so, we might write this as error detection, or guaranteed that your message is error-free","width":621.1818182468414},{"text":"which is whiter than any other cereal, no what?","width":235.18181824684143},{"text":"okay actually","width":111.18181824684143},{"text":"error-free is a bit of a marketing hype, actually the checksum is only 16 bits","width":366.18181824684143},{"text":"so actually, you got one in the 2^16 chance of this error detection not discovering some random bit flips","width":698.1818182468414},{"text":"so that's a little bit of a hyperbole","width":143.18181824684143},{"text":"but, it does do error detection","width":136.18181824684143},{"text":"okay, what else we got?","width":61.18181824684143},{"text":"flow control","width":325.18181824684143},{"text":"and similar to that, congestion control","width":557.1818182468414},{"text":"so","width":120.18181824684143},{"text":"our protocols are, at an abstract level","width":177.18181824684143},{"text":"and we don't know whether we're trying to send data over a fiber optic link","width":310.18181824684143},{"text":"or","width":176.18181824684143},{"text":"piece of telephone wire","width":175.18181824684143},{"text":"or even just some old barbed wire that we happened to have that stretches from my farm to your farm","width":441.18181824684143},{"text":"TCP can cope with all of these","width":205.18181824684143},{"text":"of course, the number of bits we can send per second in these two examples are very, very different","width":511.18181824684143},{"text":"so we want a mechanism to ramp up the speed at which we try to send bytes","width":432.18181824684143},{"text":"and we need mechanisms that can cope with partial failures","width":291.18181824684143},{"text":"so, suddenly, our route from China to here changes drastically and we can no longer send as many bytes as we'd like per second","width":569.1818182468414},{"text":"TCP will notice that and actually to reduce the number of bytes it sends per second, so we can optimize the use of available bandwidth in real time","width":892.1818182468414},{"text":"and finally congestion control","width":104.18181824684143},{"text":"hey, we don't share these links, so we actually want to be careful that we don't step on each other's toes and so, we attempt to make sure we play fair with other users of the link","width":748.1818182468414},{"text":"how do we do these things?","width":374.18181824684143},{"text":"magic!","width":180.18181824684143},{"text":"no","width":116.18181824684143},{"text":"we, of course, TCP actually includes additional information, in addition to the bytes that you want to send, includes additional information inside each packet as to how many bytes should be sent","width":793.1818182468414},{"text":"and the status of each end","width":130.18181824684143},{"text":"we might talk a little about it inside CS 241, but if you want to know more, take a networking class at the 400 level","width":600.1818182468414},{"text":"one of the most amazing things about TCP is that it, it has to work even with adversarial people, or attacks on the internet","width":693.1818182468414},{"text":"that will try to steal those bytes, copy those bytes, masquerade as you, and TCP is evolved of the time to try to cope with some of those threats","width":637.1818182468414},{"text":"and we might talk a little bit about that","width":186.18181824684143},{"text":"right then, so let's answer some of these questions","width":153.18181824684143},{"text":"okay, which one of these you think uses handshaking?","width":306.18181824684143},{"text":"yes! TCP!","width":172.18181824684143},{"text":"before TCP, can send any of your bytes","width":445.18181824684143},{"text":"it actually has to set up ","width":151.18181824684143},{"text":"it has to send a packet from one direction to the other direction","width":277.18181824684143},{"text":"so there's a latency, there's a startup cost","width":275.18181824684143},{"text":"to creating a TCP connection","width":304.18181824684143},{"text":"which one do you think requires more system resources?","width":211.18181824684143},{"text":"TCP, yes!","width":87.18181824684143},{"text":"so, TCP behaves a bit like a pipe","width":692.1818182468414},{"text":"except that we can use the same file descriptor for receiving and sending","width":523.1818182468414},{"text":"so remember how we're seeing read and write, and you've seen in terms of being able to talk to stdin, stdout","width":381.18181824684143},{"text":"you've seen it in terms of being able to read or write from a particular file, you've seen it in terms being able to read and write from an unnamed pipe","width":421.18181824684143},{"text":"guess what, we can use these with TCP as well!","width":366.18181824684143},{"text":"so once you've set up a connection with TCP, sending stuff is easy!","width":449.18181824684143},{"text":"and I'm going to put it in quotes","width":201.18181824684143},{"text":"easy for system programmers like yourself","width":151.18181824684143},{"text":"there's a few gotchas and we'll talk about some of those today and in future lectures","width":218.18181824684143},{"text":"okay, which one of these do you think encrypts your data?","width":373.18181824684143},{"text":"make your guess now","width":516.1818182468414},{"text":"neither","width":188.18181824684143},{"text":"the bytes you send on the internet using these are completely visible to anybody else that is sniffing on the wire","width":648.1818182468414},{"text":"so, do you trust every telegraph operator between you and your mom?","width":468.18181824684143},{"text":"because they could be copying the bits that you are sending","width":202.18181824684143},{"text":"\"Hi mom, having a great time. Send more money. Thanks\"","width":282.18181824684143},{"text":"being able to see those characters","width":153.18181824684143},{"text":"so of course, there is an art to making sure that those characters don't mean anything","width":427.18181824684143},{"text":"that's we can encrypt them in some way","width":99.18181824684143},{"text":"but that is not part of these lower level protocols","width":216.18181824684143}],
  // Part 2
  [{"text":"so a long, long time ago, we didn't care about ","width":361.18181824684143},{"text":"sending things in just clear text on the internet","width":251.18181824684143},{"text":"because there were no bad guys","width":189.18181824684143},{"text":"no one was listening to those bytes that we were sending","width":294.18181824684143},{"text":"and in fact, there used to be a service, a telnet service, where you could log on to a remote machine, type in your password and you'd have a remote terminal","width":743.1818182468414},{"text":"these days, of course, we use SSH on port 23","width":190.18181824684143},{"text":"but it didn't always be like that","width":116.18181824684143},{"text":"there used to be a service on port 22, which was completely unencrypted","width":366.18181824684143},{"text":"good luck today finding an unencrypted port 22","width":363.18181824684143},{"text":"a terminal service on port 22","width":187.18181824684143},{"text":"well, guess what?","width":66.18181824684143},{"text":"i've found one","width":61.18181824684143},{"text":"let me show it to you","width":107.18181824684143},{"text":"of course we're talking about an application here, a virtual terminal, where we can connect to a remote machine","width":384.18181824684143},{"text":"and start sending it some bytes","width":150.18181824684143},{"text":"so","width":316.18181824684143},{"text":"here it is","width":48.18181824684143},{"text":"right","width":23.18181824684143},{"text":"let me","width":322.18181824684143},{"text":"okay, right","width":719.1818182468414},{"text":"[gibberish]","width":1103.1818182468414},{"text":"okay, so there happens to be a server on this particular address","width":228.18181824684143},{"text":"let's connect to it","width":2192.1818182468414},{"text":"yes, you couldn't actually log into this particular server, but it will play Star Wars movie four in ascii","width":611.1818182468414},{"text":"and so it slowly sends bytes to you, and your terminal interprets those bytes as characters, and displays them on the screen","width":399.18181824684143},{"text":"and the servers careful not to sent too many bytes too fast","width":331.18181824684143},{"text":"right, so do you think this particular server, this terminal connection is run with UDP or TCP?","width":383.18181824684143},{"text":"TCP! because normally where we want to connect to telenet, we want to make sure that","width":448.18181824684143},{"text":"[gibberish]","width":148.18181824684143},{"text":"the screen size is a little messed up, but you kind of see the idea","width":1106.1818182468414},{"text":"this is what happens to good protocols","width":214.18181824684143},{"text":"they end up serving Star Wars movies","width":265.18181824684143},{"text":"fortunately, a UIUC student came up with Youtube, and we no longer have to watch this kind of stuff, right?","width":939.1818182468414},{"text":"okay this is way too much fun","width":98.18181824684143},{"text":"so","width":252.18181824684143},{"text":"it's easy to find, just type in \"telnet\" and \"Star Wars\", and you too can watch Star Wars","width":524.1818182468414},{"text":"and enough of that","width":426.18181824684143},{"text":"so these days of course, we have this major use of the internet, which is web traffic","width":411.18181824684143},{"text":"so when you want to talk to a web server","width":179.18181824684143},{"text":"you need to understand this high level protocol","width":263.18181824684143},{"text":"from the seventh layer","width":100.18181824684143},{"text":"HTTP, hypertext transfer transport protocol","width":433.18181824684143},{"text":"this of course runs over TCP","width":199.18181824684143},{"text":"and HTTP is actually an offspring of an FTP protocol","width":663.1818182468414},{"text":"and it's pretty old now, version 1.1 is about 15 years old","width":475.18181824684143},{"text":"and it was a ","width":230.18181824684143},{"text":"text protocol","width":200.18181824684143},{"text":"just recently, we now have http version 2 of this protocol","width":549.1818182468414},{"text":"which is now a binary","width":126.18181824684143},{"text":"so if you go to a model server and you say \"hey, i'd like to talk to you using version 2 please\", then you'd need to be able to speak it in binary","width":1110.1818182468414},{"text":"but the original protocol was text","width":141.18181824684143},{"text":"and so we can just play with that today, we can actually connect to a web server and get it to send us a page","width":515.1818182468414},{"text":"get it to send us some information","width":205.18181824684143},{"text":"and that brings us to page 2","width":1719.1818182468414},{"text":"alright, so let's do a little demo first","width":286.18181824684143},{"text":"we'll try this","width":610.1818182468414},{"text":"right, so let's try connecting to a machine","width":458.18181824684143},{"text":"i love the music","width":46.18181824684143},{"text":"right, here we go","width":61.18181824684143},{"text":"we'll do illinois.edu and I'm going to connect port 80, which is where web servers listen on","width":689.1818182468414},{"text":"great, we've connected","width":87.18181824684143},{"text":"right, so we've connected this machine","width":177.18181824684143},{"text":"and now, I can send something, so I'm going to type in get / HTTP/1.0 and we'll hit return twice","width":990.1818182468414},{"text":"okay, great! look at that, it actually understood what I said, and it sent back a whole load of stuff","width":443.18181824684143},{"text":"it said, oh look! this machine, this web server is serving using apache version 2.2.15","width":521.1818182468414},{"text":"so if I was a hacker, I'd immediately type in \"apache 2.2.15 vulnerabilities\"","width":439.18181824684143},{"text":"and tell us which version of SSL and OpenSSL","width":249.18181824684143},{"text":"great, I'll use those as a hack as well to discover if they've got any vulnerabilities","width":267.18181824684143},{"text":"it tells me when this page was last modified, so if I have to have a cache of this page on my local machine, I know that if my version is more recent than Friday","width":729.1818182468414},{"text":"that date, then 2012? my goodness","width":176.18181824684143},{"text":"then I can use my own version, right?","width":163.18181824684143},{"text":"and finally it tells me a little bit about what's there, so basically there's nothing there and it's in this particular memtype, this text/html","width":647.1818182468414},{"text":"so my web browser can use that to understand this content, and we know that we expect seventy-three bytes of content","width":642.1818182468414},{"text":"let me try a different machine","width":220.18181824684143},{"text":"let's try","width":491.18181824684143}],
  // Part 3
  [{"text":"so we'll get that and HTTP/1.0","width":497.18181824684143},{"text":"okay, right!","width":107.18181824684143},{"text":"and I get a big chunk of text, including stuff that says","width":230.18181824684143},{"text":"\"Hey, maybe you want to use Javascript as well\"","width":189.18181824684143},{"text":"alright, so I'm getting a little bit of text, of a script on that page","width":363.18181824684143},{"text":"and finally","width":207.18181824684143},{"text":"we see these tags down here, </body>, </html>","width":227.18181824684143},{"text":"is that part of the HTTP protocol? No!","width":165.18181824684143},{"text":"what is it?","width":107.18181824684143},{"text":"it's HTML!","width":83.18181824684143},{"text":"HTML is independent of our network protocol","width":254.18181824684143},{"text":"HTML is just a way to describe a webpage","width":328.18181824684143},{"text":"and of course you can save that on a file","width":253.18181824684143},{"text":"you can save it on a USB stick","width":143.18181824684143},{"text":"HTML is completely independent of HTTP, so HTTP is about talking to web servers","width":323.18181824684143},{"text":"HTML is about how to mark up web pages","width":209.18181824684143},{"text":"they are two different protocols","width":214.18181824684143},{"text":"so we've shown that I can use this little tele-command to talk to webservers and this number 80 here is a port number","width":765.1818182468414},{"text":"if you want to run things on port 80, you can't","width":243.18181824684143},{"text":"unless, you run it as root","width":257.18181824684143},{"text":"so, the lower port numbers","width":134.18181824684143},{"text":"port numbers 0, 1, up to 1023, require you to be an administrator on the machine","width":486.18181824684143},{"text":"which is great because you will have a virtual machine now, that you can root into","width":254.18181824684143},{"text":"you can do sudo, or you can log in as root, and you can then set up a web server on that machine on port 80 ","width":490.18181824684143},{"text":"let's see what we're going to do today","width":86.18181824684143},{"text":"we're going to write some code that basically does this from C","width":292.18181824684143},{"text":"so we're going to connect to another machine","width":168.18181824684143},{"text":"so this is kind of what was enough for you to write half of Yik-Yak, if you'd like","width":311.18181824684143},{"text":"at least the client end","width":188.18181824684143},{"text":"here's some code I wrote earlier","width":317.18181824684143},{"text":"perfect timing","width":323.18181824684143},{"text":"and this is the beginnings then, of what network coding looks like","width":517.1818182468414},{"text":"now","width":147.18181824684143},{"text":"what we're actually going to create is something called a socket","width":213.18181824684143},{"text":"so a socket is","width":113.18181824684143},{"text":"a system object ","width":133.18181824684143},{"text":"not a C++ object, of course","width":86.18181824684143},{"text":"but just an object that represents the connection endpoint","width":338.18181824684143},{"text":"that we can send bytes into and get bytes back from","width":228.18181824684143},{"text":"so it's like a, think of it like a socket you can plug into","width":342.18181824684143},{"text":"it's going to be a way for us to communicate with remote servers and also weigh a socket's","width":437.18181824684143},{"text":"you can set options on a socket","width":113.18181824684143},{"text":"we're not going to do anything fancy today","width":260.18181824684143},{"text":"but how to identify sockets?","width":78.18181824684143},{"text":"easy","width":33.18181824684143},{"text":"just with","width":371.18181824684143},{"text":"a file descriptor","width":94.18181824684143},{"text":"so this will just be a small number","width":169.18181824684143},{"text":"and once we've done all this magic, we can just call read and write on this socket descriptor, and use it just like an open file","width":947.1818182468414},{"text":"so let's what we've got here","width":137.18181824684143},{"text":"i'm going discuss this amazing beast","width":243.18181824684143},{"text":"this didn't used to be inside CS 241","width":189.18181824684143},{"text":"or any networking class, this is relatively a new addition: get address info, and it makes writing network code much, much easier","width":405.18181824684143},{"text":"it does so much for us, it sets a whole lot of C structures for us","width":263.18181824684143},{"text":"and it can be used in a variety of ways, we're going to look at one way today, which is to go from","width":415.18181824684143},{"text":"a host name that we understand","width":132.18181824684143},{"text":"a fully qualified name here, like \"www.illinois.edu\"","width":182.18181824684143},{"text":"and turn that into an IP address","width":217.18181824684143},{"text":"a binary number","width":495.18181824684143},{"text":"so to use it","width":152.18181824684143},{"text":"we actually have to create a little struct","width":237.18181824684143},{"text":"notice the struct name is the same as the function","width":293.18181824684143},{"text":"getaddrinfo","width":90.18181824684143},{"text":"but in fact, there's going to be two structs","width":123.18181824684143},{"text":"we set one up as a kind of \"hints\" structure, to say this is the kind of stuff that I'd like to know about","width":401.18181824684143},{"text":"and we get back a pointer to a different struct","width":273.18181824684143},{"text":"of the same type","width":100.18181824684143},{"text":"so that's why I have","width":107.18181824684143},{"text":"one called \"hints\" and one called \"Okay, yeah. I'm also going to need a pointer to one\"","width":218.18181824684143},{"text":"so I'm not going to set up result, that was going to be set up for me","width":201.18181824684143},{"text":"and if you look down here, you'll see that we pass in not the pointer, but a pointer to that pointer","width":353.18181824684143},{"text":"because this function is going to mess with that pointer","width":166.18181824684143},{"text":"it's going to set that pointer to the completed information","width":478.18181824684143},{"text":"right","width":57.18181824684143},{"text":"so, what do we care about today? ","width":102.18181824684143},{"text":"well, I would like to have information for connecting with an IP","width":534.1818182468414},{"text":"version 4, so I want to make a connection","width":127.18181824684143},{"text":"yeah, yeah, just like 95% of the rest of the internet traffic using using version 4","width":399.18181824684143},{"text":"and I want to use TCP","width":167.18181824684143},{"text":"and as we know, TCP is a stream, it's like a pipe","width":327.18181824684143},{"text":"and these constants are kind of hard to remember, don't panic in an exam","width":250.18181824684143},{"text":"I give you a crib sheet","width":90.18181824684143},{"text":"but also, just as a hint, notice that they always come in this variety where the AF corresponds to a hint for you about what things should this be connected with?","width":835.1818182468414},{"text":"so sock, for example, the kind of socket type is a prefix as to what this constant should be","width":577.1818182468414},{"text":"now these constants are just integers","width":210.18181824684143},{"text":"they're just there to make our code look more readable as opposed to hard-coding constants","width":326.18181824684143},{"text":"unfortunately, it can mean then that you can accidentally put the wrong constant into the wrong field, and the compiler won't complain","width":456.18181824684143},{"text":"your code simply won't work","width":215.18181824684143},{"text":"now, writing network code is hard","width":293.18181824684143},{"text":"because","width":168.18181824684143},{"text":"it's like going to McDonald's, where everybody inside working there hates you","width":309.18181824684143},{"text":"unless you specify everything exactly correctly","width":314.18181824684143},{"text":"nothing comes out the window at the ned","width":209.18181824684143},{"text":"like doing a drive-thru and trying to do it with an English accent","width":188.18181824684143},{"text":"I have a really hard time at McDonald's","width":353.18181824684143},{"text":"\"You want fries with that?\", and I'll say something, it doesn't really matter what I say, and I never get fries","width":442.18181824684143},{"text":"so when new is desperately working trying to figure how to say ","width":206.18181824684143},{"text":"another fun thing with an English accent is the phone things, you know","width":353.18181824684143},{"text":"like say \"one\" to \"one\"","width":155.18181824684143},{"text":"I never get anywhere","width":174.18181824684143},{"text":"so this is the fun of networking code is that you've got to specify things exactly and you've got to be on your tip-toes to make sure you haven't accidentally put the wrong constant in the wrong field because no one will tell you've made a mistake","width":968.1818182468414},{"text":"right, that's the first gotcha","width":97.18181824684143},{"text":"is give the right constants for the right fields","width":925.1818182468414},{"text":"the next gotcha","width":190.18181824684143},{"text":"at least for this code, is","width":168.18181824684143},{"text":"for the unused fields, we better set them to 0","width":278.18181824684143},{"text":"and that's the purpose of this memset","width":130.18181824684143},{"text":"there's a whole load of things in this struct that I don't want to set","width":244.18181824684143},{"text":"and if I don't do this memset","width":283.18181824684143},{"text":"and this is just on the stack","width":101.18181824684143},{"text":"then as you know, the stack memory is arbitrary","width":201.18181824684143},{"text":"so","width":93.18181824684143},{"text":"make sure that you've set unused fields to 0","width":279.18181824684143}],
  // Part 4
  [{"text":"so this getaddrinfo() is ","width":1358.1818182468414},{"text":"sort of a powerhouse of a call","width":163.18181824684143},{"text":"it does an awful lot of work behind the scenes","width":133.18181824684143},{"text":"including making a network connection, say \"hey! hey, anybody! anybody know who this is? www.illinois.edu? anybody got an ip address to this?\"","width":822.1818182468414},{"text":"so what am i talking about? i'm talking about","width":271.18181824684143},{"text":"dns, and we'll talk more about dns a different time","width":213.18181824684143},{"text":"well that itself, but that call itself could be making network requests to say \"hey i need the ip address that's connected to this name\"","width":559.1818182468414},{"text":"so the whole lot of stuff that happens behind the scenes just to discover the ip address","width":434.18181824684143},{"text":"right, so what does the ip address go into? it goes into one of these structs","width":504.18181824684143},{"text":"and where does the ip address actually appear?","width":223.18181824684143},{"text":"it actually appears inside here, this little [gibberish] here, this address, and this other thing called addrlen is set","width":553.1818182468414},{"text":"so why can address be different lengths?","width":193.18181824684143},{"text":"well, socket is an abstract idea, and it might have different kinds of sockets","width":350.18181824684143},{"text":"we might have an ip4 type socket, or we might have an ip6 kind of socket, or we might have an apple talk socket","width":447.18181824684143},{"text":"so these c structures are actually designed to be potentially different lengths, so when we call connect, we actually have to say \"and this is actually the size of my data structure\"","width":1232.1818182468414},{"text":"right, so","width":138.18181824684143},{"text":"so what have we got? we've got getaddrinfo() to fill out that socket information for me","width":293.18181824684143},{"text":"if we didn't have this, we'd be writing lots more code, and it's really ugly, it's got lots of casts in it","width":350.18181824684143},{"text":"the beautiful thing about this is we set up a hints thing, we say do we want ip4 or ip6, or we don't care, and we say say the socket stream, or we want UDP, and then we create a socket and we can connect to it","width":927.1818182468414},{"text":"and we're done! we're ready for action! right","width":250.18181824684143},{"text":"let's write some code then","width":257.18181824684143},{"text":"so connect will do the handshaking, so now we're going to actually use this thing ","width":481.18181824684143},{"text":"right, so i need to send it something, okay","width":339.18181824684143},{"text":"right, so what i'm going to send?","width":140.18181824684143},{"text":"here can be my request","width":250.18181824684143},{"text":"it'll say \"GET\" homepage","width":323.18181824684143},{"text":"make that larger, here we go","width":103.18181824684143},{"text":"right","width":39.18181824684143},{"text":"get the home page, i'm going to speak http/1.0 to you, and i need to send it these newline characters to say that's the end of my request \"/r/n\", if i wrote it twice","width":997.1818182468414},{"text":"okay, we could ","width":183.18181824684143},{"text":"for debugging let's just print this out","width":455.18181824684143},{"text":"okay","width":104.18181824684143},{"text":"and i'm going to write the minimum code that will kind of work, this is not robust quality code by any means","width":415.18181824684143},{"text":"that we'd used a real web server, or any other client","width":242.18181824684143},{"text":"but it's good enough for lecture demo today","width":122.18181824684143},{"text":"right, so","width":46.18181824684143},{"text":"how do we use write()?","width":49.18181824684143},{"text":"well, remember that you need to give it a file descriptor","width":166.18181824684143},{"text":"okay, that's what i got from the socket","width":359.18181824684143},{"text":"you need to give it a pointer to some bytes that we want to send","width":195.18181824684143},{"text":"okay, that was my request","width":210.18181824684143},{"text":"and i need the number of bytes, yes","width":558.1818182468414},{"text":"if","width":80.18181824684143},{"text":"right, even number of bytes","width":199.18181824684143},{"text":"so, could i say request?","width":610.1818182468414},{"text":"how many, what is the size of request?","width":254.18181824684143},{"text":"that's 4 bytes or 8 bytes?","width":214.18181824684143},{"text":"because it's a pointer, it's not - we didn't specify it as an array","width":195.18181824684143},{"text":"remember arrays, kind of like pointers, but they're not pointers","width":224.18181824684143},{"text":"if you ask for the size of a pointer, you get a size of a pointer, which is 4 bytes on a 32-bit machine, 8 bytes on a 64","width":425.18181824684143},{"text":"we didn't want that","width":77.18181824684143},{"text":"we could've either made request a different type, we could've made it a character array, or we could just calculate it during runtime","width":435.18181824684143},{"text":"so let's do it during runtime","width":55.18181824684143},{"text":"so strlen(), give me the number of characters inside request","width":432.18181824684143},{"text":"i do not need to send the 0 byte","width":208.18181824684143},{"text":"the protocol is not about c-strings, it's the end of the line, the end of the request is to find in terms of these double newline characters, right","width":648.1818182468414},{"text":"so we send that ","width":130.18181824684143},{"text":"i could get the return value to see how many bytes were sent, but nah, it's a lecture","width":286.18181824684143},{"text":"right, so","width":144.18181824684143},{"text":"let's get back to response, okay, we need some space for that, so as this is just a quick demo, we'll just have some space on the stack here","width":648.1818182468414},{"text":"it gives to my response","width":347.18181824684143},{"text":"and ","width":302.18181824684143},{"text":"let's read from that socket","width":208.18181824684143},{"text":"right, sock_fd","width":103.18181824684143},{"text":"i need to give it a pointer to some space, some memory","width":213.18181824684143},{"text":"how many bytes do i want to read up to? we'll say 999","width":236.18181824684143},{"text":"why 999? well, because if length is, get at least one thing","width":579.1818182468414},{"text":"we will print it out as a c-string, so i'm going to terminate it","width":611.1818182468414},{"text":"and finally, we'll print it out","width":653.1818182468414},{"text":"okay","width":207.18181824684143},{"text":"questions at this point?","width":366.18181824684143},{"text":"aha, it's easy! right?","width":220.18181824684143},{"text":"the file descriptor wasn't set once i called connect()","width":363.18181824684143},{"text":"i've connected!","width":93.18181824684143},{"text":"i am network man!","width":71.18181824684143},{"text":"anyway, so we've now got the power of the internet at our fingertips","width":374.18181824684143},{"text":"well at least","width":98.18181824684143},{"text":"all of the internet we can connect to using TCP","width":257.18181824684143},{"text":"right, so let me","width":283.18181824684143},{"text":"[gibberish] okay, we'll do illinois to begin with","width":128.18181824684143},{"text":"right, so","width":94.18181824684143},{"text":"we'll run this ","width":312.18181824684143},{"text":"what'll i call the code?","width":128.18181824684143},{"text":"[gibberish]","width":163.18181824684143},{"text":"alright, awesome","width":180.18181824684143},{"text":"[gibberish]","width":255.18181824684143},{"text":"ah! great, happy days","width":90.18181824684143},{"text":"right, so let's run awesome","width":236.18181824684143},{"text":"hey! look at that!","width":148.18181824684143},{"text":"we wrote some c code, we connected to another machine!","width":205.18181824684143},{"text":"this is what it's all about, this is what makes 241 so powerful, right?","width":214.18181824684143},{"text":"now we can actually talk to any  machine, and now i can run my machine, i can run this a hundred thousand times, and run a ddos attack on the internet","width":733.1818182468414},{"text":"don't do that","width":193.18181824684143},{"text":"because every server, of course, can log the ip address","width":399.18181824684143},{"text":"and log the content of what's being sent to it","width":121.18181824684143}],
  // Part 5
  [{"text":"now I actually have done attacks","width":425.18181824684143},{"text":"the difference was, was I had a nice, big legal agreement","width":233.18181824684143},{"text":"not from the janitor of the company","width":178.18181824684143},{"text":"well, from a C level executive","width":180.18181824684143},{"text":"i.e a CEO, a CTO, that kind of thing","width":169.18181824684143},{"text":"and I did this as part of a company, so I had liability protection, etc, etc, etc","width":294.18181824684143},{"text":"and I kind of knew what I was doing","width":139.18181824684143},{"text":"right","width":140.18181824684143},{"text":"so with great power comes great responsibility, and unfortunately, now, you are now treated as people that are no longer normal","width":721.1818182468414},{"text":"the justice systems hates you","width":201.18181824684143},{"text":"and they would love to see you put away for many, many years","width":304.18181824684143},{"text":"even for simple hacking, as defined by the newspapers","width":295.18181824684143},{"text":"right","width":79.18181824684143},{"text":"guess what? there's a log somewhere that says \"your peer address was used for x, okay that's good enough me!\"","width":318.18181824684143},{"text":"\"send him to jail and he can work a dollar, or she can work for a dollar a year\"","width":299.18181824684143},{"text":"splitting rocks, whatever","width":212.18181824684143},{"text":"probably not the ending to your university career that you're hoping for","width":337.18181824684143},{"text":"also yes, the server has logs, but there's routers in between that have logs as well, so it's relatively easy to discover where packets are coming from","width":765.1818182468414},{"text":"so if you must hack a system, here's a system i suggest you hack","width":610.1818182468414},{"text":"get in there and delete as many files as you want","width":213.18181824684143},{"text":"that of course is the ip address for your own machine, right? the packets never leave the machine, the kernel actually recognizes that as an ip address and we'll not even send that to the network hardware","width":951.1818182468414},{"text":"alright, so let's have a quick look at this response","width":251.18181824684143},{"text":"we saw that this http request includes the number 200 and little strings that says \"hey! okay!\"","width":444.18181824684143},{"text":"how do you think we can generate a different number?","width":464.18181824684143},{"text":"you probably know one of these number already","width":282.18181824684143},{"text":"with a four","width":183.18181824684143},{"text":"right? 404, not found? that is part of the http protocol","width":228.18181824684143},{"text":"let's change our address","width":220.18181824684143},{"text":"oh, sorry, let's change this so we request a resource that doesn't exist","width":580.1818182468414},{"text":"we'll go","width":89.18181824684143},{"text":"aprilfoolsjokes.html","width":299.18181824684143},{"text":"see if there's anything about that, right?","width":162.18181824684143},{"text":"okay","width":163.18181824684143},{"text":"alright, so we'll","width":152.18181824684143},{"text":"let's compile this","width":194.18181824684143},{"text":"okay","width":69.18181824684143},{"text":"let's run our awesome client","width":243.18181824684143},{"text":"okay, what do we get this time? we got a different number, 404","width":196.18181824684143},{"text":"so this is how your browser knows that this particular page does not exist, and it would render some blank content","width":443.18181824684143},{"text":"you could put some other stuff in there as well","width":216.18181824684143},{"text":"there are other definitions to say \"hey, this page has moved. please redirect to this other url, etc.\"","width":428.18181824684143},{"text":"so the http protocol species all of that","width":340.18181824684143},{"text":"right, let's take a break for a moment, and talk about the course","width":367.18181824684143},{"text":"couple of comments","width":91.18181824684143},{"text":"i hear that quite a few of your classes have given you, like lots of homework to finish and even exams this week, so","width":915.1818182468414},{"text":"no exam this week","width":438.18181824684143},{"text":"mondays in future weeks","width":229.18181824684143},{"text":"not too good","width":86.18181824684143},{"text":"yes, please expect, unless otherwise stated, that the in-lecture exams will be on mondays","width":518.1818182468414},{"text":"for cs 241, okay","width":152.18181824684143},{"text":"i will try to get out practice questions before that","width":462.18181824684143},{"text":"what else do i want to say?","width":130.18181824684143},{"text":"oh, yes, oh yes, right","width":356.18181824684143},{"text":"so the last thing i want to talk about today is some alternative ways to program","width":463.18181824684143},{"text":"first of all, yeah, you've probably now know about, kind of, vi and vim","width":513.1818182468414},{"text":"vi has a historical background to say, \"suppose you have a really slow connection\"","width":388.18181824684143},{"text":"the beautiful thing about vi is that it tries to actually work even if you've got a pretty slow connection, and it has some cute tricks in it as well, so i think i've shown you this one, where we can say, change our current lines, so we can substitute, and if you know regular expressions, you can write regular expressions in here","width":1477.1818182468414},{"text":"so, for example, we can change \"include\" to \"exclude\" ","width":333.18181824684143},{"text":"right, that's a kind of simple one, right?","width":104.18181824684143},{"text":"i'm just changing it to \"exclude\"","width":85.18181824684143},{"text":"let's undo that","width":112.18181824684143},{"text":"we can change a whole load of things, so for example, let's on all lines, substitute 'if' for 'while', and the 'g' just means, if there's one matchy thing on a line, then substitute it, so now i've got","width":1308.1818182468414},{"text":"bad code, right?","width":111.18181824684143},{"text":"let's quit this without saving","width":128.18181824684143},{"text":"but i want to mention that that's not the only way to write code","width":265.18181824684143},{"text":"another way is to use the \"cat\" command","width":147.18181824684143},{"text":"so you've seen \"cat\" in terms of reading from a file, right?","width":295.18181824684143},{"text":"well, \"cat\", if you don't specify anything, we'll just echo back what you've typed","width":405.18181824684143}],
  // Part 6
  [{"text":"right, so now we can do cat>hello.c","width":343.18181824684143},{"text":"so now we're going to pipe the output of cat into a file \"hello.c\"","width":353.18181824684143},{"text":"so this all you need to program right? so now do #include <stdio.h>","width":434.18181824684143},{"text":"int main() { printf(\"hello\\n\"); return 0; }","width":723.1818182468414},{"text":"right, how do i finish? i have to tell my terminal that i don't have any more input, so i'm actually going to close now stdin","width":504.18181824684143},{"text":"how do i do that? by doing ctrl+d","width":150.18181824684143},{"text":"here we go","width":41.18181824684143},{"text":"and now i can compile my program hopefully, and if that gives me return value 0, then i also want to run it","width":519.1818182468414},{"text":"so there we go","width":158.18181824684143},{"text":"right","width":146.18181824684143},{"text":"so if you ever find yourself without any editor, don't worry, just use cat","width":463.18181824684143},{"text":"okay, right","width":43.18181824684143},{"text":"questions?","width":390.18181824684143},{"text":"no questions","width":252.18181824684143},{"text":"still no questions, okay","width":280.18181824684143},{"text":"right, have i shown you that the includes actually exist","width":267.18181824684143},{"text":"oh, here's a useful command, \"which\"","width":166.18181824684143},{"text":"right","width":45.18181824684143},{"text":"so \"which\" is, you'll probably use it next time you have java installed","width":210.18181824684143},{"text":"you say, \"okay, where's that?\"","width":83.18181824684143},{"text":"alright?","width":38.18181824684143},{"text":"or \"where is my gcc installed?\"","width":167.18181824684143},{"text":"and so \"which\" looks along the path to discover where these commands actually are, so how's it do that? well it looks inside every directory including inside $PATH","width":773.1818182468414},{"text":"so next you install something","width":237.18181824684143},{"text":"you might want to edit this $PATH variable and you'll notice that the directories simply have a \":\" here on a linux machine","width":507.18181824684143},{"text":"simply have a \":\" between them","width":223.18181824684143},{"text":"and where can you edit that? well on a linux and mac, you can edit your ","width":523.1818182468414},{"text":"okay","width":48.18181824684143},{"text":"let's go to my home directory, which is like this little","width":231.18181824684143},{"text":"[gibberish]","width":48.18181824684143},{"text":"you can edit your bash","width":181.18181824684143},{"text":"oh, come on","width":311.18181824684143},{"text":"oh, that's why","width":187.18181824684143},{"text":"bash_profile, and you can","width":250.18181824684143},{"text":"define things and add additional things to your path, right?","width":599.1818182468414},{"text":"great! so, the next lecture, we'll start talking about TCP servers and UDP client-servers and i will get the interview questions out for thursday by the end of this evening! Have a great week, good luck with the MPs","width":854.1818182468414},{"text":"thank you very much! have a great week, good luck with the mp's","width":255.18181824684143}],

  // Start Lecture Video 23
  // Part 0
  [{"text":"alright good morning class how are you","width":367},{"text":" alright let's try again, good morning class how are you","width":159},{"text":"ok great so here's what we are gonna do for the last lecture we look to making a TCP client  ","width":326},{"text":"we made a socket and we ask the socket to connect to a remote server","width":246},{"text":"we connected it to Illinois.edu and we connected it to BBC.com, this time","width":293},{"text":"this lecture what we are gonna now is to go to the other end of the equation and we are gonna make a TCP server, and I'm gonna walk you through the steps and some of the gotchas for that","width":717},{"text":"so we'll talk about some of the nitty bitty of the code","width":263},{"text":"and although we'll put it all together and ask you about the server","width":246},{"text":"ok sounds like a plan, ok let's get started","width":160},{"text":"before we do that, let's see how much you remember from last lecture","width":298},{"text":"alright so what do we need to do to set up a client TCP socket","width":374},{"text":"ok so here we go um so","width":236},{"text":"back in the mists of time","width":126},{"text":"get address info didn't really exist","width":150},{"text":"and we have to carefully setup a struct","width":148},{"text":"um but fortunately for us today, getaddressinfo does exist","width":262},{"text":"so the first thing we might do is um","width":233},{"text":"we'll use get address info, so how do we do that","width":189},{"text":"well we setup um a hint set up...","width":355},{"text":"the um....","width":131},{"text":"addressinfo struct","width":485},{"text":"","width":1},{"text":"and we'll setup the hints","width":367},{"text":"we'll copy this struct. another intended use for this getaddressinfo we are just gonna pass it into getaddressinfo and so here's the thing that we care about","width":497},{"text":"like we really want a stream based protocol","width":162},{"text":"hey we wanna use IP 4 or we wanna use IP 6 or we um or we don't care we'll use either","width":613},{"text":"but anyways we said about our struct like we are doing down here we said about we are configuring it","width":414},{"text":"um we could get address info","width":146},{"text":"to setup the real struct for us","width":231},{"text":"and then we can use it so now here's the um","width":276},{"text":"here's the main part","width":188},{"text":"write a socket","width":264},{"text":"call connect","width":197},{"text":"so in a sense","width":164},{"text":"making a client actually requires two calls","width":203},{"text":"get a socket and ask that socket to connect to something","width":145},{"text":"that's not quite true because we are using this getaddressinfo to help us make the connect call","width":399},{"text":"but this is the actual part, if we actually know exactly what we wanted to put","width":253},{"text":"set it to connect, we won't need to be calling getaddressinfo","width":200},{"text":"that's just a helper method for us","width":164},{"text":"actually it's just these two calls: hey i want a socket, and hey please connect to somewhere. please connect to BBC and here's the IP address. right","width":619},{"text":"alright so um","width":209},{"text":"last semester","width":115},{"text":"no, last lecture","width":156},{"text":"i lied to you","width":131},{"text":"just a little bit","width":144},{"text":"i said getaddressinfo returns a struct of these addressinfo objects. well that's kind of true","width":865},{"text":"actually, it returns a linkedlist of them","width":301},{"text":"so here's what happens, you say, look, in my hints","width":205},{"text":"i would like a certain kind of connection, like, i would like, say, IP 4, for example","width":558},{"text":"and i would like, say, a stream based port for, say, TCP","width":409},{"text":"getaddressinfo says, okay you wanna get this remote host, i will find all of the possible ways","width":397},{"text":"to set up a socket and connect to the remote host and return it to you","width":312},{"text":"and that's what we get, we get a whole lot of these addrinfoes","width":215},{"text":"now and for our little code inside CS 241, don't worry about that, just use the very first one that it gives back to you","width":387},{"text":"assuming of course that getaddressinfo gives us a success","width":281},{"text":"result code","width":86},{"text":"but if you are writing a more verbose server, you might say i wanna connect to the BBC","width":238},{"text":"and i don't care if you can find a good IP 4 connection or good IP 6 connection i know what i'll just try both","width":613},{"text":"alright so, in fact you get this linkedlist","width":336},{"text":"alright so what have we got inside this addrinfo ","width":168},{"text":"alright we've seen these um, this half up here which is kind of a description of what we want","width":413},{"text":"this is the stuff that we are probably gonna be using in our code later on","width":300},{"text":"and that is this structure here, sockaddr","width":293},{"text":"and also the number of bytes in that address","width":190},{"text":"so you'll be seeing us passing those addresss. so you'll be seeing us passing those two fields","width":191},{"text":"into our connect call and our bind calls in a little bit","width":251},{"text":"ok so watch out for these, so this is the stuff that is setting up for us so we don't need to set up","width":501},{"text":"ok alright so we got our addrinfos","width":286},{"text":"alright so","width":128},{"text":"how many addrinfoes does it return? 0, 1 or more?","width":310},{"text":"i promise you that we'll never return you a negative number","width":297},{"text":"OK um. ","width":152},{"text":"one little thing that you might notice on the code before which is that if getaddressinfo fails","width":680},{"text":"you can't use perror() or structerror","width":342},{"text":"no, it doesn't set error number like that it's got its own error","width":427},{"text":"error code that you could use to return an error","width":371},{"text":"and we'll look that up in a bit","width":95},{"text":"instead i wanna charge through this because I actually want to get to the demo today","width":157},{"text":"the demo is the most fun","width":79},{"text":"but so what is AF_INET6?","width":177},{"text":"what kind of address family is this","width":267},{"text":"it is, yes, IP 6","width":298},{"text":"IP version 6. well we can talk about nodes we can talk about hosts, we can talk about machines","width":374},{"text":"using 128 bits of addressing","width":150},{"text":"in other words our address base is much larger","width":147},{"text":"alright so it's gonna take us a while to exhaust 2^128 possible addresses","width":702},{"text":"so IP version 6 was created because people foresaw the problem that hey we are starting to run out of addresses with IP version 4","width":954},{"text":"so what do you think this might be","width":297},{"text":"I'll give you a clue","width":660},{"text":"there's no place like home","width":113},{"text":"this is how we talk about our localhost ","width":244},{"text":"using IP version 6. so if you want to hack yourself using IP version 6, this is the address you need to connect to","width":527},{"text":"there is actually a shorthand for this where we can collapse the longest ones and zeros","width":371},{"text":"and so there the shortest version of this is just ::1","width":266},{"text":"i'm not gonna talk about all the rules about collapsing IP version 6 addresses","width":356},{"text":"you're welcome to look them up but i guarantee you that they won't be on the exams. the wikipedia references is perfectly good enough","width":385},{"text":"if you ever need to actually need to talk about IP version 6 addresses","width":207},{"text":"but that's the shortest IP address IP v 6 address.","width":431},{"text":"and yes this might be on the exam or this should become acknowledged that hey, this is yourself and this is localhost","width":384}],
  // Part 1
  [{"text":"okay so lets see if we can set this up then","width":540},{"text":"I'm going to start writing some code then to make a TCP conneciton","width":319},{"text":"so yes we need to setup one of these int objects","width":242},{"text":"and we'll have a pointer as well to get the result","width":186},{"text":"so what should i set for the family?","width":508},{"text":"well if i want to connect with version 4 I would be connecting with IF_INET6","width":530},{"text":"if i want to do ip version 6 i would put a 6 in here","width":480},{"text":"and what about the socket","width":95},{"text":"Well we want a stream based protocol","width":151},{"text":"in other words TCP","width":104},{"text":"so for our socket type we specify socket stream","width":439},{"text":"if i had left these entries as zero","width":278},{"text":"we're basically saying hey we don't care","width":154},{"text":"and then we get back that linkedlist","width":145},{"text":"what are you connect to the BBC using the UDP","width":169},{"text":"using um datagrams","width":111},{"text":"you could connect using tcp","width":62},{"text":"and these would just be different entries in that linkedlist","width":271},{"text":"and then your code could try them all","width":116},{"text":"hey lets see if we can get a webpage over udp","width":212},{"text":"and the answer is actually quite a few webservers will do that","width":201},{"text":"they'll look at you strangely and go what do you want?","width":153},{"text":"but they will actually say okay I'll give you back some data as a single packet","width":354},{"text":"right so right we're going to fill this in","width":315},{"text":"ok so what do we put in here","width":148},{"text":"our function call of course is get address info","width":375},{"text":"and what do we pass over here","width":83},{"text":"well we need to pass in the hints","width":274},{"text":"and we need to pass in our reult","width":301},{"text":"okay, so lets see if your neighbor can first of all the mistakes i've just deliberately made in that code","width":606},{"text":"and also what are the two missing things that I need to fill in here","width":421},{"text":"what are the first two parameters","width":164},{"text":"so what mistakes did I make and what's missing in that code","width":6645},{"text":"okay right so ","width":178},{"text":"couple a mistakes we made","width":80},{"text":"first of all actually we want the address of our hint struct","width":205},{"text":"so we'll put an ampersand there","width":117},{"text":"and also we want the address of this pointer","width":179},{"text":"it's going to change that pointer for us","width":348},{"text":"ok so what do we pass in here?","width":132},{"text":"well we pass in sometimes it's called the node but you can think of it as just basically the machine we want to connect to","width":368},{"text":"so we could write www.illinois.edu","width":194},{"text":"we could write www.bbc","width":120},{"text":"we could write we could say for example do ::1 if we wanted to connect to ourselves using IP6","width":544},{"text":"we could write 127.0.0.1","width":366},{"text":"if we wanted to connect to ourselves and we were using ip4","width":378},{"text":"for here, i'm going to now specify the port","width":146},{"text":"and you can do this with two ways you can literally just write a string","width":235},{"text":"like 1234","width":383},{"text":"but for well known ports like HTTP, HTTPs you can actually write the protocol name","width":575},{"text":"like HTTPS ","width":451},{"text":"if you happen to know the port number, yeah you could use that","width":416},{"text":"so get address info is surprisingly useful","width":166},{"text":"if you give it a ASCII name it will try to convert that to a port number","width":332},{"text":"for you","width":639},{"text":"so if it returns zero we've succeeded","width":357},{"text":"if it fails now we can actually find out why","width":226},{"text":"and that's where that function comes in ","width":267},{"text":"we could call gai_strerror and pass in that result code","width":725},{"text":"and that would give us back string","width":246},{"text":"okay now I'm not going to expect you to remember that, the string error","width":346},{"text":"but what you might do as a system programmer","width":251},{"text":"with this networking code and in fact any time you want to write good code","width":251},{"text":"is check the manpages","width":93},{"text":"so if we were to go to manpages","width":194},{"text":"is this going to work here we go","width":92},{"text":"alright","width":200},{"text":"we see that um okay i can take the return ","width":298},{"text":"if i now read the description and the return value of this it would tell me that hey this integer can be plugged into this call","width":461},{"text":"to give me a basic message about what went wrong","width":256},{"text":"and let's have a quick look down here to see the kind of things that can go wrong","width":338},{"text":"we have a bad family bad flags","width":253},{"text":"no data no name","width":136},{"text":"this call can fail in all sorts of ways","width":186},{"text":"we might fail at turning a name like bbc.com into an ip address","width":599},{"text":"okay but lets say it worked","width":214},{"text":"what do we do next","width":102},{"text":"well the first thing we might do is okay let's make a new socket","width":318},{"text":"now you seen in some of my earlier examples that i've made the socket at the very beginning of the code","width":243},{"text":"and i hardcoded in exactly what family and type of socket type I wanted","width":559},{"text":"but you could also just use the return values","width":256}],
  // Part 2
  [{"text":"there we go","width":86},{"text":"we've also go the information we need inside here to actually create the socket","width":256},{"text":"so if you expect you'll get address info to return maybe an IP6 ","width":382},{"text":"maybe multiple kinds of different sockets","width":157},{"text":"then you'd be pulling that information out of that linkedlist each time","width":277},{"text":"so we've called socket and then we would try","width":441},{"text":"to connect to that remote host","width":275},{"text":"and let's say we've successfully got a connection","width":176},{"text":"hey great we're now talking to that machine","width":243},{"text":"right so this connect call is heavy it's big it's slow ","width":310},{"text":"it actually goes out there and connects","width":149},{"text":"it doesn't just like \"oh, connect please\" it's \"no make contact\"","width":238},{"text":"send some packets to and from that machine","width":267},{"text":"so connect might take a second or more to complete","width":212},{"text":"might take a minute","width":131},{"text":"if you're remote server you're trying to connect to is a long way away","width":303},{"text":"so this is potentially very very slow","width":213},{"text":"how quickly you can talk to the remote machine","width":364},{"text":"if you're trying to talk to yourself that should be pretty fast","width":323},{"text":"so you could talk to yourself very quickly and discover if you can connect to a particular port","width":491},{"text":"there's one thing we didn't talk about yet","width":177},{"text":"and that is ","width":288},{"text":"this magic call called bind","width":299},{"text":"so usually we don't like to be bound up","width":340},{"text":"but today we're going to be calling bind on our socket","width":250},{"text":"we're going to take our socket and we're going to bind it to a particular local port","width":494},{"text":"we're gonna say \"hey! use this local port\"","width":258},{"text":"now most of the time when you want to connect to a remote server","width":124},{"text":"you don't care where your packets leave from","width":170},{"text":"you don't care which port is used locally","width":213},{"text":"just let the operating system let the kernel choose the outgoing port","width":368},{"text":"but when we want to make a server typically we do care","width":150},{"text":"if I'm going to make a webserver I want it to be on port 80","width":457},{"text":"so we can use bind if we want to set the ","width":561},{"text":"local port","width":507},{"text":"you could also use it if you've got say two network cards","width":200},{"text":"and you want to specifically use a particular network card","width":592},{"text":"but it controls the local side of the connection","width":1433},{"text":"","width":2},{"text":"which is exactly what we're going to need when we make a server","width":649},{"text":"","width":1},{"text":"so if i tried to connect to your cellphone right now on a particular port","width":545},{"text":"i'd probably discover that it's not listening on that particular port that I was connect to","width":247},{"text":"connect would return back and say haha I'm sorry I've failed","width":215},{"text":"I've managed to send a packet and it said nothing ","width":193},{"text":"i didn't get anything back","width":91},{"text":"for your cellphone","width":54},{"text":"so connect fails","width":178},{"text":"what we ought to do in the server is the opposite","width":305},{"text":"we want to sit here and wait for people to come to us","width":275},{"text":"wait for packets to come to us","width":107},{"text":"wait for packets to come to our port","width":158},{"text":"what we want then is a passive connection","width":207},{"text":"not something that goes out and tries to connect","width":140},{"text":"but just sits there and says huh no let us the packets come to us","width":349},{"text":"we can do this","width":119},{"text":"and it's very very easy","width":272},{"text":"alright so a passive socket level one understanding is just hey it waits for connections to connect to it","width":623},{"text":"it's sitting on the key side of the particular port saying okay I'm on port 80 send your packets to me I'm ready","width":413},{"text":"and when they do I'm going to do something special","width":151},{"text":"right so what's a passive socket ","width":121},{"text":"first of all it's a socket that is listening ","width":254},{"text":"it's also known sometimes as a server socket","width":414},{"text":"because we use it for serving we just it for waiting for connections","width":358},{"text":"so it's passive in the sense that it's waiting for connections","width":705},{"text":"and it has a cute little trick","width":610},{"text":"","width":1},{"text":"lets say I'm the client, you're the server","width":182},{"text":"can you catch?","width":252},{"text":"let's say you're the server","width":78},{"text":"right there you go","width":307},{"text":"that ladies and gentlemen is a dropped packet","width":338},{"text":"alright here","width":237},{"text":"that server wasn't listening","width":588},{"text":"okay fantastic right","width":130},{"text":"so I've sent my-k-I've just connected to the server","width":339},{"text":"on the passive socket","width":63},{"text":"now here's what the passive socket does","width":197},{"text":"when it returns the connection, when it does the handshake back to me","width":446},{"text":"thank you","width":167},{"text":"it sends an additional piece of information which is","width":183},{"text":"don't talk to me, don't talk to that port anymore","width":199},{"text":"I've got a new port set up just there","width":321},{"text":"that is the special connection that is just between you and me","width":417},{"text":"so we'll see that in a moment on the C side as well ","width":127},{"text":"we'll see that on the seaside, I like that","width":110},{"text":"so we'll see that in terms an additional file descriptor","width":263},{"text":"that's part of that handshaking","width":139},{"text":"once we make the connection on the server side,","width":124},{"text":"no no we have a completely different port just for that one connection","width":347},{"text":"why do we do that?","width":60},{"text":"well guess what we're making a server","width":135},{"text":"we're trying to take over the world or whatever","width":120},{"text":"and other people might be connecting to port 80","width":210},{"text":"as soon as they do that they're going to be talking to you again","width":195},{"text":"so in order to keep all these connections separated","width":227},{"text":"we push them onto different ports","width":284},{"text":"alright so the time you actually spend talking to this particular port is minimal","width":330},{"text":"okay so why do we create one","width":181},{"text":"so we can have a server","width":529},{"text":"I want to make a server","width":231},{"text":"right so how do i do all this","width":199},{"text":"have I put this in yet no","width":86},{"text":"so here's what we should do ","width":136},{"text":"in our hints struct","width":389},{"text":"we're going to specify one more thing","width":209},{"text":"let's go back to here","width":62},{"text":"something we haven't used yet is this flags","width":808},{"text":"and there's a flag to say","width":181},{"text":"hey make a passive socket for me please","width":517},{"text":"trying to think if it's yeah must be uppercase right","width":646},{"text":"so before making your get address info call, just say oh, by the way, I would like a passive socket","width":576},{"text":"by the way i would like a passive socket","width":256}],
  // Part 3
  [{"text":"now if we were to run our code by the way","width":1253},{"text":"I didn't talk about this little guy in here","width":234},{"text":"what did you think he's there for?","width":456},{"text":"right? this little tiny question mark is the ultimate april fools in the sense that this will get you every day of the year","width":557},{"text":"this is C going oh you mean you didn't set all of the parameters in a field?","width":509},{"text":"don't worry, I'll make your code work today","width":311},{"text":"but, if we don't set all the fields inside a struct, then who's to know what the values are of the ones that we didn't set","width":443},{"text":"now maybe you made it in global memory","width":314},{"text":"and you know that there's going to be zero but if we didn't","width":223},{"text":"if we just made it on the stack","width":128},{"text":"then who knows what those global fields are going to be","width":301},{"text":"and we're just giving them to the operating system","width":133},{"text":"so who knows how getaddressinfo is going to interpret those unset fields","width":433},{"text":"so I'm talking about these in terms of setting up network code but this is actually a common common gotcha with C","width":353},{"text":"is you hey I've got a struct, I'll set a few things and I forget to set the other fields","width":435},{"text":"so right how can I fix that? well I showed you before","width":178},{"text":"one way is to call memset","width":101},{"text":"okay so how about we do this? memset on the hints","width":877},{"text":"sizeof(hints)","width":288},{"text":"zero","width":159},{"text":"and I can relax that I've now got job security","width":307},{"text":"my code will work!","width":535},{"text":"haha april fools","width":697},{"text":"so what have I just done?","width":128},{"text":"I've just managed to set zero number of bytes","width":216},{"text":"to a small integer value","width":164},{"text":"in other words the memset call I just made had no effect whatsoever","width":385},{"text":"because I accidentally swapped these two values around","width":586},{"text":"I suggest that you ideally just don't make this mistake","width":685},{"text":"or don't make this mistake in production code","width":305},{"text":"because the worst thing about it is that you probably won't realize it, you probably won't notice it right?","width":273},{"text":"the memory half the time is zero","width":140},{"text":"and it's only when say you are reusing old stack memory that you might not get nonzero values","width":371},{"text":"so watch out, watch out anytime you work directly with memory","width":235},{"text":"that's the most likely time that you'll get some very subtle bugs","width":484},{"text":"right so we've got our thing set up","width":158},{"text":"getaddressinfo is returning zero, it's working, right so...","width":394},{"text":"here's what we can do now","width":190},{"text":"remember how I said...","width":228},{"text":"in a client we make a socket and then we call connect","width":337},{"text":"and we connect to a remote end","width":109},{"text":"in a server, we go socket and bind","width":600},{"text":"we're not trying to connect to a remote end at all","width":260},{"text":"we're just saying ha I just want to set up a local socket here","width":189},{"text":"that doesn't connect to anything, it's just going to sit there and listen","width":200},{"text":"and all the parameters that we pass to connect to the same ones as bind","width":263},{"text":"so we're going to be passing in...","width":250},{"text":"these two again, this address and that length of that struct","width":215},{"text":"we'll see the real code in a moment","width":94},{"text":"but basically we've swapped our connect for a bind","width":195},{"text":"because we want to talk about not a remote endpoint but a local endpoint","width":342},{"text":"right... so at this point we'll just take a little bit of a break to","width":702},{"text":"mention these guys","width":285},{"text":"and also to kind of show you what the code might look like if you didn't have getaddressinfo","width":939},{"text":"so when setting up a socket","width":386},{"text":"one of the things we want to talk about then is the port address and the IP address","width":549},{"text":"and you'll notice if you do a lot of google searching on code, you'll quickly come across these functions here","width":330},{"text":"this htonl and htons","width":499},{"text":"here's what they do, they swap bytes around","width":354},{"text":"sometimes","width":140},{"text":"they swap bytes if you run this on an x86 intel machine","width":493},{"text":"why?","width":141},{"text":"why do you think we might want to swap the ordering of bytes?","width":716},{"text":"security?","width":276},{"text":"good idea but not the answer I was looking for","width":210},{"text":"endianness yes!","width":208},{"text":"so endianness why do we care about endianness well the point is we're sending information over the wire right?","width":443},{"text":"we're sending stuff out to the network, we don't want it to depend on the order with which we represent integers","width":415},{"text":"so if we're talking about a particular port number","width":151},{"text":"that's sixteen bits","width":104},{"text":"we better agree when we send the packet out on the network as to whether we want to put the low byte first or the upper byte first","width":594},{"text":"so network order is big endian","width":321},{"text":"and that should be independent of our machine","width":150},{"text":"so if the kernel says by the way, this remote host is connected to you on this particular port","width":405},{"text":"or here's this ip addresses","width":209},{"text":"we better be careful, these integers may not actually be the integers that we normally understand","width":373},{"text":"we may actually have to deliberately read that value with the bytes swapped","width":538},{"text":"so that's where these functions come in","width":124},{"text":"if you happen to compiling this code on a little endian machine","width":291},{"text":"big endian machine, they don't do anything, they are a no op they don't need to swap any bytes","width":291},{"text":"if you call them on an intel machine however, they give you the result with the bytes correctly swapped from big endian order to little endian order","width":576}],
  // Part 4
  [{"text":"vice versa","width":103},{"text":"so what do they stand for? they stand for host to network short","width":290},{"text":"and network to host short","width":195},{"text":"[silence]","width":1129},{"text":"so here's an example","width":179},{"text":"where we want to specify the port","width":211},{"text":"as port 1100","width":182},{"text":"notice how I chose a port greater than 1024 ","width":189},{"text":"and I want to set it directly into this structure here","width":291},{"text":"socket address","width":285},{"text":"and so I have to remember to actually set this up to be the network","width":455},{"text":"the network port number","width":308},{"text":"so this port number is actually going to be passed directly into the network card we're going to assemble the packet and that packet will have these bytes in now the correct order to say okay [something] on this particular port","width":1085},{"text":"you can use these inside your own code","width":205},{"text":"let's say you wanted to have a high performance server","width":236},{"text":"and you're not going to send ascii information, you actually want to send binary information","width":236},{"text":"and you want to send say the position of your players to all of the other, you want to cast it out to all of the order players on your game server","width":768},{"text":"you would have to decide on your protocol to say am I going to send this out in little endian or big endian format","width":312},{"text":"and you could use these kinds of calls to make sure that it doesn't matter whether your C code is compiling on an ARM platform an Intel platform","width":591},{"text":"that we always on the network are sending bytes out in the same order","width":368},{"text":"same endianness ","width":154},{"text":"alright so that's just a little aside, you'll see these codes and now you know what they do","width":250},{"text":"and here's the other one where you use it for a long so you can use it for 32 bits","width":434},{"text":"right so okay right","width":291},{"text":"so it's quite often said that setting up a server takes four cores","width":285},{"text":"we better say what they are","width":233},{"text":"and it's a common exam question or interview question to say what's the order of these?","width":306},{"text":"and what does each one do?","width":162},{"text":"right so the first one is easy, hey we need a socket","width":181},{"text":"you're not going to get very far without a socket","width":112},{"text":"we need a way to configure our network","width":339},{"text":"and a socket gives us back a file descriptor that we can then start to use","width":248},{"text":"once we've got that file descriptor","width":289},{"text":"we want to bind it to a local port","width":921},{"text":"let's bind it so we are now going to be on a particular local part and we set it up, we pass it","width":627},{"text":"now actually we're ready to go","width":145},{"text":"here's the nice thing that we can do with server sockets","width":269},{"text":"we can ask the kernel to do that little handoff trick and to start queuing up any connections","width":364},{"text":"so now we can start listening","width":213},{"text":"at that moment...","width":204},{"text":"we're live!","width":71},{"text":"our kernel is starting to actually accept connections for us","width":266},{"text":"and we'll generate a small queue of incoming connections that we can now start to process","width":375},{"text":"so with listen, we actually specify the queue size","width":660},{"text":"so as part of that little handoff process when we say oh actually go and reconnect to me next time on this other port number","width":396},{"text":"now the kernel has taken that and said okay by the way expect connections on this other port number, so internally its got a little queue","width":516},{"text":"when we want it from our user's side, we call...","width":339},{"text":"yes I'm prepared to accept this reverse call","width":520},{"text":"accept!","width":411},{"text":"so on the server side, when you call accept, you get...","width":407},{"text":"a new file descriptor","width":268},{"text":"okay so here's a big gotcha","width":156},{"text":"is that you've now actually got two file descriptors to play with","width":222},{"text":"if you want to be talking to your clients that are connecting","width":226},{"text":"this is one","width":202},{"text":"you get a new file descriptor each time accept returns","width":397},{"text":"also, this blocks","width":634},{"text":"until we have a client","width":243},{"text":"if your code is a bit slow in calling accept","width":185},{"text":"don't panic, that's why we called listen","width":148},{"text":"listen says look uhh my user code may not be able to call it except immediately so have a little backlog of connections that the kernel will maintain","width":720},{"text":"and hopefully I'll be able to call accept in the future","width":169},{"text":"so its very simple code, very simple server","width":306},{"text":"we can just call accept once, and that's it and that's what we'll do in a demo in a moment","width":231},{"text":"later can call accept in the loop to process one client at a time","width":399},{"text":"probably not going to be the best webserver in the world","width":222},{"text":"but hey it works and we can run that on some tiny embedded hardware","width":331},{"text":"later we might do things like hey let's for every accept call start a new thread","width":405},{"text":"and then everybody can talk to my server in parallel","width":387},{"text":"well that works until a thousand people try to connect and then you have a thousand threads that start on a machine with 8 CPUs that's probably going to work out so great","width":710},{"text":"so then we need to start figuring out even better ways to have a high performance server","width":368},{"text":"but anyways that's our four calls, socket, bind, listen and accept","width":240},{"text":"alright let's see this in action","width":300},{"text":"ooh look code!","width":192}],
  // Part 5
  [{"text":"Here we go! I'm going just hard code my, my constants. Like I said, we could have got this back from the address info.","width":764},{"text":"Today, I want to play with IP4, I want a TTP connection. There's my flags, those other flags you can set them here by bit-wise or-ing them.","width":591},{"text":"But we want a uh... a server, or passive connection. Yes, I remembered to set all my other unused fields to zero.","width":935},{"text":"Right. Yes, I'm going to call getaddrinfo. Check the result code; if it fails, I'll turn that into a useful error message.","width":610},{"text":"It's really really useful if your code doesn't work to actually check error messages by the way.","width":446},{"text":"Okay, so. We got a socket call, we got a bind let's connect to a local port.","width":460},{"text":"And look at this! I'm using the stuff I got from my getaddrinfo. I'm passing in that point of that struct and the size of that struct.","width":697},{"text":"okay, that's my set up: socket bind.","width":191},{"text":"Now, we start to say, \"Ooh!\" Um, please start listening and have a little backlog of ten connections.","width":583},{"text":"Okay. So, just for fun, I want to show you that I can say, \"I'm just doing a particular port. If I reach into one of these low-level C structures, I better remember to reverse the right order to turn it into from network to host (ntohs) and use the result of that call.","width":1955},{"text":"And now we're going to have our little server.","width":362},{"text":"This server code didn't actually send anything back to the client. It just listens to hear what the client has got to say.","width":438},{"text":"How do we do that? We call accept. Later on if we wanted to have to fill in the structure, like where the client was connecting from. We wanted their own IP address we can fill out these structures here.","width":923},{"text":"And remember how I said accept returns a new client? Here it is! Here is a new file descriptor (fd), and I'm going to use that on my read call and then turn it into a C string and print out what they said. Okay","width":1098},{"text":"So, let's uh, let's run this.","width":812},{"text":"Hmm. *bzzzzzzzzzzzz* Okie dokie, alright, so there's no error checking in this last part, um, alright.","width":515},{"text":"So I can... clear this right gcc ./server1 (./server1.c). Okay! Alright","width":1337},{"text":"Oh, look at that! That's my OSX is saying do you want to accept it?","width":329},{"text":"Wait! And it chose file descriptor 3, is this your port 1234? Shall we connect to it?","width":616},{"text":"Okay, alright. So, let's do this um, now I could write some C code, but instead I want to show you a pretty useful tool. It's called netcat.","width":1021},{"text":"Here is netcat. Blah blah blah, blah blah, blah blah blah, blah blah blah. Look it's like cat, except you can connect to an arbitrary machine, using an arbitrary protocol.","width":891},{"text":"And anything we sent this, it will use standard in and standard out.","width":546},{"text":"So today, I want to connect to 127.0.0.1, my local host, and I want to connect to port 1234.","width":1168},{"text":"So our code is working! The accept call has returned. ","width":192},{"text":"And it has given back our new file descriptor. Right, should we send something to it! Yes, okay here we go. HELLO GET / HTTP/1928349q87eyfaiu7tbeiqvwfa SAfuigae","width":831},{"text":"And here we go. So, it got that from the socket and printed that and stopped.","width":597},{"text":"This is the most useless web server in the world because it accepts one request then quits.","width":539},{"text":"Very easy to make a denial of service (DOS) on this particular web server. So what we'll do is make it so it cannot accept multiple clients. We're not going to do any threading code in this (we could though!). Right as soon as accept returns, why don't we make a new thread and pass it on.","width":992},{"text":"Instead, we'll just put this little part inside a loop. Alright so a while there.","width":913},{"text":"Okay, so we put this accept call inside a loop","width":1773},{"text":"Make another connection, and so on and so on. So we got the basics now of a little web server. What we have to do now is figure out how we are going to pause this. what do we want to do with this information, and what do we want to send back to the client?","width":1271},{"text":"Alright, so in fact what we've made is something a bit like a honey pot. For example, here's why it's called a honey pot.Take a jar of honey, open it, and see what insects are there after a minute or an hour. We can do this with our server. We can get it to simply listen on a particular port and see who connects and say capture the IP address. Or we can pretend to masquarade to build a real machine. Oh look! people are trying to log into this let's see what kind of pass","width":2502},{"text":"let's see what password they typed in.","width":223},{"text":"We can see what kind of attacks they do to our machines.","width":283},{"text":"So, on many modern networks now we have these machines which appear to be real machines, but which are infact are simple honey pots.","width":556},{"text":"This is the simplest kind, right? Where we can simply log the connection attempts, who they're from, and what information is sent to us.","width":704}],
  // Part 6
  [{"text":"Alright, another thing we're going to finish today is epoll.","width":558},{"text":"So I suggest for a simple server, hey, just uh, just little while loop.","width":296},{"text":"The next simple server is: hey make a thread so at least we can do this with uh multiple threads so that I can be servicing two clients at the same time.threads so","width":751},{"text":"Well, these kinds of ideas work until now you have hundreds or thousands of clients connected to it at the same time.","width":513},{"text":"And um, a bit of history is that we used to have a core called \"select\" you'll find in everywhere (works in a mac), but these days, epoll is a common solution to a hyperbolic server; in fact, you'll get to play with that this section.","width":1153},{"text":"And what epoll will ask you to do is with sockets or pipes, and you'll get to play with pipes.","width":455},{"text":"You can say, \"Actually, there's a whole load of file descriptors that I'm interested in.\"","width":338},{"text":"And so, the basic outline of epoll is: you make, we make a set you'll create, and then, using a control function we add a whole load of file descriptors, a whole load of file descriptors.","width":1541},{"text":"You say you'd want to read or write to these. What's your intent?","width":836},{"text":"And then you can wait--wait for an event.","width":477},{"text":"That's the basic idea.","width":126},{"text":"So actually now, I can have a single thread waiting on a thousand clients.","width":375},{"text":"If my clients don't talk to me very much, when one of them does, I can immediately find out which one.","width":500},{"text":"...because epoll call will tell me, \"Hey! By the way, now you have to talk to this particular file descriptor, now you need to be talking to this particular file descriptor.\"","width":502},{"text":"The old way of using select: will select allow me to go to sleep once something is happening; but once select returns, I'd have to kind of go through every single file descriptor. I'd have to do a linear search to find out which file descriptor was the one that I need to process.","width":1348},{"text":"So, that would be in session this week with epoll, and the other section thing we hope to do with sections tomorrow is to connect some class 7 code on the tablets as well.","width":877},{"text":"With that, have a wonderful week! Good luck with the MPs! I'll see you on Friday <3","width":384}],

  // Start Lecture Video 24
  // Part 0
  [{"text":"alright good afternoon class","width":205.18181824684143},{"text":"now so today we have quite a few pretentives in the orders","width":236.18181824684143},{"text":"if you traveled here because you ... cs 241 but ur just visiting the class today","width":409.18181824684143},{"text":"please just wave your hand","width":126.18181824684143},{"text":"i know theres quite a few of you","width":83.18181824684143},{"text":"right","width":24.18181824684143},{"text":"these people I invited just been accpeted to cs major program","width":321.18181824684143},{"text":"or they are visiting campus","width":143.18181824684143},{"text":"so be sure to be nice to them and tell them","width":221.18181824684143},{"text":"what a great place wisconsin is","width":248.18181824684143},{"text":"so here's what we are going to do today","width":67.18181824684143},{"text":"we are going to finish our discussion about sockets","width":239.18181824684143},{"text":"uhh in terms of .. what we can do is we use imports, and ","width":330.18181824684143},{"text":"what happens if","width":88.18181824684143},{"text":"is my mic on yet","width":143.18181824684143},{"text":"what happens if we dont set various socket options when we are developing our programs","width":327.18181824684143},{"text":"and we discover that the port is in use","width":107.18181824684143},{"text":"and that kind of stuff","width":88.18181824684143},{"text":"and then we talk about how can we make the server actually discover who is connected to us so we can find out for example","width":657.1818182468414},{"text":"its ip address","width":103.18181824684143},{"text":"so yesterday you made yik yak, or at least use a very simple version of yik yak, where we connect to our virtual machines","width":495.18181824684143},{"text":"on the android tablet","width":92.18181824684143},{"text":"and now that we want to make it so that our server can actually find out who connected it","width":350.18181824684143},{"text":"a little story for you","width":88.18181824684143},{"text":"that is the very first time i visited urbana champaign","width":147.18181824684143},{"text":"was I was visiting wolfram research","width":119.18181824684143},{"text":"they're just down the road, you may have heard of them","width":113.18181824684143},{"text":"they made methametica","width":141.18181824684143},{"text":"i did some 3d visualization software which connected to wolfram using sockets","width":374.18181824684143},{"text":"they connected to mathematica using sockets","width":134.18181824684143},{"text":"and this is back in the day when we actually made a plugin ","width":263.18181824684143},{"text":"an external piece of software","width":98.18181824684143},{"text":"to display 3 dimensional shapes","width":204.18181824684143},{"text":"so i was talking to them","width":63.18181824684143},{"text":"and back in the older days of the web, before blogs","width":305.18181824684143},{"text":"and they said, you know, one trick what we do, about our web server, is we got various competitors right now","width":383.18181824684143},{"text":"and we dont want them to know immediately when we release our product","width":272.18181824684143},{"text":"so when they come to our website, we check their ip address of the connection and we serve them the old content","width":493.18181824684143},{"text":"so our competitors see our content at least two days old","width":303.18181824684143},{"text":"so they'll be a bit slow in discovering when we actually release new software","width":239.18181824684143},{"text":"so that's something you can play with","width":107.18181824684143},{"text":"with the yik yak implementation ","width":239.18181824684143},{"text":"that give bad inforamtion","width":140.18181824684143},{"text":"if you don't like the client connecting to your server","width":182.18181824684143},{"text":"hey, give them something, give them some alternative information","width":280.18181824684143},{"text":"ok","width":50.18181824684143},{"text":"so","width":48.18181824684143},{"text":"how can you do that? easy!","width":104.18181824684143},{"text":"look at, say, the ip address, the bytes they sending to you","width":267.18181824684143},{"text":"you could invent a new protocal","width":113.18181824684143},{"text":"all messages to you should have a hash value","width":176.18181824684143},{"text":"which should start with a colon etc. etc. etc","width":210.18181824684143},{"text":"and why not share your protocol with your friends at cs 241","width":287.18181824684143},{"text":"so that you can connect to each others' virtual machines","width":208.18181824684143},{"text":"and why not tell some bad information to the people you dont like in cs 241","width":258.18181824684143},{"text":"and then you can tell them when the exam's on when they re not","width":305.18181824684143},{"text":"alright ","width":23.18181824684143},{"text":"so","width":36.18181824684143},{"text":"lets go out for our handout for today","width":201.18181824684143},{"text":"uhh we need","width":163.18181824684143},{"text":"i can ... some content today","width":167.18181824684143},{"text":"alright what's the honey pot","width":202.18181824684143},{"text":"easy! a place for honey! remember this?","width":145.18181824684143},{"text":"we can make servers that masquarade as real machines ","width":253.18181824684143},{"text":"and then uhh see how they've","width":312.18181824684143},{"text":"been used on internet","width":95.18181824684143},{"text":"for example, what you see in todays lecture","width":121.18181824684143},{"text":"is how can we discover what client is connecting to our server","width":335.18181824684143},{"text":"so we can label those ip addresses","width":145.18181824684143},{"text":"you could for example on your virtual machine","width":127.18181824684143},{"text":"have a port 80 open up ","width":110.18181824684143},{"text":"and see if anybody tries to connect to your machine","width":308.18181824684143},{"text":"okay so","width":183.18181824684143},{"text":"what are the purpose of these calls, htons and ntohs?","width":364.18181824684143},{"text":" what do they do?","width":233.18181824684143},{"text":"yes host to network and network to host","width":220.18181824684143},{"text":"why do we need this?","width":85.18181824684143},{"text":"well because if we gonna be transfer bytes to each other we should agree on what order we should send the bytes","width":379.18181824684143},{"text":"for example if we are talking about an integer of two bytes long, we are sending the low byte or the high byte first","width":360.18181824684143},{"text":"and our cpu may not respect that perticular ordering","width":261.18181824684143},{"text":"and in fact if you on a intel machine it is actually the wrong order","width":328.18181824684143},{"text":"ok so we can use these to make sure that any integer values we send as binary are correctly ordered, that we put them in the right order","width":673.1818182468414},{"text":"for either working in our cpu or sending out on the wire we send it to the network card","width":372.18181824684143},{"text":"ok so its time for host to network short, network to host, short","width":272.18181824684143},{"text":"so we'd use this, for example, when working with port numbers","width":215.18181824684143},{"text":"umm port numbers are 16 bits","width":135.18181824684143},{"text":"ok so what are the four calls with the network server","width":148.18181824684143},{"text":"we've done this already","width":46.18181824684143},{"text":"remember","width":39.18181824684143},{"text":"our basic idea is we want to make a socket","width":302.18181824684143},{"text":"we'll say what kind of socket","width":91.18181824684143},{"text":"right","width":41.18181824684143},{"text":"then well call bind","width":111.18181824684143},{"text":"because we want to bind to a particular local port","width":367.18181824684143},{"text":"we may also use it to bind to a particular network card","width":313.18181824684143},{"text":"so weve made actual socket now so how do we get started","width":302.18181824684143},{"text":"we call listen","width":113.18181824684143},{"text":"all of these things will happen very quickly","width":183.18181824684143},{"text":"the next one will block, and that is when we call accept","width":345.18181824684143},{"text":"accept now will block if there is no one trying to connect to our server. ","width":233.18181824684143},{"text":"so it only returns when a client has actually connected. ","width":318.18181824684143},{"text":"why do we call listen?","width":73.18181824684143},{"text":"because we may want to set up a small","width":162.18181824684143},{"text":"queue so that if multiple clients connects together, the operating system is prepared to look after those immediate connections until we get them from accept","width":812.1818182468414},{"text":"and each time you accept, you get a new file descriptor","width":174.18181824684143},{"text":"and each time the client connects, it gets a new port to talk to","width":293.18181824684143},{"text":"alright so we've seen that","width":61.18181824684143},{"text":"now","width":32.18181824684143},{"text":"one thing i didnt talk about before","width":123.18181824684143},{"text":"was","width":237.18181824684143},{"text":"freeaddrinfo","width":70.18181824684143},{"text":"yes we've been playing with getaddrinfo","width":146.18181824684143},{"text":"to fill in a pointer to that struct ","width":332.18181824684143},{"text":"and remember that struct actually could be a linked list","width":299.18181824684143},{"text":"so when we finished using it","width":175.18181824684143},{"text":"rather than having to walk through the linked list ourselves","width":181.18181824684143},{"text":"there happens to be something called freeaddrinfo that does this for us","width":227.18181824684143},{"text":"and of course that is going to pull out the next pointer before calling free on each struct","width":417.18181824684143},{"text":"so what do you think might be wrong with this little piece of code here?","width":253.18181824684143},{"text":"you can assume that inside the dot dot dot i've called memset on hints and i set up the hints struct correctly ","width":434.18181824684143},{"text":"umm but what do you think mistake i might have made in writing this little bit of code","width":664.1818182468414},{"text":"make a pointer, called getaddrinfo, and then I called this function called free to say ","width":315.18181824684143},{"text":"ok, free that linkedlist that getaddrinfo set up for me","width":324.18181824684143},{"text":"what could possibly go wrong?","width":346.18181824684143},{"text":"yes?","width":164.18181824684143},{"text":"oh should i pass the address","width":93.18181824684143},{"text":"actually no freeaddrinfo takes a pointer to the first struct and go through destructively and frees up each member of the list ","width":618.1818182468414},{"text":"okay time to put your, yes","width":307.18181824684143},{"text":"thank you","width":31.18181824684143},{"text":"yes","width":47.18181824684143},{"text":"right","width":62.18181824684143},{"text":"so, remember we need to ask ourselves what could possibly go wrong","width":283.18181824684143},{"text":"ok here's one possibility ","width":116.18181824684143},{"text":"suppose getaddrinfo failed","width":181.18181824684143},{"text":"for example, you haven't actually connected to the wifi so it cant do the domain name lookup and find ip address","width":712.1818182468414},{"text":"so suppose getaddrinfo fails","width":128.18181824684143},{"text":"that means it never changed this pointer","width":163.18181824684143},{"text":"","width":64.18181824684143}],
  // Part 1
  [{"text":"so what is result pointing to?","width":560.1818182468414},{"text":"could be anything","width":96.18181824684143},{"text":"right? we just made this little thing on the stack","width":173.18181824684143},{"text":"its just whatever happened to be at the stack memory at that moment","width":212.18181824684143},{"text":"so we just called free on a arbitrary block of memory","width":258.18181824684143},{"text":"whoops","width":152.18181824684143},{"text":"our program is probably gonna crash","width":106.18181824684143},{"text":"at this point","width":62.18181824684143},{"text":"but its certainly probably vulnerable to other attacks at this point","width":259.18181824684143},{"text":"ok so how should we fix this?","width":127.18181824684143},{"text":"well here's what i would do","width":66.18181824684143},{"text":"i will probably set this to null to begin with","width":165.18181824684143},{"text":"and let me check, I'll only called this if the result has been changed","width":686.1818182468414},{"text":"so if its not equal to null","width":93.18181824684143},{"text":"then call freeaddrinfo","width":94.18181824684143},{"text":"that's a more robust program","width":272.18181824684143},{"text":"right","width":308.18181824684143},{"text":"port hijacking","width":167.18181824684143},{"text":"so","width":133.18181824684143},{"text":"i love this i want to dress up as a highway man as a pirate","width":294.18181824684143},{"text":"yes! there's a potential for port hijacking when we write our server programs","width":394.18181824684143},{"text":"imagine this, imagine you write a fantastic web server","width":188.18181824684143},{"text":"or another program that uses sockets to communicate","width":277.18181824684143},{"text":"and then your program finishes, perhaps it crashes","width":335.18181824684143},{"text":"at that precise moment, another process starts listening to the same port","width":335.18181824684143},{"text":"mua hahaha... and it gets some bytes","width":229.18181824684143},{"text":"that were intended for yoyu","width":235.18181824684143},{"text":"well this is a security risk","width":71.18181824684143},{"text":"we should prevent this, right","width":58.18181824684143},{"text":"we should prevent another process from immediately starting up","width":312.18181824684143},{"text":"and so that actually led to a socket rule where if you claimed a particular port, another process can't immediately reuse it","width":874.1818182468414},{"text":"if that process belongs to another user, we have a longer time out","width":423.18181824684143},{"text":"let's actually see this as a little demo","width":259.18181824684143},{"text":"and then we'll say what we can do","width":128.18181824684143},{"text":"uhh ... where is it... alright... so","width":1201.1818182468414},{"text":"ok, right, good","width":58.18181824684143},{"text":"i have a program here. so now let's run my little server here","width":277.18181824684143},{"text":"ok so gcc server1.c","width":374.18181824684143},{"text":"alright, so here's a little program we service for where we waiting on accept waiting for connection","width":485.18181824684143},{"text":"right, so let me connect to this. i'll start a new window, ","width":323.18181824684143},{"text":"and is today i'll use nightcat , so nc localhost 1234 ","width":414.18181824684143},{"text":"okay, we've connected. Yes!","width":121.18181824684143},{"text":"it's good! so I can send something over here","width":246.18181824684143},{"text":"let me at this point quit my program, i'll make a few changes, and i'll run it again. ","width":369.18181824684143},{"text":"oops. bind failed","width":115.18181824684143},{"text":"address already in use. ","width":81.18181824684143},{"text":"I couldn't reuse that port","width":258.18181824684143},{"text":"so that port for little while is still being bound to that old process","width":454.18181824684143},{"text":"even though the old process is quit, we couldn't immediately reuse it. ","width":311.18181824684143},{"text":"okay, so what can we do as developers?","width":206.18181824684143},{"text":"uh we like to be able to reuse our programs","width":127.18181824684143},{"text":"so i'll test it quickly","width":128.18181824684143},{"text":"[gibberish]","width":72.18181824684143},{"text":"it's okay I can reuse my port 1234 again","width":230.18181824684143},{"text":"so what options is to use","width":77.18181824684143},{"text":"hey, dont develop too fast","width":243.18181824684143},{"text":"but no we can do a bit better than that","width":103.18181824684143},{"text":"we can actually disable this security feature","width":239.18181824684143},{"text":"by setting an option on the sockets","width":137.18181824684143},{"text":"so lets see how we can do that","width":171.18181824684143},{"text":"hello ... just trying to connect to my machine right, my machine. so","width":265.18181824684143},{"text":"let's see what we can do here","width":118.18181824684143},{"text":"and there's a little option called setsocketopt","width":259.18181824684143},{"text":"where, make this larger, where ... on my server socket, i can say i wanna be able to reuse the port in the future","width":927.1818182468414},{"text":"so if you set this option on the port, that this when your process dies, or quits, another process can immediately reuse the same port","width":641.1818182468414},{"text":"okay. some odd syntax. we are gonna see this in a bit more examples. ","width":302.18181824684143},{"text":"of this. ","width":49.18181824684143},{"text":"is that youll see that we have to , in this case, pass in the address of the integer value, and then the size of an int","width":921.1818182468414},{"text":"so we are gonna see this passing a couple time today when we pass in the addresses of something and size of the thing that we are trying to pass in","width":479.18181824684143},{"text":"but thats just a bit kind of useful line of code that youll be using in one of the later mps","width":407.18181824684143},{"text":"one of the mps that we've got lined up for you is called wearable's mp, where we are going to simulate having a whole load of devices talking to, say, a server, so you might have to watch, you might have a pace maker, you might have a, i dont know, hair, that talks to your server ","width":1280.1818182468414},{"text":"and this is the single ... connecting and constantly talking to your server which collects your data, maybe collecting your blood pressure, and a whole load of your vital signs","width":543.1818182468414},{"text":"so ","width":70.18181824684143},{"text":"we want a server when we developing these stuff we wanna be able to quickly reuse ports, so here's the option to do that","width":451.18181824684143},{"text":"okay, so let's make a note of this","width":267.18181824684143},{"text":"how do i do this? if we start our programs and we use the same port, easy, we gonna use setsockopt and the magic ... is this SO_REUSEPORT thing","width":1221.1818182468414},{"text":"which should be in the wikibook. If not, I would add it","width":284.18181824684143},{"text":"and notice we do this before we call bind so we do this early on","width":356.18181824684143},{"text":"just after creating this socket","width":112.18181824684143},{"text":"set this option on on the socket","width":473.18181824684143},{"text":"right so we've played with very very simple kind of server, now you wanna do more. ","width":418.18181824684143},{"text":"right? this is uiuc, this is illinois of, university of illinois, we wanna go up to eleven. we don't wanna have just a single connection to a single client","width":657.1818182468414},{"text":"we actually want to write servers that can talk to thousands of clients at a time","width":401.18181824684143},{"text":"how can we do that?","width":119.18181824684143},{"text":"well, a long time ago, we realized that i dont want to always block on my read call waiting for my client to send me something, it would be nice to find out which client is coming talking to me","width":793.1818182468414},{"text":"has sent me some bytes","width":213.18181824684143},{"text":"so, the idea of select was born","width":287.18181824684143},{"text":"okay, right, so the very first implementation to attempt to making performance servers is to use the system call, is called select","width":859.1818182468414},{"text":"probably about 5 minutes after someone designed select, we discovered it wasn't any good. ","width":297.18181824684143}],
  // Part 2
  [{"text":"it was good enough at the beginning for the first four minutes but here's the problem with select","width":427.18181824684143},{"text":"you have to do an order N scan after it returns to find out which file descriptor you should be talking to","width":506.18181824684143},{"text":"you should be calling","width":100.18181824684143},{"text":"well that means an order N like up to say 1000 system calls","width":325.18181824684143},{"text":"and that in itself takes time, it's going to take milliseconds of time to say or should i be talking to this one, should i check...","width":402.18181824684143},{"text":"so select was a first pass, the great thing about select is that you'll find it everywhere","width":589.1818182468414},{"text":"if you want to write code on say simple embedded devices","width":317.18181824684143},{"text":"on windows, on mac, hey! just use select and don't worry about performance, it's good enough","width":367.18181824684143},{"text":"and it's easy to write code which times out so you can say okay I'd like to wait for say a second to see if the client sends me anything","width":495.18181824684143},{"text":"so select is a reasonable choice at that point","width":401.18181824684143},{"text":"so what happened next...","width":270.18181824684143},{"text":"is a system call called poll is defined","width":286.18181824684143},{"text":"that solved some problems, but today what we played with and what you've seen in lab is epoll","width":411.18181824684143},{"text":"the only downside of epoll or the main downside of epoll is that it's on linux","width":627.1818182468414},{"text":"but not mac","width":184.18181824684143},{"text":"not BSD","width":74.18181824684143},{"text":"so now you're stuck right? what should I use? select? poll? eopll? etc","width":482.18181824684143},{"text":"so epoll is performant, it's great for if you have a thousand long lived connections","width":560.1818182468414},{"text":"so it's ideal if you've got thousands of long lived connections","width":195.18181824684143},{"text":"so this is your yik yak server","width":273.18181824684143},{"text":"now a single machine can support thousands if not more connections, epoll would be a very good choice","width":622.1818182468414},{"text":"and as you saw, the way we used epoll is we set up a set and we just add file descriptors to that set","width":362.18181824684143},{"text":"and then we say okay now I'm prepared to wait, I'm prepared to block until I'm able to read from at least one of these","width":373.18181824684143},{"text":"and then when it returns it tells me which file descriptor I should use","width":471.18181824684143},{"text":"so for CS241, yeah we can play with epoll in the MPs","width":608.1818182468414},{"text":"and should you ever find yourself in a startup or fortune 500 company","width":368.18181824684143},{"text":"that wants to write a server, let's see that's probably every single fortune 500 company these days","width":346.18181824684143},{"text":"or just about most startups have some sort of client server architecture","width":319.18181824684143},{"text":"you might come down to which one of these should I use?","width":370.18181824684143},{"text":"just remember that there's actually three different versions","width":160.18181824684143},{"text":"here's some other thoughts on your server though which is.. sorry of you startup... is that why don't you do what chromium does, the browser that you found inside your android phone","width":904.1818182468414},{"text":"or chrome if you've downloaded as an app","width":131.18181824684143},{"text":"it uses the library called libevent","width":237.18181824684143},{"text":"and libevent basically wraps these three things","width":218.18181824684143},{"text":"so it provides an abstraction on top of the system calls","width":291.18181824684143},{"text":"now we're not going to use libevent in any exams, this is just an FYI","width":434.18181824684143},{"text":"it's that next time you want to do your startup, check out libevent because then you can write code that runs anywhere","width":415.18181824684143},{"text":"and it just provides implementation underneath that talks to select, poll or epoll to get the best possible performance on each platform","width":1073.1818182468414},{"text":"so I've been throwing a lot of information at you very quickly today, any questions at this point?","width":450.18181824684143},{"text":"okay I've got a bit of news for you","width":147.18181824684143},{"text":"I understand its passover this weekend so I'm going to ask the TAs to push the deadline for the MP back to Monday night","width":760.1818182468414},{"text":"11:59 pm","width":158.18181824684143},{"text":"okay so one minute before midnight on Monday","width":253.18181824684143},{"text":"is there not an MP that's due.. somebody sent me an email saying hey I need an extension so I'm going to ask the TAs to make sure there's no deadlines on this weekend","width":757.1818182468414},{"text":"okay if there are two deadlines this weekend","width":319.18181824684143},{"text":"ok well I push the one on Sunday onto Monday","width":203.18181824684143},{"text":"if you do not observe passover, you may still take advantage of this","width":349.18181824684143},{"text":"if you feel it's unfair to have two deadlines the same evening","width":195.18181824684143},{"text":"feel free to submit the first one just on Sunday night","width":472.18181824684143},{"text":"and then pretend that the extension hasn't been given","width":492.18181824684143},{"text":"I'm also asking the TAs to try to provide more verbose information about the MP merge","width":475.18181824684143},{"text":"by the way, the MP merge tester runs on a VM just like yours","width":361.18181824684143},{"text":"so it's probably a good idea to check your VM code on you personal virtual machine","width":523.1818182468414},{"text":"okay right so any quick questions?","width":251.18181824684143},{"text":"okay right let's jump into some other kind of little bits of know how then","width":488.18181824684143},{"text":"so we've been making servers that listen on a particular port","width":299.18181824684143},{"text":"if you're just doing development, you may not care which port your server listens on","width":544.1818182468414},{"text":"you'll just say hey give me any port that's currently unused","width":233.18181824684143},{"text":"here's how we can do this","width":103.18181824684143},{"text":"first of all when you call getaddressinfo if we're setting up a server, obviously we want to talk about localhost, that's NULL","width":365.18181824684143},{"text":"and just say I want port zero which is another way to say hey I'll be happy with any port","width":393.18181824684143},{"text":"well now we've got a problem though, we need to find out which port number we're actually listening on","width":482.18181824684143},{"text":"here's how we do this, there's something called getsockname","width":372.18181824684143},{"text":"sock of course stands for socket","width":154.18181824684143},{"text":"as opposed to things you wear on your feat","width":318.18181824684143},{"text":"this code kind of looks a little bit like the code you might have been writing before getaddressinfo existed","width":414.18181824684143},{"text":"we have these different structs for example...","width":253.18181824684143},{"text":"there's this sockaddr in which you can think of as a version or as a subclass of this other struct","width":846.1818182468414},{"text":"but because C doesn't support [something] we can't say hey this extends this other struct","width":510.18181824684143},{"text":"we have to forcibly typecast it","width":234.18181824684143},{"text":"and so there's all sorts of interesting gotchas, any days that you forcibly type stuff you might forget for example to put in the ampersand here","width":531.1818182468414},{"text":"so there's all sorts of gotchas","width":302.18181824684143},{"text":"I'm not going to ask this on an exam, I'm just pointing out, if you want to develop code that listens on any port, this is the way to do it","width":590.1818182468414},{"text":"you call getsockname on your socket","width":253.18181824684143},{"text":"and now we from that struct we can figure out which port","width":325.18181824684143},{"text":"there's just one little gotcha here","width":157.18181824684143},{"text":"if we try to use this value directly.. hahaha","width":255.18181824684143},{"text":"oooooooh we're going to be in a world of pain","width":268.18181824684143},{"text":"why?","width":205.18181824684143}],
  // Part 3
  [{"text":"one important thing we have to do to this particular value if we want to know the port number","width":608.1818182468414},{"text":"okay let's go back to the beginning of the lecture dodododo","width":243.18181824684143},{"text":"hello everybody welcome to Friday and don't forget what do you think htons means?","width":467.18181824684143},{"text":"network to host","width":123.18181824684143},{"text":"means?","width":43.18181824684143},{"text":"remember those little functions?","width":166.18181824684143},{"text":"yeah these C structures are the C structures to do with hey the bytes that we're trying to send to the network card","width":468.18181824684143},{"text":"the port number that is represented inside this struct is not really an integer like we like to think of it like an integer that's on our CPU","width":675.1818182468414},{"text":"so if we actually want the value of this entry, we've got to convert it","width":384.18181824684143},{"text":"so don't forget to call...","width":321.18181824684143},{"text":"network to host short ntohs","width":360.18181824684143},{"text":"and that will give us back an integer value that is actually the integer of the port","width":395.18181824684143},{"text":"so next time you hate your lab partner, just walk over and delete that code and watch them try to connect to the wrong port for the rest of the discussion section","width":650.1818182468414},{"text":"right so that's a little gotcha there, no one will tell you that you've forgotten to convert your integer to the right value","width":354.18181824684143},{"text":"other than the fact that you'll be trying to connect to the incorrect port","width":320.18181824684143},{"text":"the other thing you might want to do is find out who is connecting to your server","width":225.18181824684143},{"text":"here's how we can do that, remember this accept call, the thing that blocks waiting for a client to connect","width":493.18181824684143},{"text":"remember how it gives us back a new file descriptor?","width":281.18181824684143},{"text":"well we can now pass in a pointer to a struct","width":398.18181824684143},{"text":"very similar code here","width":113.18181824684143},{"text":"hey I've got this C structure, please fill it in and if you do that, it will tell you information about the remote client","width":541.1818182468414},{"text":"it won't tell you their login name but we can find out things like their IP address","width":324.18181824684143},{"text":"and their port number","width":77.18181824684143},{"text":"so for example, if you didn't like the remote client, why don't you send a thousand packets back to them and try and shut down their machine and send them a denial of service","width":525.1818182468414},{"text":"no don't do that for real unless you happen to be the US government","width":325.18181824684143},{"text":"okay so we've got that information and we now want to print something out","width":284.18181824684143},{"text":"here's how we can do it","width":87.18181824684143},{"text":"you can say okay turn this number to an ASCII value","width":364.18181824684143},{"text":"and that will turn it into an IP4 address like 127.0.0.1 we can see that","width":463.18181824684143},{"text":"and also with the port number, oh look here we go again, don't forget to convert that struct entry into a real number","width":478.18181824684143},{"text":"and then we'll print it out","width":74.18181824684143},{"text":"okay so let's see that as a demo","width":461.18181824684143},{"text":"okie dokie","width":166.18181824684143},{"text":"so I'll go to server2 let's see if this works okay right","width":683.1818182468414},{"text":"right so I've got my code now, it just picks an arbitrary port number that is available","width":530.1818182468414},{"text":"and let me try connecting to that","width":266.18181824684143},{"text":"well actually why don't you see if you can connect to that","width":177.18181824684143},{"text":"if anyone's got their laptop open you can telnet to 172.17.248.187","width":478.18181824684143},{"text":"and see if someone connects to that port number","width":473.18181824684143},{"text":"okay fantastic right","width":215.18181824684143},{"text":"and I got your address so now I can telnet back to you for example","width":537.1818182468414},{"text":"right let's see if you're running anything on port 22","width":277.18181824684143},{"text":"no you're not, okay so I can't try and hack into your machine today","width":289.18181824684143},{"text":"alright so that's in what you need for the next MP","width":252.18181824684143},{"text":"and to make your next multibillion dollar startup company","width":203.18181824684143},{"text":"of course this stuff underpins webservers, it underpins a little company called youtube, you might have heard of it, it started by an undergraduate here","width":481.18181824684143},{"text":"it started, well, what are we in siebel center","width":237.18181824684143},{"text":"networking, this is what it's all about, being able to connect multiple machines together","width":266.18181824684143},{"text":"and we've seen the basic socket calls that do all of this","width":537.1818182468414},{"text":"so for the remaining part of the lecture, let's say goodbye to networking and talk about a different systems programming topic","width":564.1818182468414},{"text":"are you ready?","width":79.18181824684143},{"text":"right, page 2!","width":241.18181824684143},{"text":"okay so today a couple of quick comments","width":233.18181824684143},{"text":"yes we have a quiz on monday","width":151.18181824684143},{"text":"it's going to be topics that we haven't talked about for a while","width":513.1818182468414},{"text":"remember virtual memory?","width":166.18181824684143},{"text":"do you remember page tables?","width":114.18181824684143},{"text":"translation look aside buffer? no? okay well don't worry now will be a good time to learn","width":334.18181824684143},{"text":"I will send a practice quiz in the near future","width":393.18181824684143},{"text":"remember pipes?","width":131.18181824684143},{"text":"do you remember how to use fseek, ftell, fpause? and finally we got the dining philosophers concurrent problem and also the reader writer concurrency problem","width":690.1818182468414},{"text":"so they'll be in it too okay so expect that quiz on Monday in lecture","width":485.18181824684143},{"text":"any questions?","width":819.1818182468414},{"text":"alright then so let's talk about a new topic","width":810.1818182468414},{"text":"scheduling! you already know as a student a lot about scheduling","width":479.18181824684143},{"text":"probably the scheduling algorithm that you're most familiar with is called earliest deadline first","width":545.1818182468414},{"text":"yes?","width":120.18181824684143},{"text":"right? my chemistry home is due and its due in 10 minutes oh no!","width":279.18181824684143},{"text":"okay so this is a problem of just how efficient can we be?","width":428.18181824684143},{"text":"can we use our CPU resources and other system resources to get as much work done as possible?","width":700.1818182468414},{"text":"well it turns out of course that earliest deadline first isn't actually the most efficient algorithm","width":374.18181824684143},{"text":"because we might spend a lot of time flipping from one piece of work to another piece of work","width":390.18181824684143},{"text":"and so we actually have addition latency involved with these context switches","width":493.18181824684143},{"text":"and with scheduling all of this work","width":183.18181824684143},{"text":"so for example, if you find yourself constantly updating your calendar to say oh I'm going to do this work here and this work here","width":337.18181824684143},{"text":"you've chosen an inefficient scheduling algorithm","width":287.18181824684143}],
  // Part 4
  [{"text":"so this is a non-trivial problem. we got things we wanna run inside our machine which are very urgent","width":590.1818182468414},{"text":"we got say mouse movements to update, things on screen to change","width":483.18181824684143},{"text":"we've got things are not so urgent but requires a lot of cpu a lot of disk","width":336.18181824684143},{"text":"so this will like batch jobs where we dont necessarily need them to be quite so responsive, but we want to schedule them so that they finish within a certain amount of time","width":877.1818182468414},{"text":"so these basic questions lead to a very large amount of mathematical analysis and experimental analysis as we try different scheduling algorithms and we try to find ways to make our system have a highest performance as possible","width":1104.1818182468414},{"text":"and this is non-trivial, and if you get it wrong, people dont like you programs, say, hey, this java thing sucks","width":667.1818182468414},{"text":"or hey this machine is no good for processing audio. i keep getting dropouts because my process isnt given enough cpu time when i need it","width":858.1818182468414},{"text":"or hey my scheduler just crashed my car","width":373.18181824684143},{"text":"because it didnt give enough cpu time to the neural network that decides whether to turn left or right","width":417.18181824684143},{"text":"so scheduling turns out to be a critical part of the system","width":316.18181824684143},{"text":"i'm going to look at it in terms of three different scheduling algorithms, ","width":283.18181824684143},{"text":"and also, just to give you an introduction to some of the terms of how we might actually compare different schedulers","width":570.1818182468414},{"text":"alright so lets define a few terms","width":447.18181824684143},{"text":"first of all, turn around time","width":342.18181824684143},{"text":"what is 5+11?","width":203.18181824684143},{"text":"16","width":36.18181824684143},{"text":"see, those about 2 second delay, when I ask the question, when i demanded the response, the completion of the work, and you actually give me the complete response","width":613.1818182468414},{"text":"thats turnaround time","width":77.18181824684143},{"text":"the time between when someone says hey, heres your chemistry homework, and you actually finish it. ","width":433.18181824684143},{"text":"ok, thats turnaround time, theres pretty obvious meaning, theres nothing special about it","width":908.1818182468414},{"text":"waiting time, so well define this as the total time that a job is able to run but is not schuduled","width":2189.1818182468414},{"text":"in other words, if you got your chemistry homework, hey give me another subject. ","width":338.18181824684143},{"text":"anybody have other, what homework do you have right now?","width":247.18181824684143},{"text":"stats","width":82.18181824684143},{"text":"ok, heres this stats homework, right, its on your desk, its ready to go, but you dont get to it because you are inside a cs 241 lecture","width":434.18181824684143},{"text":"ok, theres part of waiting time of this job, of this homework","width":308.18181824684143},{"text":"later you do some of it, but then you decide to go out with lunch with you dog","width":462.18181824684143},{"text":"or something. so again, this is more waiting time for this job. so if we want to compare between different scheduling algorithms, like the lunch first scheduling algorithm, as apposed to chemis","width":803.1818182468414},{"text":"right, we can talk about the total amount of waiting time this homework is done","width":325.18181824684143},{"text":"we can exclude tho, the time you actually writing on this","width":286.18181824684143},{"text":"so honestly the waiting time we'd like to be as small as possible ","width":400.18181824684143},{"text":"right, what about the response time? okay so heres a little difference between response time and turnaround time","width":453.18181824684143},{"text":"remember, the turnaround was basically the difference between the end and when you actually first submited it when you first knew about that homework","width":814.1818182468414},{"text":"the responsible time, is the time to the very first response","width":439.18181824684143},{"text":"so if it was your chemistry homework, it might be ok, you dont submit the whole thing yet, just submit the answer to the question 1a. ","width":772.1818182468414},{"text":"so you dont need to finish it, you just need to start producing or showing some output","width":386.18181824684143},{"text":"from your job. so if you going to run a very long job, we dont care when you actually finish it, we care about  when you actually starts it, able to give its first response. ","width":703.1818182468414},{"text":"first result","width":102.18181824684143},{"text":"so thats just a little gocha","width":97.18181824684143},{"text":"response time is not the whole time, its the time required to generate the first output","width":1433.1818182468414},{"text":"then we might care about throughput","width":224.18181824684143},{"text":"throughput is the number of homeworks that you can do each week, no you dont care about that, okay fair enough","width":703.1818182468414},{"text":"throughput we care about the number of jobs that we can complete. if your system was always swapping between bit of this hw, bit of that homework, your brain get so fried by thursday you say huh, if we get this I'm going to choose an","width":1095.1818182468414},{"text":"easier major, right","width":143.18181824684143},{"text":"umm so your throughput will go down","width":278.18181824684143},{"text":"you haven't chose a good scheduling algorithm","width":281.18181824684143},{"text":"so throughput we care about the number of jobs we complete","width":605.1818182468414},{"text":"in some unit of time","width":310.18181824684143},{"text":"latency we can define as the overhead of our scheduler that leads to delays or additional overhead of this scheduler that slows down our ability to actually do useful work","width":1833.1818182468414},{"text":"and then starvation","width":271.18181824684143},{"text":"right, starvation on your chemistry homework will probably get you an F on your chemistry homework ","width":358.18181824684143},{"text":"how could we get starvation? how could a scheduler generate a starvation","width":717.1818182468414},{"text":"you forget about the job","width":65.18181824684143},{"text":"ok","width":51.18181824684143},{"text":"yes thats not a very good scheduler ","width":176.18181824684143},{"text":"i dont do homework, ok","width":130.18181824684143},{"text":"what else? thank you! ya! so you always do your cs241 homework and you never do your chemistry homework or your stats homework","width":992.1818182468414},{"text":"so if you have a priority system when you  always do high priority stuff","width":285.18181824684143},{"text":"or you only do the homework you like, or you always do the easiest hoemwork","width":495.18181824684143},{"text":"the shortest homework","width":131.18181824684143},{"text":"that very project that is due for the woodworking 101 is never gonna get done","width":386.18181824684143}],
  // Part 5
  [{"text":"so yes you can see starvation with this systems","width":217.18181824684143},{"text":"so we gonna look at these terms and we are going to umm analyze different schedulers","width":737.1818182468414},{"text":"right, so here's a few common schedulers and next week on wednesday we are going to look at these in detail and run some examples through them","width":732.1818182468414},{"text":"fcfs, right, when i call it fcfs because in literature we see these things so commonly shortened because its a bit of mouthful","width":783.1818182468414},{"text":"first come first served","width":343.18181824684143},{"text":"so this is the mcdonalds scheduler","width":243.18181824684143},{"text":"you arrive first, i serve you first. its a queue, right","width":247.18181824684143},{"text":"its a simple queue. you put your homeworks in the order that they arrive. ","width":511.18181824684143},{"text":"is that a good thing?","width":290.18181824684143},{"text":"uhh it depends, we gonna have to think about whether these schedulers good for batched jobs or for our responsive needs because we actually have our user that wants to see progress on their work","width":1015.1818182468414},{"text":"so we have first come first served","width":218.18181824684143},{"text":"in other words , its just a queue","width":443.18181824684143},{"text":"right, the next scheduling algorithm, its fantastic, here it is","width":674.1818182468414},{"text":"shortest job first","width":430.18181824684143},{"text":"now, we can use this, we can analyze our scheduler mathematically","width":320.18181824684143},{"text":"in practice you might run into a bit of problem if you try to actually implement shortest job first. whats the problem?","width":683.1818182468414},{"text":"yeah, how do you know? so what you need to do is go out and buy a crystal ball","width":306.18181824684143},{"text":"and become clairvoyant and steals some tacheons from physics lab, and simply know in the future, how long your job is going to run","width":790.1818182468414},{"text":"now ok some specialized circumstances, you might be able to do that. for example, if you ran exactly the same program yesterday, and you are running the same code, with the same kind of data today, you can be pretty confident that your job is gonna take two hours to run","width":946.1818182468414},{"text":"but in a general system that is not true. we dont know how long our jobs gonna run","width":564.1818182468414},{"text":"but we can still at least analyze this. if we have some fake data, say, job1 takes 10 minutes to complete, or 2 hours to complete, we can still do some analysis. so shortest job first in practice ... [cant hear] difficult to implement because you dont know how long it is","width":1327.1818182468414},{"text":"right","width":44.18181824684143},{"text":"ahh haa, this is the pirate one, its the round robin","width":714.1818182468414},{"text":"now this might sound like a kind of quaint english thing and we dance around and jib with some medieval music ","width":780.1818182468414},{"text":"that would be an incorrect answer","width":318.18181824684143},{"text":"round robin, heres the idea, is that all of you are important, so im gonna spend a bit of time with each of you","width":590.1818182468414},{"text":"alright i set my clock, i talk to you a minute, and bye","width":200.18181824684143},{"text":"i talk to you a minute, and bye, i talk to you a minute, and bye, now of course i'm the cpu, right, we are talking about the cpu giving resource to each of these jobs, so imagine like if i got all of these homework, all of these stuff that my cpu can be doing, i'm going through all of these processes, and they got the cpu for a minute, and lets say, you're the last job, yes well we gonna go around again","width":1928.1818182468414},{"text":"ok","width":73.18181824684143},{"text":"so you can see if this say for fun all of these jobs has three minutes worth of cpu to complete, ","width":709.1818182468414},{"text":"ok","width":138.18181824684143},{"text":"none of them complete within three mintues, ok i'm gonna keep going through. these got a little slot of time, so thats why we call it round robin. now it turns out that this homework, half way through, has some problem on it that cant be completed, without additional information from the professor","width":1446.1818182468414},{"text":"so the cpu say, you're blocked, you're waiting on a semaphore, you're waiting on a callback function that, so i'll skip you. you are not actually runnable at this point","width":551.1818182468414},{"text":"so our scheduler only needs to run jobs which are not blocked. ","width":310.18181824684143},{"text":"so for example, if you just wrote you server code and your calling accept, we dont need to spend any cpu time on that process. its blocked, theres nothing for it to compute. ","width":800.1818182468414},{"text":"anyway, thats round robin","width":437.18181824684143},{"text":"so the idea is that we have a little piece of time and you get it and you get the cpu for certain amount of time","width":980.1818182468414},{"text":"of course it might be that if i give you thirty seconds, hey you're done already","width":370.18181824684143},{"text":"nothing more for you to do. you've finished copying data to the disk, you just called accept, you just called mutex lock and you're waiting for it to finish. ","width":581.1818182468414},{"text":"so your process might give up the cpu before you minute is up","width":414.18181824684143},{"text":"before you time quantum expires, but if you dont, ha, too bad for you, i'm taking the cpu away from you, and i'm assigning it to a different process","width":843.1818182468414},{"text":"so your little process is now stuck in time","width":231.18181824684143},{"text":"that homework is half finished because the cpu is now working on a different job. ","width":938.1818182468414},{"text":"right, preemptive scheduling. ok, this is easy, if our jobs, if our task have different priorities, hey, system programs is really important to me, and i'm going to get this done before anything else, then we can use that as a scheduling decision","width":1136.1818182468414},{"text":"so lets go back to round robin for a moment, and say how long should our time quantum to be? all that tradeoffs","width":901.1818182468414},{"text":"ok, lets turn that into a homework problem again. suppose that we work on this problem for ten seconds, and then this homework for 10 seconds, and then this homework with 10 seconds, and then this homework has 10 seconds ","width":954.1818182468414},{"text":"what's the disadvantage? yes?","width":376.18181824684143},{"text":"","width":128.18181824684143},{"text":"thank you! i'm doing a lot of context switch. I'm going to spend a lot of time, actual woke up time, real time, just switching one problem to the next problem","width":601.1818182468414},{"text":"so much so and now i've introduced some latency into the system, so much so that um my throughput is no longer good, its because actual cpu time is burned is spent doing all these context switches","width":1050.1818182468414},{"text":"okay, so lets go to the other extreme than. I'm going to work on this homework for a day","width":465.18181824684143},{"text":"and then i'm going to work on another homework for another day","width":138.18181824684143},{"text":"and the next day, so i've made my time quantum very very large now","width":230.18181824684143}],
  // Part 6
  [{"text":"what's wrong with that?","width":526.1818182468414},{"text":"ok, if a process runs forever, or one homework is really hard, you taking cs 473, you think 241 is hard, ha! wait till you take 473","width":559.1818182468414},{"text":"right, or take 373. anyway, the three hundred class, now, the i may not get to some short jobs quickly, right? if this job over here is just Hey, send all those email, they reply, you can have to wait a long time, even though it's gonna take a minute for you to complete this job, i've got a very slow quantum","width":1641.1818182468414},{"text":"so those are two extremes, I got one way where i got to introduce a lot of overhead, because of the context switch, another, where short jobs are now waiting for a very very long time, to be accessed","width":806.1818182468414},{"text":"so what do we do? on a real system. on, say a laptop, or on your linux. where for starters i'm gonna talk about linux just a sec because linux has actually got something better","width":752.1818182468414},{"text":"we gotta choose an appropriate quantum","width":153.18181824684143},{"text":"and you will see times, typical times of ten to hendred milliseconds","width":519.1818182468414},{"text":"in other words, a little hardware clock goes of says, hey, your time's up","width":313.18181824684143},{"text":"and interrupts the cpu, and kernel gets involved and say \"hey, time to move onto a different job\"","width":332.18181824684143},{"text":"why do you think we chose ten to a hundred milliseconds","width":846.1818182468414},{"text":"its empirical. yes, so in what factors, what factors influence that decision","width":840.1818182468414},{"text":"ok we got a lot of things running in parallel, we've got interactive jobs, you typing on a terminal, for example, and as you type, you want the letters to appear. if we context switch, if we go off to a different problem, many times a second, you won't know. people won't know that they are sharing the cpu with multiple jobs","width":1337.1818182468414},{"text":"right? you could be logging into a server, or you could be typing in a terminal, and it looks like \"hey, the system is mine\"","width":378.18181824684143},{"text":"the cpu is all mine to play with, and if we keep swapping it around fast enough, no one except for the people taking cs241 will know","width":574.1818182468414},{"text":"no one will know that actually we keep swapping the cpu ","width":212.18181824684143},{"text":"so that's the first idea to why we choose to this kind of time","width":258.18181824684143},{"text":"which is its not so short that we have a lot of overhead, but its short enough so that our system appears to be responsive","width":558.1818182468414},{"text":"when we interact with it","width":189.18181824684143},{"text":"these days you might see even faster times as well","width":217.18181824684143},{"text":"right, and finally, what does linux do today, it uses something called ... oops ... a completely fair scheduler","width":1130.1818182468414},{"text":"ok","width":97.18181824684143},{"text":"some comments about this, one is, huh, there is no such things as someone could be completely fair. ","width":398.18181824684143},{"text":"you ask any two-year-old","width":200.18181824684143},{"text":"alternatively, it's completely fair for some definition of completely fair ","width":412.18181824684143},{"text":"final thing is, this scheduler was actually stolen from network theory. ","width":298.18181824684143},{"text":"the ideas behind it were generated by understanding how to schedule packets on the network ","width":573.1818182468414},{"text":"and that's what we talked about it today","width":122.18181824684143},{"text":"with that, thank you very much. have a wonderful weekend, i will see you on monday for the next mini exam! thank you very much. Come down to see me if you have any questions","width":875.1818182468414}],

  // Start Lecture Video 25 (QUIZ NO CAPTIONS)

  // Start Lecture Video 26
  // Part 0
  [{"text":"Ok, class welcome class to CS 241","width":324},{"text":"First announcement","width":101},{"text":"Yes, CS 241 is a lot of work but you may have noticed there are seniors still walking around in this building","width":397},{"text":"They survived CS 241 and you can too","width":255},{"text":"Why not get a T shirt","width":171},{"text":"Yes I appreciate its a lot of work","width":97},{"text":"But this is what kind of sets you apart from other students in other universities","width":289},{"text":"By the end of this course you really are going to know your stuff ","width":147},{"text":"And you really are going to change the world","width":122},{"text":"Ok so here's what we're going to do today","width":119},{"text":"We're going to talk about scheduling","width":154},{"text":"We're going to look at some simple different ideas about how to do different schedules","width":320},{"text":"And similar effects it has on things like the waiting time","width":217},{"text":"And exactly when each schedule is is uh uh exactly when each process is scheduled","width":401},{"text":"Right so let's have a look at this and in a moment","width":126},{"text":"I'm going to ask you to calculate this","width":227},{"text":"So as this is a model of - we're going to uhm be clairvoyant - we we we know when","width":471},{"text":"as a design we know when our processes are going to be ready to run","width":347},{"text":"And uh we've got four processes, we've labelled them one two three four","width":223},{"text":"We can say hey process four doesn't exist at the beginning","width":195},{"text":"or it's not ready to run","width":63},{"text":"Perhaps it's waiting on a condition variable, the process is waiting for some data to revive","width":337},{"text":"But anyway we don't need to consider it in the very beginning of our model here","width":360},{"text":"Uhm and then these different processes have different amounts of execution time they need in order to complete","width":568},{"text":"So for example in process one takes thirty milliseconds","width":216},{"text":"So we're going to look at our little simulation in ten millisecond blocks and see","width":344},{"text":"which process is using the CPU for each block of time","width":331},{"text":"Now here's our different scheduling approaches we've got","width":256},{"text":"Okay","width":52},{"text":"We've got something called round robin","width":281},{"text":"So with round robin what we do is we try to be fair and say","width":330},{"text":"Well you can have the CPU for a certain block of time","width":300},{"text":"In this little example, 10 milliseconds","width":135},{"text":"And after 10 milliseconds the alarm goes off","width":138},{"text":"Ding! A little hardware clock goes off","width":112},{"text":"And that causes an interrupt","width":131},{"text":"the interrupt then causes the CPU to execute some code inside the kernel","width":220},{"text":"The code inside the kernel says AHA you're out of time","width":245},{"text":"And now I'm going to give the CPU to a different process","width":252},{"text":"So the idea is we're going to do this every 10 milliseconds","width":391},{"text":"Uh we'll try to be fair","width":63},{"text":"So this means that if there's a long running job","width":162},{"text":"It shouldn't matter too much since after two milliseconds we're going to give the CPU to someone else","width":282},{"text":"And they get a chance to execute","width":150},{"text":"Okay so that's round robin","width":136},{"text":"We'll work that out in a moment","width":103},{"text":"And you'll notice in this little example","width":171},{"text":"I've actually got three processes","width":105},{"text":"All ready to go at the very beginning","width":180},{"text":"So what we'll say is the order in which they ask if you're ready","width":288},{"text":"Is just dependent on how we've written them done","width":105},{"text":"So process 1 we're going to run before process 2 et cetera et cetera et cetera ","width":330},{"text":"And then the next we're going to calculate is shortest job first","width":360},{"text":"Meaning we actually know in advance these timings","width":300},{"text":"And we give this to the operating system","width":101},{"text":"To the scheduler","width":64},{"text":"So it can decide when to run them","width":404},{"text":"A \"I gotcha here\" is remember you can't actually run process 4 at the beginning of time because it doesn't exist yet","width":346},{"text":"It only comes into play, it only enters the stage after 10 milliseconds","width":329},{"text":"Alright so that's not a choice at the very beginning","width":166},{"text":"And then we have first come first serve","width":218},{"text":"This is just a simple queue","width":228},{"text":"Whoever arrives first gets to eat first","width":224},{"text":"And they continue to eat, to use the CPU until they are finished","width":302},{"text":"So it doesn't matter how long they take","width":176},{"text":"So that's first come first serve, FCFS","width":244},{"text":"That sounds pretty fair to me but we'll see if there's a problem with it later","width":290},{"text":"Now we can make these a little more complicated","width":164},{"text":"We can talk about how to preemptive shortest job first","width":296},{"text":"And the idea here is if a new job arrives","width":312},{"text":"In other words appears on stage ready to go","width":199},{"text":"Then if it's shorter we'll run that instead","width":325},{"text":"Now, one thing to look out for shortest job does not mean remaining time","width":273},{"text":"It means the actual original specified time","width":221},{"text":"So if you've only got ten milliseconds to run on a thirty milliseconds job","width":256},{"text":"","width":2},{"text":"It still compares thirty milliseconds","width":83},{"text":"Not the remaining time, it's the actual total time","width":170},{"text":"When we talk about shortest job first","width":130},{"text":"And then the other variant is preemptive priority where","width":206},{"text":"instead of thinking about the execution time ","width":151},{"text":"We have some sort of priority assigned to each process","width":226},{"text":"So for example if this was controlling a lunar lander","width":248},{"text":"Controlling the rockets is probably more important than say running the -inaudible- activity right now","width":455},{"text":"We need to make sure that we make immediate course corrections","width":338},{"text":"So uh, in this, we've got higher value equals a higher priority","width":269},{"text":"And if a higher priority job arrives on the scene","width":162},{"text":"Ready to go","width":52},{"text":"Then we will give the CPU immediately to that job","width":250},{"text":"So that's the process we're going to run in a moment","width":254},{"text":"Let's go back to these questions","width":90},{"text":"So when might a process be in the ready queue","width":269},{"text":"Let's think about processes you've programming, you've written","width":222},{"text":"Why might it be in a ready state?","width":207},{"text":"Not running on the CPU","width":114},{"text":"But in a ready state","width":143},{"text":"What could have happened?","width":413},{"text":"Yes!","width":226},{"text":"Okay so there's more than one process who wants to run","width":169},{"text":"And someone else has currently got the CPU","width":206},{"text":"Give me something that might have happened to your process","width":126},{"text":"That makes the mediates become ready","width":344},{"text":"Ok, thank you. It's waiting for say disk IO, or say network IO","width":349},{"text":"Perhaps you've called read","width":118},{"text":"Perhaps you've called accept","width":158},{"text":"And now you're waiting for a client to connect to your web server","width":238},{"text":"To your chat server","width":51},{"text":"To your database server","width":86},{"text":"That thread of execution cannot run yet until the operating system says","width":279},{"text":"Okay, yes! I've got your data, off you go","width":165},{"text":"Okay","width":118},{"text":"What else?","width":1023},{"text":"No ideas?","width":263},{"text":"Yes!","width":38},{"text":"Let's say you call sleep and your process sleeps for five seconds","width":332},{"text":"After five seconds your operating system says","width":120},{"text":"Oh, okay, right, fine","width":90},{"text":"Time to wake this process up","width":77},{"text":"I'll let this process continue, I'll let that thread continue","width":321},{"text":"Similarly if you had a call with a timeout","width":244},{"text":"Alright, there's going to be time when your processor stops","width":389},{"text":"A zombie is not ready to run","width":232},{"text":"A zombie can't run, it's finished","width":107},{"text":"It's still taking up space in memory","width":155},{"text":"Inside the processor control block","width":86},{"text":"because we have things like it's exit status","width":256}],
  // Part 1
  [{"text":"Yep","width":213},{"text":"Okay so a thread has called condition wait","width":171},{"text":"Is not yet ready to run but if someone then broadcasts it","width":273},{"text":"It goes into the ready state","width":147},{"text":"So if we wanted we could draw a state diagram that says","width":320},{"text":"Look our processes can be in these different state","width":123},{"text":"It could have been just started, it be running on the CPU, it could be in this ready state","width":275},{"text":"And once it's in the ready state it's up to the kernel who gets to play and when","width":362},{"text":"And that's what this scheduling is all about","width":204},{"text":"Alright so we can define something called wait time","width":464},{"text":"And uh I can write a little formula for it","width":451},{"text":"Where's my notes","width":167},{"text":"Oh yeah","width":804},{"text":"So the wait time is the total amount of time spent in the ready state","width":323},{"text":"Waiting to run","width":370},{"text":"So uh if we know the completion time and the start time","width":458},{"text":"That gives us the beginning and end","width":147},{"text":"Some of that time was spent actually doing useful stuff","width":157},{"text":"Actually executing","width":75},{"text":"So if we subtract that stuff we can actually discover how much time our process was unable to continue, it was in the wait state","width":456},{"text":"So I can say that the total wait is the uhm completion time so","width":935},{"text":"Time, the actual wall clock time when we finished","width":374},{"text":"Minus when the process first arrived","width":560},{"text":"Minus - so that gives us the time interval","width":207},{"text":"And the other time we can subtract is the time we spent executing","width":353},{"text":"So the duration that we spent executing","width":182},{"text":"So if we subtract off those two","width":530},{"text":"We get a certain amount of wait time","width":56},{"text":"That might be useful in calculating the wait time in these examples","width":557},{"text":"So it's not the first uh time that we have to wait because a process might go back into the waiting state","width":369},{"text":"For example","width":50},{"text":"If a process with a higher priority and you are running a priority based scheduler","width":439},{"text":"Your process might be pulled away from the CPU and the CPU is assigned to someone else","width":308},{"text":"To a different process","width":103},{"text":"Okay, so we've done that","width":137},{"text":"So it's not the first waiting time","width":115},{"text":"It's the total waiting time","width":464},{"text":"Okay so just occasionally, maybe in these examples","width":291},{"text":"I haven't calculated them today","width":83},{"text":"You have a tie break","width":74},{"text":"For example your process might be ready to run again after round robin","width":329},{"text":"And a new process arrives on the scene ready to go","width":271},{"text":"Which one should you use","width":71},{"text":"Well we need some sort of tie break decision","width":204},{"text":"And in which case we might to choose the job that arrived the earliest on the scene","width":509},{"text":"So now we want the earliest job to complete","width":142},{"text":"So let's see if any of these examples require that tie break situation","width":402},{"text":"Okay soooooooo","width":196},{"text":"Here's five little examples","width":115},{"text":"I'll get started and then you get the next one","width":173},{"text":"So let's look at this round robin","width":129},{"text":"So round robin remember","width":146},{"text":"It's like a little song, each person gets to sing a little bit","width":170},{"text":"So process 1 gets to use the CPU for the first 10 milliseconds","width":342},{"text":"But then our hardware interrupt goes off and the kernel says","width":181},{"text":"HAHA not for you anymore","width":98},{"text":"And then process 2 has been waiting","width":348},{"text":"Also process 4 arrives on the scene","width":212},{"text":"But we're going to schedule process 2 because it was there first","width":237},{"text":"Alright","width":18},{"text":"10 milliseconds later we switch our process 2 and process 3 gets to use the CPU","width":339},{"text":"Another 10 milliseconds later our hardware clock goes off","width":199},{"text":"And finally process 4 gets to play","width":447},{"text":"And guess what happens next?","width":197},{"text":"We go around again!","width":65},{"text":"So process 1 and then process 2","width":189},{"text":"Now at this point process 2 is finished","width":236},{"text":"It's used its 20 milliseconds up","width":219},{"text":"It's finished calculating whatever it needed to calculated","width":186},{"text":"Then it's 3","width":227},{"text":"Process 4 you're already done ","width":148},{"text":"So we're back to process 1","width":463},{"text":"So now we could calculate the wait time and if we wish the average wait time","width":358},{"text":"So for process 1 how long was it waiting?","width":284},{"text":"I could count that 1 2 3 4 5","width":275},{"text":"It was waiting 50 milliseconds","width":242},{"text":"And process 2, it had to wait uhm, 1 2 3 4 - another 40 milliseconds","width":785},{"text":"Process 3, from my notes, looks like fifty","width":474},{"text":"And process 4 will be uh thirty milliseconds","width":360},{"text":"So I can add that up to get the total wait time and then divide by the number of processes to get an average","width":871},{"text":"Okay","width":46},{"text":"So that was me working through another example","width":105},{"text":"Now it's your time to play","width":628},{"text":"20 milliseconds? Oh quote possibly yesI'm sorry, oh quite possibly, ","width":217},{"text":"Because yeah it arrived at 10 milliseconds","width":227},{"text":"So it had uhm to wait in additional 20 milliseconds before being scheduled I think","width":720},{"text":"Right so","width":486},{"text":"Perhaps its not obvious but these are the end times of each block","width":297},{"text":"So this one goes from 10 to 20 and then 20 to 30, et cetera et cetera et cetera ","width":352},{"text":"Okay","width":82},{"text":"Right","width":38},{"text":"Sooooo","width":69},{"text":"Now is your chance to get cozy with these different scheduling algorithms","width":290},{"text":"And to run through these little examples","width":171},{"text":"It shouldn't take you very long","width":172},{"text":"Any questions?","width":156},{"text":"Okay, have a go.","width":256}],
  // Part 2
  [{"text":"Okay so with the shortest job first","width":9064},{"text":"We're not interrupting the existing jobs","width":162},{"text":"So even though process 4 arrives and is ready to go","width":238},{"text":"And is 10 milliseconds","width":95},{"text":"We let jobs run to completion","width":229},{"text":"Alright so 4 before here has to wait an extra 10 milliseconds before it can run","width":422},{"text":"There is no preemption","width":194},{"text":"Okay that's what we're going to do down here","width":111},{"text":"When we do preemptive shortest job first","width":170},{"text":"When we actually take the CPU away from a process","width":369},{"text":"In the preemptive version yes we start with P2","width":260},{"text":"But then P4 arrives on the scene, the new kid on the block","width":249},{"text":"Alright and so P4, off you go","width":177},{"text":"P4 runs to completion and now P2 can be scheduled back","width":289},{"text":"It beats P3, it arrived earlier","width":482},{"text":"And then P3 runs","width":91},{"text":"And then finally P1 has been waiting all of this time and it gets to run","width":488},{"text":"Alright K","width":157},{"text":"First come first served","width":100},{"text":"Couldn't be easier, right","width":82},{"text":"It just simply write down the order in which we wrote them down here","width":212},{"text":"No brain power required whatsoever","width":112},{"text":"And then the last version we are going to look down here is preemptive priority","width":447},{"text":"Yep","width":508},{"text":"It's not about the remaining time ","width":113},{"text":"It's about the total time of the job","width":188},{"text":"It's not remaining shortest job","width":145},{"text":"It's about the total","width":320},{"text":"So don't do any subtraction stuff","width":161},{"text":"It's a common gotcha","width":404},{"text":"Alright so and the priority in this example saying a higher priority number is more important","width":380},{"text":"So process 4 is the highest priority but it's not around at the beginning of time","width":263},{"text":"Instead process 3 gets to run","width":117},{"text":"And then it gets interrupted","width":181},{"text":"Process 4 comes along and says I need the CPU and I need it more than you","width":251},{"text":"So process 4 finishes so we go back to process 3","width":276},{"text":"","width":2},{"text":"Process 3 finishes","width":63},{"text":"And then we go back to process 2","width":132},{"text":"Process 2 finishes","width":70},{"text":"And finally process 1","width":739},{"text":"So we could calculate some wait times","width":411},{"text":"This one is 160 over 40","width":336},{"text":"That gives us an average wait time of 40 milliseconds","width":473},{"text":"Shortest job first: the average wait time turns out to be 20 milliseconds","width":954},{"text":"First come first served: average wait time 37.5 ms","width":559},{"text":"Preemptive shortest job is 22.5 ms","width":966},{"text":"The last one is also 22.5 ms","width":732},{"text":"Alright so we don't care that much about the figures","width":194},{"text":"But what we do care about the following","width":254},{"text":"Firstly there is a difference in ordering","width":171},{"text":"And yes this was just a paper and pencil exercise","width":159},{"text":"But it kind of shows you depending on how much you care about a particular job","width":296},{"text":"You might be in the ready queue for a long time, you might be waiting for a long time","width":262},{"text":"Secondly we have a clear winner here","width":214},{"text":"The shortest job first minimizes the wait time in this example","width":487},{"text":"And uh in general as well","width":264},{"text":"And if you think about that, that kind of makes sense","width":183},{"text":"The long running job and I put that first, all of my other processes are going to have to wait for that length of time","width":472},{"text":"Therefore I should put the very longest job at the very end of my queue","width":327},{"text":"","width":2},{"text":"And I can just prove that recursively therefore that my average wait time must be minimal if I put my shortest jobs at the beginning of the queue","width":578},{"text":"And I order them by total execution time","width":275},{"text":"So if my idea of fairness, if my idea of an optimal system, was just in terms of how long my processes have to wait","width":537},{"text":"Then I would choose shortest job first","width":276},{"text":"There's a problem with that of course","width":140},{"text":"First of all we'd actually have to know how long our processes really do run for","width":334},{"text":"And that might call for a crystal ball","width":201},{"text":"Or at least an assumption about how my processes work today are exactly the same as how they worked yesterday","width":380},{"text":"And that's kind of stretching it about with real systems","width":559},{"text":"Our preemptive schedulers worked pretty well","width":187},{"text":"Of course they're more complicated","width":67},{"text":"We're going to have to write a kernel who is prepared to switch out a process and save it someway so that we can preempt and pull it out","width":522},{"text":"And replace it","width":257},{"text":"And our round robin actually has the worst wait time even though it was going to be pretty fair","width":576},{"text":"though we thought it was going to be*","width":64}],
  // Part 3
  [{"text":"So what about this?","width":206},{"text":"We've heard about starvation before where a process never gets to complete it's uh, it never gets to make any significant progress.","width":713},{"text":"Which scheduler could lead to starvation and how?","width":263},{"text":"Maybe there's more than one correct answer.","width":227},{"text":"Don't tell me know; tell your neighbors and see if you agree.","width":3496},{"text":"Okay, so uh, a student has let me know that my calculations are suspect so I probably am off by a quarter millisecond or so.","width":823},{"text":"So I apologize for that.","width":185},{"text":"Silly  numerical error.","width":92},{"text":"Okay so which ones can suffer from starvation?","width":461},{"text":"The second fourth and fifth.","width":66},{"text":"Shortest job first, yeah, so if you're getting text messages continuously you might never get to your chemistry homework.","width":1069},{"text":"So next time you don't fill out your chemistry homework, or CS 241 HW, keep sending yourself text messages.","width":259},{"text":"They're nice and short, you'll do them straight away.","width":170},{"text":"So shortest job first; we can set up a starvation by keep making short jobs and we'd never get to the long job.","width":590},{"text":"The other possibility is pre-emptive shortest job first.","width":306},{"text":"So again uhm I would never get to my long job if I keep submitting short jobs.","width":436},{"text":"And preemptive priority.","width":122},{"text":"Same idea","width":105},{"text":"If I keep having an urgent thing to do","width":213},{"text":"I might never get to schedule my low priority items","width":779},{"text":"Is there a problem? Yeah.","width":150},{"text":"We have to choose a tradeoff.","width":87},{"text":"We have to decide what we mean by fair.","width":211},{"text":"So which schedulers are appropriate for batch jobs?","width":235},{"text":"Of course the answer is It depends!","width":233},{"text":"By batch jobs we mean aren't interactive which are typically run for long periods of time without user interaction.","width":468},{"text":"They have all the data they want to process","width":92},{"text":"Maybe stuff out of files or network","width":252},{"text":"Do some analysis on that data","width":233},{"text":"So we might care about say earliest job finishing first or shortest job finishing first","width":330},{"text":"in which case we might choose a shortest job first scheduler","width":208},{"text":"We might care about seeing the results of all of our jobs","width":343},{"text":"And we are prepared to wait so we might choose round robin","width":438},{"text":"Uhm","width":109},{"text":"The other possibility is to, in a real system","width":422},{"text":"Suppose your job crashes or runs forever, has an infinite loop","width":670},{"text":"If there is no preemption","width":131},{"text":"if we don't forcibly remove that job from the CPU everything gets backed up","width":540},{"text":"So we have to careful if we're not going to preemptive running jobs","width":372},{"text":"Right","width":36},{"text":"So there isn't a simple answer for this batch jobs","width":190},{"text":"It depends on what your criteria are","width":187},{"text":"So what scheduler does Linux use?","width":90},{"text":"I mentioned it last lecture","width":261},{"text":"Yes! The completely fair scheduler.","width":203},{"text":"Which is a little bit of an oversell","width":620},{"text":"Alright so it's not completely fair","width":164},{"text":"But it is similar to round robin where we are prepared to interrupt a process","width":424},{"text":"Every 10 milliseconds or so","width":412},{"text":"But we're prepared to give an extended period of time to jobs which don't use all of their time quantum","width":348},{"text":"So for interactive programs, desktop programs, UI programs","width":351},{"text":"These tend to have very bursty needs of the CPU ","width":185},{"text":"Like OH QUICK the user touched something","width":101},{"text":"OH QUICK I need to read data on disk","width":112},{"text":"And they won't use it for 10 milliseconds","width":140},{"text":"They will only require a tiny bit of CPU","width":292},{"text":"Processing before we end up say sending it an event to the system","width":275},{"text":"Update the screen","width":43},{"text":"And we're done","width":33},{"text":"And we wait for the next user event","width":110},{"text":"So the completely fair scheduler says we'll remember that these processes didn't require a lot of CPU in the past","width":427},{"text":"So we'll prepare to give it a little bit of extended CPU in the immediate future","width":319},{"text":"So we'll try to make the system as responsible as possible","width":363},{"text":"K here's a classic problem in scheduling","width":142},{"text":"It's known as the convoy effect","width":271},{"text":"And we see this with the first come first served","width":403},{"text":"Scheduler","width":332},{"text":"And you can imagine a real system where I've got jobs which are very strongly CPU bound","width":388},{"text":"And other jobs other processes which are IO bound","width":553},{"text":"And if you branch in the queue going this way by first come first serve","width":522},{"text":"I might have a big job which comes","width":245},{"text":"I illustrate by drawing it a large size","width":255},{"text":"It's going to take a lot of CPU time to run","width":230},{"text":"And behind it I've got loads of little jobs which","width":335},{"text":"They don't take much CPU but they take some IO to do","width":270},{"text":"And then the classic description of the convoy effect","width":129},{"text":"Is we imagine this process uses the CPU for a long time","width":360},{"text":"Then just a little bit of IO","width":86},{"text":"And then repeats","width":647},{"text":"And here's the problem.","width":64},{"text":"These are the processes that start after this CPU heavy process","width":483},{"text":"They can't use the disk","width":256},{"text":"Or the IO","width":100},{"text":"They only need a tiny amount of CPU","width":162},{"text":"It's like going to McDonalds to grab some little ketchup packets or something","width":242},{"text":"And someone there is taking all the space","width":154},{"text":"\"I just need a little ketchup packet\"","width":187},{"text":"\"I'M SORRY WAIT YOUR TURN\"","width":216},{"text":"And so we have poor use of uh IO","width":333},{"text":"CPU usage is great. it uses the CPU 100% of the time","width":199},{"text":"Very efficient","width":101},{"text":"But these other jobs are stuck and uh","width":325},{"text":"So our disk utilization is pretty poor","width":189},{"text":"We could have had a better choice if we used something like round robin","width":284},{"text":"Where we let these little jobs jump in and let them use the CPU for small amounts of time","width":302},{"text":"And then they can actually get on with their disk IO","width":368},{"text":"Right","width":32},{"text":"The questions about threads","width":163},{"text":"I mean uh scheduling","width":256}],
  // Part 4
  [{"text":"Okay so we talk about this classically in terms of processes","width":460},{"text":"What a thread really is just a thread of execution","width":205},{"text":"Uh everything we've talked about processes applies to threads","width":330},{"text":"And uh you can actually set the uh scheduling if you wish uh in the pthread library","width":593},{"text":"And so for example there's a pthread call that allows you to say hey I want to use round robin scheduler","width":334},{"text":"Or hey I want to use first come first served","width":299},{"text":"So it's possible to set that as you create each thread","width":508},{"text":"Bear in mind","width":83},{"text":"If you set them first come first served","width":368},{"text":"Be careful","width":208},{"text":"because if a thread never finishes","width":839},{"text":"All the other threads","width":504},{"text":"wait forever","width":172},{"text":"wait an infinite amount of time","width":237},{"text":"Because we did first come first serve","width":113},{"text":"and you are at the front of the queue","width":105},{"text":"And you're saying","width":45},{"text":"Hah I'm going to take up this server forever","width":248},{"text":"MUAHAHAHAAH","width":115},{"text":"So that's just a little gotcha if you truly try to set the scheduling policy","width":522},{"text":"Uh so another quick tidbit there's this little command called nice","width":381},{"text":"People would like their commands to be nice","width":144},{"text":"So what you can do is Linux changed the priority of your process by nice-ing it","width":575},{"text":"And uh mere mortals, non root people, can increase their priority number which decreases their priority","width":686},{"text":"Which makes it less important","width":299},{"text":"And so you can say Okay I have a long running job","width":188},{"text":"Its going to take a lot of CPU","width":81},{"text":"But only run if there's nothing else to do","width":127},{"text":"In which case you might call nice","width":141},{"text":"As part of that","width":132},{"text":"If you are root you can nice the other way","width":169},{"text":"You can actually make things more important and higher priority","width":344},{"text":"But you probably won't need nice unless you're trying to run uh background computational jobs","width":315},{"text":"And try to make it so they don't interfere with your UI","width":262},{"text":"So that's enough about scheduling","width":124},{"text":"Let's have a look at page tables","width":293},{"text":"So we've been playing a lot with TCP packets","width":235},{"text":"And uhm most of the internet uses TCP","width":275},{"text":"However uh we did mention there's another thing called UDP","width":537},{"text":"Which is packet based","width":77},{"text":"It's not a stream","width":65},{"text":"We simply send our telegraph or datagram off and hope it gets to the other side","width":490},{"text":"Let's have a quick look how we could make a UDP server","width":206},{"text":"And see how it's different from a TCP server","width":223},{"text":"Okay so uhm if we want to fill up a UDP server","width":406},{"text":"Listen on a particular port","width":211},{"text":"We'll set up our hints as usual","width":93},{"text":"Oh good we've set it to zero","width":175},{"text":"And today we want to use IPv6","width":203},{"text":"128 bit addressing","width":151},{"text":"So how do we specify that","width":112},{"text":"Well for our family we don't want address family INET","width":316},{"text":"We want INET6 for our socket","width":172},{"text":"","width":2},{"text":"We don't want sockstream","width":67},{"text":"We're not trying to make a streaming interface here","width":162},{"text":"We just want to send these little datagrams","width":159},{"text":"So we have SOCK_DGRAM","width":302},{"text":"And we want to listen on a port","width":136},{"text":"We don't want to actually send something anywhere","width":256},{"text":"We're trying to make a passive socket","width":134},{"text":"So for our flags here I need AI_PASSIVE","width":819},{"text":"Okay so we set this up","width":72},{"text":"We can call get address info as usual","width":282},{"text":"I don't need to connect anywhere","width":175},{"text":"I want to connect to port 300","width":313},{"text":"And we'll get our result","width":124},{"text":"Let's assume that works","width":122},{"text":"So well check the return value of this","width":175},{"text":"Here's how we can set things up","width":79},{"text":"It just takes two calls","width":202},{"text":"Yes we need to make a socket as usual","width":201},{"text":"Remember that represents our kernel object","width":155},{"text":"The thing that is going to talk about our ability to the outside world","width":293},{"text":"And we pass in everything we get from our result object","width":205},{"text":"Note the hints","width":128},{"text":"Yes we want to continue to a particular port","width":141},{"text":"So we need to call bind on that socket","width":447},{"text":"But then that's it","width":76},{"text":"There's no queue to make","width":156},{"text":"There's no exec to do","width":244},{"text":"We just wait for packets to appear","width":201},{"text":"How do I do that?","width":184},{"text":"I call recvfrom","width":407},{"text":"And when you do this","width":110},{"text":"Not only can you get the data that someone set you","width":202},{"text":"So let's pass in a buffer and how big our buffer is","width":228},{"text":"You can also find out who sent it","width":111},{"text":"So that's the purpose of this structure here","width":284},{"text":"And we pass in the size of this structure as the last argument","width":256}],
  // Part 5
  [{"text":"So what are these UDP packets look like?","width":444},{"text":"So here's the specification of UDP","width":240},{"text":"It's this little diagram here","width":513},{"text":"And there's really not much to it","width":155},{"text":"It's the UDP format","width":152},{"text":"I got a source port, destination port","width":141},{"text":"So each of those is 16 bits","width":141},{"text":"I've got the length here, also 16 bits","width":210},{"text":"a checksum which is optional for IPv4","width":149},{"text":"And the data that someone wants to send me","width":123},{"text":"So that was the original spec","width":352},{"text":"So it looks like we could have packet sizes up to 2^16","width":537},{"text":"Because that's the number of bits that our length is","width":273},{"text":"In practice that may not be true","width":237},{"text":"The spec actually says the minimum supported is 500 bytes","width":317},{"text":"And in practice most routers will happily send packets up to 1500bytes","width":695},{"text":"Which by the time you add the overhead of the UDP and IP fragment ","width":308},{"text":"It means that UDP packets are limited to about 1472 bytes","width":477},{"text":"So try sending a packet greater than that on a classic network","width":322},{"text":"Good luck","width":96},{"text":"How do you know it didn't work?","width":236},{"text":"This is the sound of silence","width":113},{"text":"You get NOTHING","width":122},{"text":"You send stuff out","width":76},{"text":"It goes nowhere","width":76},{"text":"There's a router in the middle that says","width":99},{"text":"I SEE YOUR PACKET","width":87},{"text":"I SPIT ON IT","width":168},{"text":"I EAT YOUR PACKET FOR LUNCH","width":73},{"text":"Right","width":13},{"text":"So","width":37},{"text":"There's two little problems right","width":133},{"text":"It's great for sending small amounts of information","width":399},{"text":"An amusing anecdote here is IPv6 has since designed jumbo packets","width":597},{"text":"Which can be up to 4GB in size","width":507},{"text":"I mention this because I find this amusing because right now ","width":147},{"text":"Most of the infrastructure spits on anything bigger than 1472 bytes","width":236},{"text":"And we've got spec that allows up to 4G","width":146},{"text":"Good luck getting that packet to go anywhere","width":163},{"text":"Maybe by the time you graduate we'll see jumbo packets floating around on the internet","width":280},{"text":"But the spec is there","width":153},{"text":"It's probably going to take a generation of electrical failures before we upgrade enough of the infrastructure before jumbo packets truly work","width":526},{"text":"You might be able to get it to work on your local subnet","width":287},{"text":"On your local router","width":124},{"text":"If you buy some very modern hardware","width":152},{"text":"But these days currently ","width":100},{"text":"UDP in practice","width":117},{"text":"Yes that's about the maximum size you send a packet","width":177},{"text":"So where is UDP actually used?","width":406},{"text":"You will see UDP packets for DNS","width":336},{"text":"domain name service","width":120},{"text":"So when you type in something like HEY","width":141},{"text":"I want to go to the host which say its bbc.com","width":305},{"text":"Somebody somewhere needs to know how to translate this address to an IPv4 or IPv6 address","width":748},{"text":"And the person","width":56},{"text":"The service","width":63},{"text":"Who knows how to do this is DNS","width":317},{"text":"Which cached this information","width":93},{"text":"So there's a whole hierarchical structure of servers that can convert hostnames and addresses to their relevant IP numbers","width":771},{"text":"To do this your machine sends out UDP packets","width":303},{"text":"And it may send out to 2 or 3 different DNS servers","width":318},{"text":"They might say Hey Im in a rush here","width":156},{"text":"And quick I need to know","width":68},{"text":"Who has the answer?","width":125},{"text":"So that's why we use DNS","width":87},{"text":"A single packet, if it gets lost, it doesn't matter","width":143},{"text":"I'm going to ask someone else as well","width":122},{"text":"If it times out I'll just send it again","width":136},{"text":"It's a simple kind of QUICK I NEED THIS","width":141},{"text":"and hopefully I'll get the response back as fast as possible","width":163},{"text":"Much faster than opening up a TCP connection","width":316},{"text":"So DNS traffic uses UDP","width":723},{"text":"Let's compare this with TCP","width":677},{"text":"So the TCP packets are much more uh complicated","width":440},{"text":"Here they are","width":37},{"text":"There's some similarities","width":227},{"text":"You'll notice that we've got a port number","width":310},{"text":"From the source and the destination","width":154},{"text":"Why do you think we need the source port?","width":695},{"text":"I'm sending you a packet to your server","width":194},{"text":"Why should I send you my source port?","width":268},{"text":"So you can respond","width":152},{"text":"So look there's multiple packets going out of different ports on my server all of the time","width":359},{"text":"When the other socket at the other end wants to send back some information it needs to know which port to send it to","width":520},{"text":"So  the source port is important because we'll need that for the destination","width":446},{"text":"We've also got a sequence number.","width":299},{"text":"Remember","width":39},{"text":"What does TCP try to do ?","width":67},{"text":"It tries to hide the fact that we're sending packets across","width":175},{"text":"We've kind of turned this into a stream","width":133},{"text":"But packets might get lost","width":64},{"text":"It might get duplicated","width":171},{"text":"So our trick is to keep track of the total number of bytes that we've successively sent in each direction","width":538},{"text":"So we'll mark each packet with where we are in the stream","width":399},{"text":"So we have a sequence number","width":85},{"text":"It represents the actual number of bytes that have been transferred in this direction so far","width":359},{"text":"So this means if we lose some packets","width":159},{"text":"The other end can say","width":144},{"text":"HEY","width":28},{"text":"I lost you. I lost you at this point","width":173},{"text":"","width":3},{"text":"Can you resend starting from here?","width":329},{"text":"And that's part of the acknowledgement number","width":124},{"text":"The other end of our connection can say I hear you","width":277},{"text":"I've got your message so far up to this point in the stream","width":681},{"text":"Right","width":192}],
  // Part 6
  [{"text":"In the beginning","width":222},{"text":"Uh TCP could just uh back in the early days","width":217},{"text":"of ARPANET","width":58},{"text":"our sequence numbers could just start from zero","width":212},{"text":"Today however","width":51},{"text":"They don't","width":31},{"text":"Initially when we start the connection we actually start it with a random number","width":431},{"text":"So we have a 32bit random number which is our initial sequence number","width":581},{"text":"Why do you think that might be?","width":417},{"text":"Security","width":102},{"text":"Otherwise somebody could send some data to whoever we're talking to","width":365},{"text":"And if they chose the sequence number correctly","width":230},{"text":"They could insert some data into our stream","width":223},{"text":"By making it harder to guess what sequence number we're on we can make our approach a little bit more robust","width":809},{"text":"So it uh it's random","width":467},{"text":"Now with each packet we send","width":214},{"text":"There's various flags we can set","width":152},{"text":"This is not a networking class","width":83},{"text":"So we're not going to go into detail with what these mean","width":198},{"text":"But we will mention this","width":288},{"text":"That packets can be labelled with these little flags","width":402},{"text":"And the first packet you send has this little label that says the SYN-ful packet","width":493},{"text":"","width":2},{"text":"And the receiver, the server, says THANK you! I acknowledge your SYN-ful ness.","width":320},{"text":"Yes","width":526},{"text":"Right so imagine you had a jigsaw puzzle","width":164},{"text":"A 1 dimensional jigsaw puzzle","width":163},{"text":"Much easier than a 2 dimensional jigsaw puzzle","width":173},{"text":"And each piece arrives with a sequence number","width":256},{"text":"This makes it really easy to put together","width":177},{"text":"That's the purpose of the sequence number","width":191},{"text":"if they arrive out of order, if you have any missing pieces","width":141},{"text":"You actually know where to put it inside your data stream","width":165},{"text":"You might get - a quick question","width":279},{"text":"It'll lap around","width":652},{"text":"Oh yes","width":89},{"text":"You couldn't send more than 4gb in a packet","width":505},{"text":"Yes the sequence number actually represents the data","width":265},{"text":"It's not just a count of the packets","width":277},{"text":"It represents the contents, it represents the data stream","width":299},{"text":"And what the bytes that you've put inside the packet where they should be fitted into inside the stream","width":828},{"text":"Right so you might have a packet that says","width":220},{"text":"OKAY","width":31},{"text":"I'm sequence 10 here's my data blah blah blah","width":273},{"text":"And there's another packet that might before or after that says I'm sequence number 20 and here's my data blah blah blah","width":498},{"text":"And the operating system says thank you very much","width":174},{"text":"I can see that the data stream that I should give back to my process should have the blue data first and the black data after  it","width":476},{"text":"So I might be able to reassemble the data back into a stream of data to send to the program","width":569},{"text":"No there's no limit","width":101},{"text":"Talk to me afterwards","width":66},{"text":"These numbers can lap around","width":277},{"text":"This is just a long stream","width":121},{"text":"And uh data was arriving from here in packets","width":127},{"text":"And the user is calling read so we're giving the data as the user process wants it","width":347},{"text":"But these numbers can just wrap around","width":141},{"text":"modulo 4gb","width":190},{"text":"Alright so","width":267},{"text":"So this is the connection handshake","width":165},{"text":"That we see between the server and the client","width":335},{"text":"So the client says","width":87},{"text":"HEY I want to connect to you","width":96},{"text":"And here's my SYN-ful number","width":97},{"text":"My sequence number","width":96},{"text":"The server says okay I've ignored your sequence number","width":281},{"text":"Here's mine","width":230},{"text":"So this is the client saying hello","width":276},{"text":"This is the server saying hello back","width":170},{"text":"And this is the client says I acknowledge your sequence number as well","width":307},{"text":"With that third packet we can also include some data","width":290},{"text":"So we'll see that again in the future","width":341},{"text":"And you see these diagrams in network classes where the client tells the server","width":598},{"text":"The server responds","width":98},{"text":"And the client responds again","width":192},{"text":"So we have this three way handshake","width":416},{"text":"But this takes time","width":304},{"text":"","width":2},{"text":"They're governed by the speed of light*?","width":107},{"text":"They're governed by the hardware","width":109},{"text":"They're governed by the routers in the way","width":103},{"text":"YES","width":31},{"text":"Quick question","width":732},{"text":"Okay so","width":150},{"text":"The server and client nomenclature, those words, are really only important for the initiation of the connection","width":451},{"text":"After that both sides can play","width":247},{"text":"Both sides have sequence numbers","width":133},{"text":"Both sides send acknowledgement packets","width":114},{"text":"Both sides control congestion","width":67},{"text":"Etc etc etc","width":99},{"text":"There is no longer a kind of master slave relation","width":239},{"text":"Both have equal footing","width":289},{"text":"So we'll finish with this that","width":251},{"text":"So one thing we'll try to prevent again is something called a SYN flood","width":228},{"text":"Which is an attack on TCP","width":143},{"text":"Where we try to send a server a whole load of packets with these synchronization messages","width":588},{"text":"Initiation messages","width":147},{"text":"We walk up and say HEY I'm SYN-ful here's my number","width":241},{"text":"And the server replies back and is now waiting for the response","width":301},{"text":"So it's very cheap to send these","width":160},{"text":"You can just fire a packet","width":83},{"text":"Whereas the server now has to set up a connection","width":171},{"text":"And it's like okay I'm waiting for the handshake","width":311},{"text":"So it's an attempt to do a denial of service on a server","width":318},{"text":"And with that we're out of time","width":91},{"text":"So thank you very much","width":79},{"text":"And I'll see you friday","width":64}],

  // Start Lecture Video 27
  // Part 0
  [{"text":"alright","width":192},{"text":"good afternoon everybody","width":106},{"text":"and welcome to friday yay","width":113},{"text":"so here we go","width":56},{"text":"heres what were going to do today","width":99},{"text":"is were going to talk about file systems and how files are represented","width":264},{"text":"but I also wanted to let you know about a cool new project","width":208},{"text":"that we're getting started","width":87},{"text":"and I'd like you to be part of it","width":91},{"text":"so I apologize for the spam but","width":215},{"text":"here's why I think its really cool","width":151},{"text":"wouldn't it be nice if you could go back to a lecture and say","width":188},{"text":"uh yeah uhh what was he saying when he talked about this term or that term","width":356},{"text":"which lecture was it in when","width":124},{"text":"the instructor or lecturer mentioned x y z","width":199},{"text":"so thats the idea is so can we transcribe lectures","width":246},{"text":"recorded lectures","width":75},{"text":"and then make subtitles?","width":199},{"text":"for people with strong english accents like myself?","width":137},{"text":"and for searching as well","width":178},{"text":"so for example","width":84},{"text":"remember those 241 videos that I made for the beginning of the course?","width":399},{"text":"supposed you wanted to find all the lectures where I mentioned printf()","width":249},{"text":"so we can kind of google search it and in real time find it","width":207},{"text":"oh yeah thats the one I wanted","width":165},{"text":"and you click on this and ","width":301},{"text":"my machine seems to be a bit slow today","width":107},{"text":"probably because its friday","width":213},{"text":"and off it goes and uh we can review the concepts","width":197},{"text":"so we've done that now for those mini videos","width":317},{"text":"and now I want to do that for 241 content","width":301},{"text":"and then we're going to take over the world","width":141},{"text":"the plan is to make it successful in this course and then say to the college why don't we do this for other courses as well inside the collge","width":445},{"text":"I'm already trying to make ways to prepare the lectures to say hey you know your course is recorded","width":381},{"text":"hey you could do so much more.","width":104},{"text":"lets make it successful inside 241 first","width":186},{"text":"so heres the plan","width":23},{"text":"we take a one hour video and we divide it into chunks","width":202},{"text":"short say 7 minute chunks","width":108},{"text":"and then you just take a short amount of time to type it in","width":256},{"text":"there is a second pass where you take those phrases someone else has done and you make sure they're lined up to the right part of the video","width":447},{"text":"its very easy work and we think it might might actually improve your grade","width":208},{"text":"because you're spending time on tasks because you're actually reviewing the content","width":281},{"text":"so thats the idea","width":111},{"text":"thats the promise","width":55},{"text":"lets see if it happens","width":64},{"text":"so please consider signing up and to help uh feel good about doing this","width":438},{"text":"um","width":14},{"text":"myself and another professor from Beckman","width":255},{"text":"we're going to throw in 50 dollars of our own cash each time","width":277},{"text":"so we have 100 dollars each time","width":97},{"text":"and we'll have a little lottery for each person for the people who are actually helping to do this","width":333},{"text":"so there's a small chance reward","width":147},{"text":"maybe you should use the 100 dollars to buy more lottery tickets and upscale it onto a million","width":323},{"text":"we'll see","width":36},{"text":"right so anyway thats that","width":78},{"text":"and i'm afraid those rewards are only available to cs 241 students at this time","width":283},{"text":"okay so thats class transcribe","width":176},{"text":"lets make this big lets make it big enough that we can crowdsource this","width":233},{"text":"and make it so that it actually even works for other universities as well","width":304},{"text":"okay right so back to today's content","width":210},{"text":"oops I had an overhead","width":401},{"text":"right class","width":31},{"text":"here's what were going to do","width":81},{"text":"I'm going to ask you now with a neighbor or imaginary friend of your choice","width":301},{"text":"to come up with some design goals for what you would like to see in a file system","width":390},{"text":"so you won't be the first person to invent their own file system.","width":213},{"text":"its been done done by times before","width":135},{"text":"but what are your criteria?","width":182},{"text":"what would you like to put inside your file system?","width":149},{"text":"supposed we said oh your senior project is to make new filesystem","width":309},{"text":"how should we measure it?","width":50},{"text":"what are the high level designs","width":93},{"text":"don't give me implementation details like","width":219},{"text":"oh I want to hash everything. I want to cache it.","width":168},{"text":"No. Give me some high level things","width":152},{"text":"What are your kind of selling points","width":95},{"text":"What are your requirements for what makes a good file system","width":228},{"text":"so take 5 to 10 minutes with a neighbor or imaginary friend and write down some of those criteria","width":479},{"text":"[people writing down the criteria]","width":2877},{"text":"okay","width":29},{"text":"[someone talking in background]","width":8860},{"text":"ok so","width":47},{"text":"lets make a list!","width":129},{"text":"what ideas it says pick ","width":222},{"text":"no lets not pick","width":64},{"text":"lets have some volunteers","width":119},{"text":"what ideas what are our design goals then","width":138},{"text":"shoot give me one","width":362},{"text":"yes","width":217},{"text":"you want it hiearchical ","width":123},{"text":"you just want me try to spell that word. ok","width":172},{"text":"alright so we want it hierarchical, what else?","width":241},{"text":"[someone talking]","width":403},{"text":"ok. we efficiently use our storage space so we might need to keep a map of which areas we're using and which areas we're not using","width":527},{"text":"ok what else","width":157}],
  // Part 1
  [{"text":"ok what about security","width":235},{"text":" you want it so that uh not everyone that has access to the storage system can just leisurely access all files","width":373},{"text":" we want to have some kind of access control","width":136},{"text":" ok","width":64},{"text":" what else","width":153},{"text":"you want metadata okay","width":160},{"text":" what do you mean by meta data","width":393},{"text":" ok so metadata like when was it uhh when was it last modified or its size","width":372},{"text":" okay","width":49},{"text":" what else","width":282},{"text":"ok what are we allowed to do with the file","width":102},{"text":" are we allowed to read it","width":75},{"text":" write it","width":44},{"text":" execute it? eat it? the new edible file system","width":425},{"text":" what else? yes","width":877},{"text":"okay you want to be able to do efficient searches","width":154},{"text":" so that if i have a certain text file or video file umm it'd be nice if it just did my transcriptions automatically right? so find all the video files where printf() is mentioned","width":811},{"text":" what else? yes","width":660},{"text":" support things llike symbolic links","width":215},{"text":" you said","width":59},{"text":" symbolically","width":97},{"text":" what you mean by that?","width":394},{"text":" so you want files pointing to other files","width":239},{"text":" the file you wanted is not found but don't worry","width":158},{"text":" just keep following","width":63},{"text":"go over there have a look other there","width":98},{"text":" it says haha you look over there","width":170},{"text":" right","width":12},{"text":" yes we want to be able to somehow symbolically say this file exists exists","width":270},{"text":" perhaps in two place sat the same time","width":134},{"text":" okay","width":65},{"text":" right","width":61},{"text":" lets uh have a look at uh some of the other things that we've got down here","width":394},{"text":" right so","width":152},{"text":" there are some other things that we didn't talk about like umm","width":359},{"text":" you might also want versioning i want to get back in time","width":376},{"text":" you know my users just accidentally deleted everything","width":214},{"text":" oops","width":124},{"text":" what do we say","width":64},{"text":" well we get out and say you get a new job or we could say dont worry my file system supports uhh some sort of history and i can actually get back old files","width":652},{"text":" maybe i want to kind of support some kind of backup","width":437},{"text":" i want to be able to keep my filesystem actually running actually continue to use it as i continue to take a copy of it offsite umm and i want to be able to do that efficiently","width":977},{"text":" encryption","width":37},{"text":" so this is similar to uhh access control but you can imagine what would happen if someone got hold of your flash drive right now or your usb key right now","width":759},{"text":" could they read the files off it? yeah","width":370},{"text":" okay you can say to that little flash drive","width":121},{"text":" okay give me all the bytes in disk block 0","width":168},{"text":" disk block 1 disk block 2","width":115},{"text":" ha","width":34},{"text":" and you probably could read most of the data","width":248},{"text":" even if we had set up the data to have access control","width":342},{"text":" if we can actually directly access the bytes","width":147},{"text":" if its not encrypted, we can read the actual data","width":276},{"text":" so we might want encryption as a native part of this","width":285},{"text":" what about compression? maybe our filesystem should automatically try to compress data","width":482},{"text":" so that it can efficiently use our space","width":120},{"text":" you can imagine for example with text that you uhh could do a great better job of compressing test so that it occupies a smaller amount of storage space","width":696},{"text":" because we want great performance so that might affect how we organize our disk our contents on the disk","width":879},{"text":" we probably want our disk blocks of the same file to be pretty close to each other","width":255},{"text":" we want to be able to read and write and create new files as fast as possible","width":430},{"text":" and some areas you might see is deduplication","width":459},{"text":" so if you and i are storing the same files why should we be using multiple disk blocks? multiple storage space? perhaps we should do something clever behind the scenes and say oh actually uhh these files look exactly the same","width":1073},{"text":" at least for these parts of it","width":97},{"text":" so we reuse this disk block but don't tell the user","width":255},{"text":" we'll do this kind of behind the scenes","width":144},{"text":" we'll make it a native part of the file system","width":379},{"text":" alright so the things I've mentioned here are some of the advanced features that most filesystems don't support","width":537},{"text":" for example deduplication sounds great, but very few file systems support it","width":1046},{"text":" heres something we didn't talk about","width":324},{"text":" why? because probably you're cs majors you're not uhh ece people","width":558},{"text":" we just assume that the hardware kind of works 99 point","width":161},{"text":"99% of the time right","width":127},{"text":" ha ha ha ha ha ","width":135},{"text":" not good enough right","width":54},{"text":" we need to be able to assume things go wrong and we don't want to suddenly our entire filesystem","width":502},{"text":" hey you know that thesis you worked on","width":115},{"text":" no even better","width":82},{"text":"hey you know everyone's thesis that uhh ok","width":204},{"text":" so theres a story about a another department","width":344},{"text":" im not going to say which university it is in","width":273},{"text":" that didn't keep backups running","width":193},{"text":" they thought they were running","width":105},{"text":" they weren't running","width":92},{"text":" and uhh","width":77},{"text":" when they want to use the backup","width":95},{"text":" they discovered all the files were 5 years old","width":447},{"text":"so we want to make sure our file systems are as robust as possible and can cope with failures and tell us hopefully in advance when the hardware is failing","width":771},{"text":" ok","width":27},{"text":" so these are big design goals and actually creating a file system is difficult","width":326},{"text":" and uhh we are not going to make file systems in 241","width":344},{"text":"however we're going to look at uhh simple linux file system called ex2 which is the predecessor for  ex3 and more recently ex4","width":1167},{"text":"  oh thats exciting isnt it","width":53},{"text":" so we're going to look at some of the early features of ex2 to see how it represents files on a disk","width":610},{"text":" before we do that","width":39},{"text":" let's step outside of our high level features and actually look at how we can actually talk about files","width":368},{"text":" well","width":141},{"text":"here's uh one idea im sure you probably already know is I give a filename like hello.txt","width":655},{"text":"thats relative to the current directory of my process","width":476},{"text":" i can uhh specify an absolute path by starting my path with a forward slash here","width":512},{"text":" so for example i could do /home/angrave/hello.txt","width":508},{"text":"and now i've fully qualified it","width":70},{"text":" so it doesn't matter what the current directory is","width":303}],
  // Part 2
  [{"text":"i can write relative paths using the following uh uh special directory names","width":1061},{"text":" what does single dot mean? means the current directory","width":667},{"text":" so what does two dots mean? the parent directory","width":239},{"text":" go up one","width":64},{"text":" go up to the previous directory","width":134},{"text":" what about three dots","width":153},{"text":" nah that doesn't mean anything","width":42},{"text":" I just put that in there as a joke","width":184},{"text":" alright don't do 3 dots","width":30},{"text":" you could probably actually make a file with those 3 dots if you wanted and really confuse people","width":359},{"text":" ok so yes","width":50},{"text":" we can talk about relative directories","width":102},{"text":" so for example if you wanted to go up three directories you could write ","width":148},{"text":"....","width":37},{"text":"/","width":18},{"text":"..","width":100},{"text":"/ and then we could keep going and so we could do ","width":213},{"text":"./ that doesnt do anything that just says ok stay inside the same directory","width":308},{"text":"and then go up to another into current directory x then go into directory y then go back out so now were back inside directory x etc etc","width":662},{"text":"so you could come up with these convoluted paths and its up to the operating system to follow the money if you like","width":402},{"text":" to follow these to identify which directory you actually wanted to end up in","width":306},{"text":" ok","width":52},{"text":" so we've talked about relative paths","width":93},{"text":" we've got an example of a relative path","width":214},{"text":" perhaps you could simplify this one","width":1349},{"text":"ok so what does this say? you start from the current directory","width":233},{"text":" go into a","width":36},{"text":" go into b","width":64},{"text":" go up one","width":67},{"text":" ok so we've left b we're back into a","width":200},{"text":" now go into c","width":108},{"text":" now go into the same directory","width":182},{"text":" so the directory that we are currently in is just a c","width":399},{"text":" and you could put an ending slash on the back if you wanted to or not","width":633},{"text":"questions? yes! haha okay so why is it that we do ","width":1103},{"text":"./a.out?","width":346},{"text":"and the answer is because of your path environment variable","width":484},{"text":" so you've been writing code","width":187},{"text":" we've written code with exec() and theres a version of exec thats got a p on it that says look for the filename on the following path","width":963},{"text":"so if you were to write hey run a file called a.out","width":225},{"text":" it would look in all the directories specified in the path for something for a.out","width":229},{"text":"and guess what your current directory is not on that list","width":377},{"text":" probably for security reasons","width":128},{"text":" it is unusual to just run some artitrary file on the current directory","width":493},{"text":" you could change your path so the current directory is on there","width":176},{"text":" you could say okay my path is now $path and heres another directory the $path is just a string right","width":744},{"text":" and so if i did that i wouldn't need to the dot forward","width":169},{"text":"to run something out of my current directory","width":901},{"text":" questions? ","width":463},{"text":"okay","width":68},{"text":" so heres what we're going to do","width":103},{"text":" we're going to take our secondary storage","width":75},{"text":" our disk","width":107},{"text":" whether its a flash disk","width":55},{"text":" and we're going to conceptually think of it in terms of blocks","width":314},{"text":" and so the lowest level i can say to my my hardware","width":277},{"text":" hey get me block #7 get me block #8 and a little white later, the contents of that will appear in some memory that I've requested it in","width":857},{"text":"so why do you think we make these the same size as our memory pages? ","width":679},{"text":"why is not not an arbitrary values like 1300 bytes or something? yes okay lets go back to thinking about virtual memory for a moment","width":963},{"text":" what did we want to do with virtual memory","width":142},{"text":"when our memory is uhh when our memory is being used by alot of processes and we need more space","width":525},{"text":" what do we do? we take a page of memory and copy it out to the disk","width":343},{"text":" when we want to load our programs in","width":104},{"text":" we're loading them in at a page at a time into memory","width":249},{"text":" so most of our operations to disk are page based and we and so our disk blocks are are they are the amount that we move to and from disk is always going to be some multiple of our memory pages","width":1228},{"text":" so yeah we'll look at it today in terms of making them exactly the same size","width":538},{"text":" right","width":71},{"text":" so some of the calculations we've done for virtual memory are very similar to what we will see when we look at the file system","width":551},{"text":" right so we talked about some of our high level ideas for a file system","width":218},{"text":" what about then our files","width":97},{"text":" what would we want to store for each file","width":127},{"text":" we had some meta information such as uh the length of the file","width":617},{"text":" uhh when it was last modified","width":640},{"text":"what else would you like to see","width":92},{"text":" what other information should we store for each file? ok","width":376},{"text":" take a couple of minutes to write down a list","width":4580},{"text":"so we got one of modified we have some other timings as well","width":186},{"text":" I had a few things like  when it was created","width":435},{"text":" ok","width":24},{"text":" what else? ok a file type","width":594}],
  // Part 3
  [{"text":"okay what else? ok so read, write, execute","width":765},{"text":"in other words what kind of access you can do","width":230},{"text":" can you read it write it execute it","width":84},{"text":" eat it smell it sniff it? yeah","width":220},{"text":" who owns it","width":27},{"text":" ok","width":545},{"text":" what else? yes","width":237},{"text":" ok who modified it last","width":764},{"text":" what else? last opened? ok","width":565},{"text":" when last opened","width":118},{"text":" might be useful say for backing up things","width":290},{"text":" or optimizing where things are on the disk","width":218},{"text":" what else? hm? path ok","width":1063},{"text":"ok","width":62},{"text":" yes","width":94},{"text":" hahah yes name","width":265},{"text":" yeah would you like file #7 or file #8","width":144},{"text":" i don't know which one is which","width":147},{"text":" ok anything else","width":62},{"text":" yes","width":184},{"text":" ok whether its kind of binary or text","width":671},{"text":" alright anything else","width":190},{"text":" ok version","width":505},{"text":" alright i'll add one more which is um where","width":275},{"text":" how to get the actual contents","width":182},{"text":" we probably want the contents of the time","width":98},{"text":" we didn't actually talk about it","width":114},{"text":" we talked about all this great meta information","width":91},{"text":" we didn't talk about the fact that yeah all that has some contents as well","width":214},{"text":" so we probably need to store exactly how to go do the disk","width":200},{"text":" which disk blocks being used to actually hold the contents of the file","width":413},{"text":" it'd be a pretty silly file system if we couldn't actually store any content with it","width":565},{"text":"right so actually what we've described here is this basic idea of an information node or an inode that we'll find again and again in various kinds of file systems","width":985},{"text":" so we've described alot of meta information uhh for real inodes, let me mention some things that don't exist","width":493},{"text":" there isn't a path","width":91},{"text":" we just have um fact we don't have name either","width":745},{"text":" uhh the other thing we don't have is um lets see","width":231},{"text":" who modified it","width":319},{"text":" the other thing we don't have is file type","width":500},{"text":"but we do have things like the left when was it last modified","width":223},{"text":" there's an owner","width":175},{"text":" and we can find all these things inside a basic inode","width":497},{"text":" so i\"m going to today talk about one of the simplest permission models and it's this","width":433},{"text":" each file has an owner or user, a group, and then we can then just talk about the general public","width":644},{"text":" everybody else","width":77},{"text":" whether they're allowed to touch this file or use this file in some way","width":348},{"text":"and for each of these three different kinds of people that might want to use our file","width":442},{"text":" there are just three permissions","width":206},{"text":" read write execute","width":247},{"text":" read write execute","width":197},{"text":"read write execute","width":67},{"text":"unfortunately there is no edible bit","width":287},{"text":"perhaps for next years april fools you'd like to write your own filesystem that is edible","width":327},{"text":" so we can basically say if you're the owner of the file","width":255},{"text":" if you're the user owns the file","width":96},{"text":" you can read it you can write it you can execute it","width":213},{"text":" if you happen to be inside this if the user trying to access this file is the member of the group that owns this file then again we can specify some permissions everybody else gets these permissions","width":1431},{"text":" so here is a surprising potential gotcha","width":198},{"text":" in C guess what happens if you start your number literals","width":245},{"text":" your integer literals with the number 0","width":257},{"text":" you're speaking octal","width":233},{"text":" so if you were to write int a = 0123 congratulations you just managed to confuse a java programmer","width":968},{"text":" this is not 123","width":252},{"text":" each one of these digits represents three bits","width":835},{"text":"so this is exactly what we need if we want to talk about our user group and other permissions","width":436},{"text":" because we can encode three bits into this number and easily read it off as well","width":358},{"text":" so this is 001","width":119},{"text":" this is 010","width":108},{"text":" and this one is 011","width":354},{"text":" so I can easily read off what is going to be the user group and everyone else in terms of their permissions","width":413},{"text":" we'll talk more about that on monday","width":190},{"text":" no wednesday my apologies","width":362},{"text":"ok","width":445},{"text":" right i'll mention though","width":80},{"text":" some useful calls here","width":356},{"text":" we're going to run into chmod to change the uh permission bits on a file","width":427},{"text":" and there is a call you can make inside c and theres a call you can make inside the shell","width":427},{"text":"there's chown","width":185},{"text":" if you want to change the owner","width":300},{"text":" you already know mkdir for making a directory","width":332},{"text":" perhaps you didn't know mkdir -p which is useful which makes all of the parent subdirectories if they don't exist","width":438},{"text":" so for example I can say a/b/c and rather that complaining that a and b don't exist","width":574},{"text":" it will make a and b if they don't exist","width":356},{"text":" here's some other little tricks that you don't know","width":265},{"text":" if you just write cd to change directory it goes back to your home directory","width":529},{"text":" this is in the shell","width":169},{"text":" also in the shell","width":204},{"text":"  tilde i uh once had a book that referred to this symbol as a corgi as in a small little dog excrement","width":938}],
  // Part 4
  [{"text":"and im now forever cursed by looking at that and thinking that way so i'm happy today to share this curse","width":640},{"text":" so this tilde means also home directory","width":199},{"text":" it won't inside of c programs","width":99},{"text":" its just a function of the shell program","width":275},{"text":" such as bash","width":151},{"text":" so if you are somewhere else and you quickly want to refer to a file inside the home directory you can do ~/hello and my favorite little trick is cd - which means go back to the previous directory that I was in","width":1049},{"text":" so if i wanted to swap quickly between two directories I could do cd -","width":406},{"text":" and finally theres push directory and pop directory","width":392},{"text":" which allows me to say remember the current directory im in and later go back to it","width":613},{"text":" so theres just some little kind of unix helpful things to do","width":300},{"text":" with that lets have a look at page 2","width":385},{"text":" so here is how we can lay out the information we want to store inside our secondary storage","width":551},{"text":" we'll have our meta information stored inside these inodes and we'll just put all of the inodes together","width":443},{"text":" we'll talk more about that term next week","width":139},{"text":" and then we've got some remaining space","width":132},{"text":" so when we first format this disk","width":246},{"text":" we're actually going to say we assume I have never need any more","width":292},{"text":"that I have a maximum number of inodes so we just have a fixed size table here","width":340},{"text":" and then I've got the bulk of the remaining space","width":166},{"text":" and I'm going to split this up into the disk blocks","width":281},{"text":" and then later when I want to get my data","width":230},{"text":" I will actually say ok give me disk block 0 give me disk block 1 etc","width":449},{"text":"and so on","width":468},{"text":"so today. what we're going to do is look at how we can actually store the contents of a file using this classic inode structure.","width":1047},{"text":"here's the game","width":141},{"text":"we want to be able to store very small files efficiently and be able to access them very quickly","width":391},{"text":"disk access is slow on a spinning disk","width":176},{"text":"you have to wait a long time for the disk head to move to the right head and for the disk to spin around before you can get um the data","width":596},{"text":"its actually an easy calculation if you know the disk rotation speed like 5500 rpm or 7000 rpm you can figure out how many miliseconds before it's done one revolution and moved to the right spot","width":771},{"text":"but its the order of 10s of miliseconds","width":194},{"text":"so","width":183},{"text":"we want to do minimizing of disk accesses for small files.","width":246},{"text":"so what we want to do for very small files is inside the inode we'll just store the disk block numbers","width":517},{"text":"for some direct blocks right","width":89},{"text":"so the beginning of our file will be inside block 7 or block 8 ","width":335},{"text":"uh block 9 is actually already being used so we want to go to block 22 and so on and so on and so on","width":613},{"text":"so if i want to read a file ","width":155},{"text":"I'm going to have to read the inode","width":111},{"text":"which I might already have inside memory","width":186},{"text":"and we're going directly to these block and request","width":315},{"text":"the trouble is our inodes are of fixed size","width":196},{"text":"we just put them all together in this little array here","width":192},{"text":"so our scheme is only going to work for a small number of direct blocks.","width":284},{"text":"and typically this number is about 10","width":169},{"text":"so we have 10 of these","width":271},{"text":"the advantage of course ","width":53},{"text":"is that for small files","width":153},{"text":"it's very very quick to know which disk blocks I need","width":219},{"text":"here's what happens next","width":125},{"text":"we'll take one of our standard regular blocks","width":256},{"text":"and we'll use it not to store any data in","width":222},{"text":"but just to store ","width":119},{"text":"some numbers","width":154},{"text":"the numbers of where to go next","width":173},{"text":"so","width":61},{"text":"go to block # 4","width":164},{"text":"go to block #199","width":121},{"text":"go to block # 233","width":182},{"text":"etc etc","width":64},{"text":"etc","width":311},{"text":"so we better figure out","width":68},{"text":"how many entries we can put inside one of these disk blocks","width":405},{"text":"so","width":45},{"text":"also two pieces of information we need here","width":176},{"text":"size of our disk block and size of each pointer","width":502},{"text":"ok","width":73},{"text":"so lets write one out","width":114},{"text":"lets suppose our disk is using 64bit addressing","width":275},{"text":"so we can have alot of disk blocks","width":198},{"text":"how many bytes is this?","width":284},{"text":"8","width":104},{"text":"also known as 2^3","width":363},{"text":"and let's say","width":89},{"text":"that each block is ","width":106},{"text":"4kb","width":228},{"text":"what's that in 2^n notation?","width":295},{"text":"uhh ok","width":39},{"text":"well","width":63},{"text":"everyone knows that 2^8 is 256","width":238},{"text":"2^10 is 1024","width":270},{"text":"so 4k is 4 times that so its 2^12","width":410},{"text":"so if you have got 2^12 bytes and each entry takes 2^3 bytes","width":374},{"text":"my back of the envelope calculation tells me ","width":241},{"text":"that 2^12/ 2^3 = 2^9","width":436},{"text":"oops there we go","width":130},{"text":"I can store 2^9 entries","width":544},{"text":"ok whats what. what number is 2^9","width":250},{"text":"512!","width":298},{"text":"so I can have 512 of these blocks","width":607},{"text":" so if that was the end of our addressing scheme. we can actually work out whats the largest file that we could store","width":457},{"text":"right so forget this stuff for a moment","width":118},{"text":"how big of a file could we have","width":85},{"text":"well we have got 512 data blocks here plus another 10 here","width":380},{"text":"so if that was everything I could have 522 times each block was 4kb","width":506},{"text":"and that would tell me then","width":152},{"text":"how much space my largest file could be","width":184},{"text":"so what do we do when our file is bigger than that?","width":290},{"text":"ok","width":20},{"text":"so the famous quote by wheeler","width":133},{"text":"every problem in computer science can be solved by another level of indirection","width":350},{"text":"so if you've got a problem dont worry just wrap it around","width":184},{"text":"we'll fix it by encasing the problem with ","width":222},{"text":"with another solution","width":158},{"text":"this was done on the DCL building","width":144},{"text":"have you ever walked through the dcl and notice there are outside windows on the inside","width":299},{"text":"that's because we have glued the building","width":160},{"text":"and rather than building a new building we just put the building inside a bigger building","width":340},{"text":"so next time you walk through dcl you'll notice ahh thats why there are window panes there","width":272},{"text":"so ","width":145},{"text":"here's our plan then","width":80},{"text":"is that for even bigger files well have a lookup table of lookup tables","width":294},{"text":"wait a moment","width":41},{"text":"this was just like like virtual memory yes?","width":275},{"text":"where we had a multi level table","width":234},{"text":"and the key thing here is that for medium files more of these need to exist","width":286},{"text":"we can grow this as needed","width":171}],
  // Part 5
  [{"text":"right","width":202},{"text":"so ","width":61},{"text":"now it's time for you to play","width":137},{"text":"i've got a few little questions here","width":102},{"text":"I've changed it so that","width":159},{"text":"um","width":97},{"text":"now","width":191},{"text":"we only need uh","width":93},{"text":"we're going to have this many number of blocks","width":120},{"text":"so 4 billion disk blocks","width":199},{"text":"okay","width":24},{"text":"so how many bytes is that?","width":98},{"text":"for each pointer?","width":255},{"text":"4 bytes!","width":35},{"text":"also known as 2^2","width":137},{"text":"alright the reason i'm using exponential notation is because division just becomes subtraction.","width":440},{"text":"right so i'm going to need 4 bytes for each entry. and so for ","width":308},{"text":"these disk blocks you can now calculate how many entries I can actually hide inside each disk block","width":465},{"text":"it's just going to be","width":79},{"text":"2^12 / 2^2","width":206},{"text":"also known as 2^10","width":171},{"text":"so I have 2^10 entries inside each disk block","width":168},{"text":"right","width":36},{"text":"so that in mind","width":169},{"text":"have a go at answering these questions","width":111},{"text":"for the last question you can leave your answer in an equation form","width":196},{"text":"or an expression","width":109},{"text":"don't need to actually do the math","width":2941},{"text":"a question about one quick line of reasoning here which is","width":169},{"text":"if i've got that many disk blocks","width":153},{"text":"4 billion disk blocks","width":98},{"text":"then","width":64},{"text":"I need","width":57},{"text":"32 bits","width":72},{"text":"to be able to talk about any particular disk blocks","width":178},{"text":"to be able to represent 2^32 possible entries","width":280},{"text":"and so If I've got 32 bits then that means I've got 4 bytes","width":370},{"text":"per pointer","width":8220},{"text":"okay","width":24},{"text":"for question 2.","width":61},{"text":"if the ","width":88},{"text":"index is half full","width":302},{"text":"that means I don't have 1024 ","width":192},{"text":"I've just got 512 entries inside here","width":194},{"text":"or 2^9","width":306},{"text":"and I've got 512 valid entries then that uh","width":207},{"text":"reference actual disk blocks","width":108},{"text":"so how big is my file?","width":96},{"text":"you might want to want 512 and that would be the wrong answer","width":210},{"text":"why?","width":556},{"text":"thank you yes!","width":40},{"text":"theres another 10 here","width":174},{"text":"so","width":159},{"text":"i've got not 512 but 512+10","width":193},{"text":"I've got 522 disk blocks","width":136},{"text":"and If i multiply that by 4kb I could tell you how big a file was","width":451},{"text":"what about actual total number of blocks used?","width":169},{"text":"it is not 522","width":153},{"text":"it's","width":313},{"text":"why?","width":313},{"text":"we're using 1 extra disk block here","width":107},{"text":"for the index","width":437},{"text":"ah ok now the","width":267},{"text":"trickier one here","width":87},{"text":"is what about a triple? so","width":246},{"text":"we've seen it for indirect double indirect","width":157},{"text":"theres one more level of indirection where we can go for","width":196},{"text":"triple indirection which is an index of index of indices","width":221},{"text":"wow","width":15},{"text":"before we actually get to the actual datablock","width":192},{"text":"so how big does our file need to be before we need to go to triple indirection?","width":339},{"text":"well that means that we've got everything filled out","width":162},{"text":"we've got all of our indirect blocks","width":99},{"text":"we've got all of these double indirect blocks","width":97},{"text":"so we've got to figure out how many blocks we have in this table","width":343},{"text":"well we've only calculated each of these little indices can have 1024 pointers","width":301},{"text":"so this has got 1024 this has 1024 etc","width":336},{"text":"right and how many of these do we have?","width":285},{"text":"well we have 1024 entries ","width":201},{"text":"in here","width":331},{"text":"questions?","width":101},{"text":"obvious?","width":222},{"text":"so now I can figure out how big my file is i've got ","width":150},{"text":"10 direct blocks. i've got ","width":289},{"text":"1024 indirect blocks and 1024 double indirect blocks","width":546},{"text":"and if i was to add all of those together","width":225},{"text":"it would tell me the largest possible file I could have before i needed an indirect block","width":522},{"text":"right","width":18},{"text":"so some comments on this filesystem","width":114},{"text":"is that as your file gets larger","width":163},{"text":"it takes longer to actually get to the disk blocks that you want yes?","width":250},{"text":"so as ","width":116},{"text":"for very short files we can read these directly","width":168},{"text":"for longer files we need to start actually reading our tables into ram as well","width":399},{"text":"so we can actually follow them","width":203},{"text":"so there is a cost of having large files using this system","width":313}],
  // Part 6
  [{"text":"alright","width":142},{"text":"i will mention one other thing today","width":178},{"text":"yesterday for fun I wrote a scheduler","width":240},{"text":"at least","width":295},{"text":"a house computer","width":91},{"text":"mumbles","width":63},{"text":"here we go","width":131},{"text":"and I put this in subversion","width":212},{"text":"and it actually tries to solve those little scheduling problems that we have","width":299},{"text":"so um","width":240},{"text":"you can download it ","width":69},{"text":"you can play with it","width":83},{"text":"um","width":56},{"text":"and you can see we've got like the logic for","width":161},{"text":"say ","width":55},{"text":"um","width":24},{"text":"round robin","width":82},{"text":"which just goes round and finds the first process that is runnable","width":265},{"text":"and stops if there is none","width":113},{"text":"shortest job first that looks for the job with the shortest execution time","width":370},{"text":"and priority jobs","width":123},{"text":"where they have the highest priority for example","width":113},{"text":"it just prints out a little schedule for that","width":103},{"text":"so feel free to download my code and have a play with it","width":199},{"text":"with that have a wonderful weekend and I'll see you monday for the next lecture quiz","width":381},{"text":"thank you very much come down to see me if you have any questions","width":213}],

  // Start Lecture Video 28 (QUIZ NO CAPTIONS)

  // Start Lecture Video 29
  // Part 0
  [{"text":"Alright. Good afternoon class. Where are you? There we go. Alright. Hi","width":593},{"text":"So uh last night I had some fun uh making this uh camera preview.","width":347},{"text":"Uh. Normally when you set up a camera preview in android uh ","width":247},{"text":"For speed, you don't get to see the bytes.","width":200},{"text":"You don't see the actual pixels.","width":140},{"text":"Here's why. Memory is really really slow and when you start looking images","width":273},{"text":"typically you're talking about uh a million bytes or more","width":228},{"text":"Uh and uh uhhhhhh working with that in in Java and copying it from buffer to buffer ","width":445},{"text":"is going to make any kind of preview mode very very slow","width":341},{"text":"Um just as an example, uh a typically CPU these days can execute about 215 instructions per","width":553},{"text":"Sorry 250 per instructions per main memory access","width":345},{"text":"Versus say level 1 where it can do about 4 instructions per main uh per level 1 cache access","width":507},{"text":"Right so um I didn't want that thought I actually to get the bytes from the preview ","width":338},{"text":"and uh finally I finally got it working last night. So we'll be playing with this in uh","width":268},{"text":"section uh tomorrow.","width":164},{"text":"Uh","width":47},{"text":"Theeeeeeee plan,","width":146},{"text":"We'll see if I get it working and then if I can't then it's your turn","width":161},{"text":"Is to uh make a webserver that's part of this app","width":342},{"text":"So that the webserver actually is uhhh got a back end interface into an application","width":387},{"text":"This isn't quite as crazy as it sounds. In fact,","width":164},{"text":"many of programs now uh have an in built webserver so that you can interrogate ","width":440},{"text":"uhhh the current state of the program so","width":185},{"text":"for example if you're developing a game,","width":123},{"text":"You might consider a webserver as an alternative way in into the kinda back end of your your","width":389},{"text":"game engine so you could look at stats that the program is running","width":190},{"text":"you could change things as so as the program is running","width":169},{"text":"you could even build a complete a small interpreter so you could say quickly set where the","width":316},{"text":"uhhh where the players are or load a particular state file","width":231},{"text":"so that kind of thing","width":72},{"text":"I've seen it done with uh gas chromachaffs as well where there's a main screen","width":306},{"text":"and then there's a behind the scenes webserver which you can connect to ","width":157},{"text":"if you know the port and maybe a password","width":111},{"text":"Uh so again you can check the status of the engine or the program as it's running","width":361},{"text":"So as planned is can we make a webserver that is part of this camera preview","width":254},{"text":"and then we'll use it to actually share","width":181},{"text":"The image","width":93},{"text":"Alright so.","width":72},{"text":"We'll make our bit of kind of spyware so that anyone that knows the port number","width":293},{"text":"can actually look at the uh the current preview that's going on.","width":219},{"text":"right","width":28},{"text":"So that's what we're going to make. Ummm","width":202},{"text":"Now today, we're gonna talk about uhh files andd uhhh this kinda one really really really big idea","width":465},{"text":"and it's gonna this kind of misconception I want to clear up today","width":132},{"text":"that a file name is NOT a file","width":175},{"text":"and it's an easy trap that we get called into because we think like that all day long","width":270},{"text":"we think, open this file and here's the name","width":271},{"text":"Right","width":45},{"text":"If you could walk out of this lecture","width":114},{"text":"Not believing that anymore, then, you made significant progress","width":290},{"text":"Instead what I want you to think of isss","width":158},{"text":"that a file is an i node","width":160},{"text":"That, a file is just the bytes, just the content","width":266},{"text":"Forget for a moment that it has a name","width":165},{"text":"Forget that it lives inside a directory","width":175},{"text":"Forget that it lives inside a hierarchy","width":321},{"text":"That's all icing the cake, which we're gonna do seperately from the actual file","width":517},{"text":"Right. So how do we think of files?","width":163},{"text":"Think of them as just a particular inode","width":196},{"text":"and remember this is how we're going to organize our space on the disk","width":209},{"text":"Where we initially format it, uhh we'll have a super block","width":250},{"text":"SUPER BLOCK","width":54},{"text":"But the super block is just a managed information about how we've actually organized this data","width":383},{"text":"And in fact on real disks, disk information is so critical to be able to get anything done","width":292},{"text":"It's actually replicated several times throughout the disk ","width":180},{"text":"Just in case uh we get um a cosmic ray or some other effect which obliterates this particular copy","width":393},{"text":"But anyways super block tells us, how many say inodes we've got","width":175},{"text":"and and where the very first data block block starts","width":185},{"text":"Right. So. If we're using an inode. That means we've stored a file on our disk","width":408},{"text":"And remember we looked at last time that each inode might have some","width":242},{"text":"Direct entries","width":92},{"text":"HEY here's the content","width":70},{"text":"and we'll have say about ten of those","width":290},{"text":"But if we want to store larger files,","width":133},{"text":"Then the game we play is we store a reference a data block that is not actually used for data","width":314},{"text":"It's used just to hold pointers to actually data blocks","width":197},{"text":"And if we have a larger file, we play this game twice","width":180},{"text":"we have now, a reference to a data block","width":167},{"text":"That it to itself contains pointers to yet more tables of pointers","width":257},{"text":"And then finally huge file, ","width":206},{"text":"Then we play this game three times, thriple indirection block","width":169},{"text":"and that's it, we don't play after that. Right? We don't try to. We don't have quad indirection blocks","width":294},{"text":"Right so that's our contents of our inodes","width":120},{"text":"and you remember that inodes have more than just these pointers, ","width":264},{"text":"they have a little bit of information as well, a little meta information like the file size","width":214},{"text":"ummm, ahhh who owns the file.","width":269},{"text":"And as we'll see in a little bit","width":166},{"text":"Guess what? you could basically, from C,","width":221},{"text":"Discover what's in the inode.","width":204},{"text":"And uh.","width":137},{"text":"Including the inode number,","width":242},{"text":"And remember we talked about some of these things like,","width":129},{"text":"Who saw it, when was it last accessed, when was it last modified?","width":206},{"text":"When it last changed?","width":202},{"text":"And","width":86},{"text":"Total number of bytes","width":192}],
  // Part 1
  [{"text":"Ok so, let's get back up here","width":303},{"text":"We said that uh, we don't care about file names","width":231},{"text":"The inode is the file","width":298},{"text":"Is the big idea.","width":115},{"text":"Okay","width":715},{"text":"Okay right","width":117},{"text":"That's the big idea, great! ","width":64},{"text":"So what we're going to do to all going to talk about it after the rest of the lecture","width":138},{"text":"Okay so we've got a problem then, if that's the big idea, how are we going organize things into directories","width":341},{"text":"How are we actually going to give things names if we're saying their names is not actually part of the file","width":368},{"text":"Well, all we're going to say then is the name is actually part of a directory listing.","width":587},{"text":"So, a directory then will have","width":275},{"text":"A listing, and the listing will be","width":245},{"text":"A name","width":113},{"text":"And","width":149},{"text":"An inode number","width":109},{"text":"A name, and an inode number. etc etc etc etc","width":755},{"text":"In fact, we can think of a directory as just a file","width":343},{"text":"We'll bless it, we'll set a particular binding flag to say this isn't actually a user file,","width":368},{"text":"it's actually part of the file system","width":110},{"text":"And uh we'll need to read the contents and expect the bytes to mean the following","width":345},{"text":"The name followed by an inode number. The name followed by an inode number","width":369},{"text":"So that's all the a directory listing is","width":253},{"text":"Name followed by inode number","width":150},{"text":"And these, inodes then might correspond to one of our files","width":249},{"text":"but it might correspond to another subdirectory.","width":484},{"text":"Right so here's the big ideas we've had so far right","width":201},{"text":"Files don't have names.","width":152},{"text":"Directories have, a little map from a name to an inode number.","width":330},{"text":"And directories themselves are just files. They have data.","width":304},{"text":"What is it a data? This little mapping.","width":333},{"text":"So they'll have a data block with this kind of mapping.","width":218},{"text":"The good news is that we don't actually need to read these bytes.","width":227},{"text":"We've got some posix calls which we'll see in a moment","width":156},{"text":"Which actually interprets these bytes for us","width":197},{"text":"But what we'll be doing is opening these these directories just using a regular file descriptor","width":362},{"text":"And then we could call this posix call to actually weed out um the ","width":379},{"text":"the data as if its uh a certain ballistics","width":342},{"text":"Right","width":56},{"text":"Questions so far?","width":286},{"text":"Yesssss","width":374},{"text":"Yes so, every directory is gonna have two ","width":361},{"text":"special entries which um doesn't uhh the first one dot dot","width":418},{"text":"which is the um","width":186},{"text":"what","width":106},{"text":"parent directory, yes, how do you get out of here. I wanna go back up. right","width":341},{"text":"Anddd also, we don't need to store this one directly but we'll come across it in a little bit","width":367},{"text":"Ummm","width":58},{"text":"In current directory dot","width":94},{"text":"So we don't necessarily need to keep that inside the uh","width":303},{"text":"inside the the data but mainly the posix core will always see it. It's like uh","width":276},{"text":"Yes I can talk about myself","width":140},{"text":"So, each directory knows about itself and it knows about  uh it's it's parent.","width":323},{"text":"A directory can only have one parent so we're talking about a tree","width":554},{"text":"Other questions?","width":268},{"text":"Okie dokie. Then let's","width":1419},{"text":"Okay","width":306},{"text":"Alright so let's um","width":279},{"text":"Let's uhhh put some contents into a file","width":231},{"text":"Okay, my text","width":323},{"text":"Hellooooo","width":136},{"text":"I am a cat","width":141},{"text":"Alright","width":108},{"text":"And ctrl D to save. finished","width":151},{"text":"Great so normally we do kind of","width":120},{"text":"ls to see what's in here um","width":365},{"text":"Ok","width":61},{"text":"Umm","width":92},{"text":"But I can do more than that, I can say give me the inode numbers","width":519},{"text":"Here we go","width":155},{"text":"Uhh in fact, one of the options for ls is just to say give me it on one per line","width":250},{"text":"So now, yeah, I can, you can believe hopefully that every file","width":295},{"text":"Really is just an inode number, so if you're talking about a directory name or file name","width":264},{"text":"you're not, you're actually that's just gonna be converted into an inode number","width":427},{"text":"If i wanted to make another directory so hey I'm a subdir","width":485},{"text":"That subdirectory has what? a unique inode number","width":269},{"text":"So one way to tell whether you're truly are talking about the same file. you and me","width":290},{"text":"is to see if we are uh talking about the same inode number on a particular file system","width":672},{"text":"Alright so I lost my","width":733},{"text":"I seem to lost the projector, okay alright","width":704}],
  // Part 2
  [{"text":"So how can we find that the inode if you're the command line, you could just uh","width":586},{"text":"pass in uh on the side, ls","width":215},{"text":"or from code ","width":106},{"text":"uh we've got the following calls, we can ask for","width":274},{"text":"a stat, give the status of this file","width":205},{"text":"and uh there's two useful variations","width":224},{"text":"one is you supply a path, ","width":267},{"text":"so for example, I could say ","width":192},{"text":"stat","width":147},{"text":"on my file demo.c","width":265},{"text":"and pass in a pointer to","width":258},{"text":"my struct","width":301},{"text":"another is I pass in a file descriptor","width":710},{"text":"Now if you're going to start reading things from uh","width":246},{"text":"the buffer that's set","width":260},{"text":"make sure that you check the return value right? so you want to check the uh","width":466},{"text":"the result is 0","width":191},{"text":"otherwise its succesful","width":143},{"text":"if it's non-zero then that's ","width":174},{"text":"that uh C structure uh was never touched","width":248},{"text":"and you'll just read garbage or old values","width":270},{"text":"so it's a common programming gotcha. just assume that stat just worked ","width":213},{"text":"and then try to pull out um","width":190},{"text":"uh values and information from that stat","width":211},{"text":"where its in fact, stat says huh I don't know file or you don't have permission for that file","width":295},{"text":"or hey, it's nice day outside I don't I'll bother to do any work today","width":243},{"text":"Um that's not actually a posix error","width":160},{"text":"The uh","width":172},{"text":"Right so so check the return value of stat","width":487},{"text":"Now I mentioned before you can do fdopen","width":414},{"text":"and uh fdopen allows you to go from a file descriptor at the posix level up to uh","width":378},{"text":"uh a C file pointer complete with buffering and using printf and all that good stuff","width":391},{"text":"You can actually go the other way","width":127},{"text":"There's uh","width":114},{"text":"function called fileno which allows you to extract","width":256},{"text":"theeee","width":124},{"text":"file descriptor","width":112},{"text":"out of C as well","width":344},{"text":"Right so we can fill this in","width":82},{"text":"And there's one other call call here","width":233},{"text":"lstat","width":452},{"text":"So there's one thing we haven't talked about yet","width":173},{"text":"which is","width":225},{"text":"symbolic links","width":173},{"text":"we're gonna play with these in bit. we're just gonna mentioned them today","width":179},{"text":"was gonna say okay this exists","width":140},{"text":"and as a symbolic link","width":106},{"text":"is a file that pretends it doesn't exist","width":243},{"text":"instead it says HAH I don't exist, what you're actually looking for is","width":283},{"text":"over here somewhere and it gives you a redirection","width":270},{"text":"so just like you might move house and could set up your mail forwarding","width":291},{"text":"that's what a symbolic link can do","width":143},{"text":"so, uh you can say, Oh actually the contents that you really want uh","width":296},{"text":"read or write are not  here, they're stored in some other directory","width":333},{"text":"if you want to be evil","width":116},{"text":"you could set the symbolic link to point to another symbolic link which  can point back to the first symbolic link","width":318},{"text":"Muahahhahaah","width":81},{"text":"at which point your machine catches fire","width":303},{"text":"No you won't have been the first person to think of this","width":164},{"text":"and your program wont have been the first program to do this","width":159},{"text":"so instead","width":125},{"text":"the operating says ","width":100},{"text":"hold on a moment, I've been following these these symbolic links too many times","width":232},{"text":"i'm gonna quit trying to follow them and will give up after a preset number of times","width":393},{"text":"But anyway, uh the lstat exists if you actually want information about the symbolic link","width":386},{"text":"itself, rather than trying to follow it","width":1159},{"text":"If you call lstat on a regular file that's fine","width":206},{"text":"it'll just be the just be that equilvalent of calling um stat","width":282},{"text":"so lstat is useful if you are really interested in the symbolic link itself","width":319},{"text":"like who created the symbolic linke, who do I need to blame for this mess right?","width":228},{"text":"or when was it created?","width":213},{"text":"That's pretty unusual, most of the time we actually want to follow those links right?","width":216},{"text":"what most of the time we we just want to imagine that uh","width":231},{"text":"these aliases are automatic","width":552},{"text":"Right any questions so far?","width":174},{"text":"Okay so let's get a have a share of a look to see all the stuff we can kinda discover about the file","width":545},{"text":"First files themselves lives on a device","width":214},{"text":"yeah we know they have an id number","width":192},{"text":"and they have this ","width":152},{"text":"security access as simple protection","width":162},{"text":"where we can talk about who can do what","width":259},{"text":"so we're going to see more of this in the moment","width":158},{"text":"but this is the idea about who can read it, who can write it, and who can execute it","width":447},{"text":"they also have an owner","width":127},{"text":"and","width":122},{"text":"this we've got a user and a group","width":204},{"text":"I'm not gonna talk about groups","width":125},{"text":"much in CS241, just know that they exist","width":190},{"text":"Um if you get into linux administration, maybe it's it's useful if you have a lot of","width":352},{"text":"kind of team members working inside the same directory um","width":184},{"text":"but we're not going to play with them let's just let's just uh umm","width":191},{"text":"restrain our attention to users today","width":275},{"text":"okay","width":279},{"text":"And then the um","width":159},{"text":"total number of ","width":158},{"text":"locks, in actually uh","width":216},{"text":"these happen to be in in multiples of 512 just for historical reasons","width":290},{"text":"uhh and so that tells us, for example, whether the uh the 8th","width":321},{"text":"direct block entry is valid or not, or we should be using the indirect block as well etc etc so we","width":373},{"text":"from the number of blocks for example if that uhhh","width":294},{"text":"if that was a sufficiently small enough figure, ","width":124},{"text":"you'd know that there wouldn't be any triply indirect blocks or double indirect blocks etc etc etc","width":488},{"text":"Right so now I can write code to say, find me all the files","width":248},{"text":"which uhhhhhh have been created today","width":228},{"text":"or have been created by a certain user","width":307},{"text":"Most uh users are actually integers","width":346},{"text":"And so the file system doesn't keep a record of user names","width":256},{"text":"if you want, you can turn an integer back into a known user name","width":253},{"text":"you're gonna have to ask the operating system to do that","width":184},{"text":"so at the file system level, we just distinguish different users by different integer numbers","width":384}],
  // Part 3
  [{"text":"So I said that, hey we'd like to look at different files and maybe call stat on them","width":385},{"text":"Um, here's some starting code that maybe we can actually start to find different","width":431},{"text":"Look at, look at actually entries within a uh","width":302},{"text":"Entries inside the directory","width":305},{"text":"So here's the format of reading directories, we say okay I wanna open a particular directory","width":615},{"text":"And we're giving it dots. So what does dot mean?","width":404},{"text":"Current directory. Yes! So it depends on my process","width":202},{"text":"Where whatever the current directories of my my process.","width":137},{"text":"I could put it in an absolute directory here for example","width":244},{"text":"This opens a file descriptor","width":187},{"text":"So one way this could fail would be if you already got too many file descriptors open","width":399},{"text":"But it wraps it inside this DIR because we don't care about the actually bytes stored","width":374},{"text":"inside this magic file called a directory, we wanna pass it in terms of um","width":402},{"text":"uh uh uh the the names for example stored inside and the inode numbers possibly","width":339},{"text":"So that's what this uh readdir call does","width":236},{"text":"It updates an internal state inside this structure ","width":222},{"text":"and uh we can keep calling it and it will iterate all of those entries returning one at a time","width":493},{"text":"And then we could extract the name,","width":152},{"text":"maybe we care about trying to find a particular name","width":387},{"text":"So if strcmp returns 0, great we've got an exact match","width":239},{"text":"uh we could say yes we've found it","width":195},{"text":"Eventually readdir says okay I give up. ","width":190},{"text":"I um the the there's no more entries in which case it returns null","width":352},{"text":"So this is fairly kinda idiomatic C code ","width":189},{"text":"Where you not only ","width":157},{"text":"assign the result of a call to a variable","width":224},{"text":"you also uhh check it for something","width":212},{"text":"Like whether it's non-zero or not","width":252},{"text":"So eventually our while loop finishes","width":132},{"text":"we close the file descriptor and free any other internal resources","width":203},{"text":"perhaps we've malloced some memory inside there to hold the names","width":177},{"text":"and we return 0 saying we didn't find it","width":158},{"text":"okay so","width":137},{"text":"what's wrong with that code?","width":122},{"text":"Don't tell me. Explain it to your neighbor","width":314},{"text":"Or take a good guess","width":10361},{"text":"Okay so here's the code","width":190},{"text":"no errors found","width":310},{"text":"I'm gonna use it to try to find some file","width":227},{"text":"uh each time my little while loop, i'm going to print out the name i found","width":359},{"text":"Just run it","width":164},{"text":"okay","width":254},{"text":"Yay great! It actually all of the entries","width":317},{"text":"and remember how we said that we actually dot and dot dot","width":135},{"text":"yes, there they are, they're the first two entries  that we actually will see when we ","width":301},{"text":"iterate through the contents of my directory","width":173},{"text":"so i could start making this into a more useful program, I could start finding things","width":301},{"text":"uh for example, uh","width":169},{"text":"instead of just dot, i could actually make use of uhh the","width":291},{"text":"uhhm main. alright this could be for example uh argv(1)","width":781},{"text":"For now i've got a program that's a bit like DIR it's starting to look for things inside a certain directory","width":383},{"text":"okay right, so what's the error in this code?","width":568},{"text":"Yessss. Thank you, if you find what you're looking for you don't close the file descriptor","width":409},{"text":"Aight, the reason why this  I've bring this up because cause it's a really common error","width":345},{"text":"and it's really evil one to debug because when is it gonna you that it's gone wrong?","width":468},{"text":"somewhere else right? somewhere other time where you actually try to open a file descriptor","width":227},{"text":"when you try to open some you know simple file that exists","width":226},{"text":"and it's absolutely no reason why it can't open this file and yet your program fails in some bizzare way","width":377},{"text":"and its midnight and you've been staring at this for two hours","width":160},{"text":"and you wondered, why why did you learn to read? ","width":208},{"text":"you know life would've been so much simpler if you could kinda stayed in the yeah","width":216},{"text":"stayed outside and ran around and played or something","width":117},{"text":"right, so yeah watch out for this. and it's a very common error to forget about frame resources","width":355},{"text":"why blame only yourself but blame C","width":238},{"text":"C doesn't give us any support to actually uh remember to close resources","width":359},{"text":"hardware resources that we've opened","width":141},{"text":"and in fact your often find that's true for other languages as well even ","width":249},{"text":"with C++, uh we've actually got  to somehow remember to explicitly","width":298},{"text":"free those external resources and in this case it's remembering to call closedir","width":344},{"text":"So how can we closedir? Well one way is to make sure all possible","width":242},{"text":"code paths actually free the resource","width":240},{"text":"another thing that  we should probably do with our code if this is actually","width":237},{"text":"if we are being paid to write robust code","width":133},{"text":"is check the return value","width":101},{"text":"and being prepared to print out the actual error","width":243},{"text":"so if we actually written good code","width":237},{"text":"then our failure might have logged the fact that there were no more free file decriptors","width":343},{"text":"for us to use and that would've a strong hint that we were leaking resources","width":320}],
  // Part 4
  [{"text":"Um by the way","width":172},{"text":"A um","width":108},{"text":"Some people in the world of C actually use goto right?","width":334},{"text":"In this kind of uh","width":146},{"text":"Uh this kind of scenario so ","width":162},{"text":"we can have a kind of goto cleanup","width":204},{"text":"and","width":129},{"text":"we have a kinda cleanup right","width":237},{"text":"Uh and then yeah we fixed return values as well so","width":247},{"text":"Instead of this return here we set a flag or something","width":207},{"text":"Okay um whether you do this or not is a fantastic way to get into arguments with everybody","width":516},{"text":"Uh there's a lot to be read about how goto is bad but in practice","width":274},{"text":"you will find a system level code that does this as a way to to support kind of basic","width":360},{"text":"Um exception, exception handling","width":198},{"text":"And uh failure cleanup code. Uh where you want to leave early","width":249},{"text":"It's not the only other way to do it, the other way is to to actually set","width":224},{"text":"create your resources inside a wrapper method and uh","width":254},{"text":"uh then, uh you can return early inside your inner method","width":251},{"text":"Okay so let's let's let's pretend we didn't talk about goto","width":307},{"text":"There we go","width":119},{"text":"And fix our code","width":228},{"text":"Right, so close uh","width":211},{"text":"our directory pointer","width":432},{"text":"Right uh","width":132},{"text":"Next lecture we'll talk about how to extend this so that we can do uh","width":206},{"text":"Directory searching into subdirectories as well","width":247},{"text":"Right any questions about this?","width":307},{"text":"Alright there are mentioned one gotcha which is remember that you have the parent and your current directory","width":439},{"text":"so attempting to do subdirectory searching is like OH I know breadth first search or I know know recursive search!","width":398},{"text":"Be careful you don't keep searching yourself forever. Aight","width":206},{"text":"Oh be careful you don't keep searching down and up the tree forever","width":274},{"text":"your searches are going to take a long time if you go down the tree and back up the tree at the same","width":269},{"text":"Uh all is part of your recursive code so you have to remember those special cases","width":249},{"text":"remember you're going to see dot and remember you're going to see dot dot","width":253},{"text":"Right okay time for side 2","width":1063},{"text":"Okay","width":202},{"text":"I love this word \"canonical right it's","width":197},{"text":"What's a canonical definition of canonical","width":420},{"text":"Can you give me? Two directory paths that refer to the same file?","width":561},{"text":"Other words could you write down a string that actually reends referring to the same file but actually when you look at them they're different","width":492},{"text":"You're nodding your head how would you do that?","width":633},{"text":"Okay","width":278},{"text":"Okay, that's a good idea.","width":352},{"text":"Okay so, for example, slash home slash angrave slash um","width":630},{"text":"Uh one dot text","width":165},{"text":"might be the same as just \"Hey current directory\" slash one dot text","width":399},{"text":"Okay give me another way that I could refer to these files?","width":548},{"text":"Yeah","width":229},{"text":"Well some kind of weird double echo race condition thing going on. kay","width":683},{"text":"Okay so go up one directory then go back into angrave","width":397},{"text":"And then go into one dot text again","width":194},{"text":"Okay any other way? Yup?","width":258},{"text":"Okay, tilda actually is is a cheat that's actually part of the shell","width":333},{"text":"So that so tilda is expanded already. Um how about?","width":222},{"text":"dot slash dot slash dot slash","width":294},{"text":"dot dot slash angrave","width":257},{"text":"slash some subdirectory then go back up turn left right","width":450},{"text":"etc right? we could invent these crazy paths which after we've followed them","width":392},{"text":"we finally get to the file, I also mentioned these things called symbolic links. ","width":224},{"text":"Maybe we follow a symbolic link so we go to the file yeah awesome","width":520},{"text":"dot text which actually resolves to our original file","width":322},{"text":"So how do I know that these files are actually referred to the same thing?","width":233},{"text":"The answer is we need to reduce them down to the canonical form","width":256},{"text":"and the beautiful thing about a canonical form is that if you have a canonical path and I have a canonical path","width":403},{"text":"and they are identical then they must refer to the same file","width":355},{"text":"Why? cause that's the definition of a canonical path","width":361},{"text":"So is uhh it's not necessary an absolute path. Not all absolute paths are canonical","width":496},{"text":"but you can be sure that if two canonical paths are identical, they are talking about the same file","width":502},{"text":"right how do I get the canonical path?","width":157},{"text":"Well you give me any path you want","width":395},{"text":"I'll call realpath on it","width":150},{"text":"it will follow that follow any sym links that you happen to refer to follow any dot dots etc etc etc","width":403},{"text":"and then finally it'll give me an actual path. I can use that and later I'll just free it","width":701},{"text":"You can pass in a buffer but in practice don't bother just let malloc make sure it gives you enough path enough space","width":498},{"text":"Now I mentioned this because actually we can use this for security","width":218},{"text":"suppose you were to make a web server you probably don't want a web server to be able to serve all possible files","width":651},{"text":"on your hard disk drive","width":197},{"text":"Cause if it can, you bet your dollar I'm going to be looking for slash etc slash password","width":465},{"text":"Aight. Or your ssh uh private key","width":318},{"text":"we'll try to download that","width":389},{"text":"And in fact, these kinds of tricks are used to escape the current directory or the root of the webserver","width":487},{"text":"and uh we want to try to prevent that so one way when you're checking directories is to convert it into a canonical path","width":452},{"text":"and then check that it actually truly starts with the based directory that you care about","width":460},{"text":"so for example the user is trying to get an image from your image directory ","width":217},{"text":"not trying to download your password file as an image","width":451},{"text":"I've encountered numerous server programs that don't do this check","width":329},{"text":"so for example, uh I can get a printer to include using uh postscript and other commands","width":462},{"text":"to include a local file from the printer and therefore print out the printer's own password and other information you want about the printer","width":412},{"text":"whoops","width":217},{"text":"So anyways so thats so real path next time we want to write a robust server, remember this it's useful security tool","width":576}],
  // Part 5
  [{"text":"Okay right","width":214},{"text":"Question for your neighbor and yourself","width":214},{"text":"Does the inode contain the filename?","width":227},{"text":"Choose now","width":142},{"text":"Hundred internet points if you get the correct answer","width":1186},{"text":"Okay","width":132},{"text":"Right","width":62},{"text":"If you think the answer is ","width":275},{"text":"No, it's not part of the inode","width":171},{"text":"give yourself a pat on the back or or or or or","width":223},{"text":"shake hands with your neighbor alright?","width":153},{"text":"if you thought the answer was yes","width":148},{"text":"exits are this way and this way","width":214},{"text":"there are still majors look there are still majors looking for other people","width":270},{"text":"no it does not, remember okay? it does not","width":153},{"text":"the inode, the file does not know about it's own file name","width":263},{"text":"okay? that's the most important thing the most important point today we've got today okay","width":299},{"text":"and it allows us then to do  the following,","width":191},{"text":"i can have same file","width":201},{"text":"appear twice in my file system","width":417},{"text":"this seems impossible","width":177},{"text":"if you still think the file name is the file","width":429},{"text":"how can i get","width":119},{"text":"a file to appear twice?","width":151},{"text":"in two different places","width":100},{"text":"what do i need to do?","width":106},{"text":"yes","width":133},{"text":"I could yep hard link it. what's actually to my directory entries?","width":594},{"text":"Yes! thank you! remember my directory entries are just name inode number","width":392},{"text":"Somewhere over the mountain I've got two entries","width":252},{"text":"With a name1 that goes to a node1","width":210},{"text":"and another one","width":103},{"text":"in another directory I've got a name to and it happens to point to the same inode number","width":407},{"text":"I've better singing otherwise anyway alright so","width":224},{"text":"thank you","width":43},{"text":"I just made that up okay","width":169},{"text":"Yeah so look here's one directory remember all the directory is just some data it","width":278},{"text":"all that data is just a name and an inode number","width":196},{"text":"inside another directory we've got  a different name somewhere","width":198},{"text":"but it happens to point to the same inode number","width":127},{"text":"My goodness! So if I go into these two directories try to actually open the file,","width":262},{"text":"I open up this file","width":162},{"text":"and you can talk about this file when you talk about inodes","width":153},{"text":"and I start reading the bytes I'm talking about the same file","width":166},{"text":"That means if I change the content of this file","width":199},{"text":"then that file in that other directory changes as well why?","width":261},{"text":"because it's the same beep file","width":351},{"text":"okay?","width":143},{"text":"This looks impossible if you're sitting at the command line and you know","width":252},{"text":"you got two shells open and you're actually changing the contents of one file ","width":254},{"text":"and you've got another one other here","width":74},{"text":"and you cd-ed to a different directory ","width":96},{"text":"Oh my goodness! this is crazy, no it's not","width":165},{"text":"just remember this, it's just an inode","width":149},{"text":"we've just got two different places that happen to refer to the same inode number","width":233},{"text":"okay how do I do that?","width":194},{"text":"I can use a hard link","width":467},{"text":"How do I do that? There's a command called ln","width":534},{"text":"So link allows me to make another entry","width":235},{"text":"to an existing file","width":165},{"text":"let's see if I can pull up the manpage a moment","width":1086},{"text":"So you type this into a terminal and congratulations you've now got two files, two entries","width":435},{"text":"which point to the same inode","width":168},{"text":"so you could type say for example link","width":193},{"text":"hey here's my file slash home blah blah blah blah blah","width":204},{"text":"uh file1","width":99},{"text":"this better exists so it can pull out the inode number of that file","width":192},{"text":"and then go somewhere else uh blhblahblahhblah file different name","width":775},{"text":"alright so for this magic to occur, we want to be able to know when those disk blocks become available ","width":398},{"text":"for resuse, that means an inode has to do this","width":655},{"text":"has to some reference counting","width":140},{"text":"in other words, how many directory entries ","width":267},{"text":"actually refer to this inode","width":169},{"text":"if i reduce that down to 0","width":103},{"text":"I know nobody cares about me","width":193},{"text":"alright and we can resuse that inode and we reuse the disk blocks associated with the file","width":489},{"text":"so everytime you link, we're gonna increment the reference count, ","width":245},{"text":"everytime we link you add a hard link","width":270},{"text":"we implement the reference count","width":451},{"text":"now you might wonder, can i do this with directories as well","width":369},{"text":"right? could could my filenames here be directories","width":397},{"text":"and the answer is","width":163},{"text":"yes kind of","width":122},{"text":"no","width":128},{"text":"right","width":58},{"text":"so why yeah kind of no, here's why","width":348},{"text":"the operating system the repair tools","width":215},{"text":"all assume that directories are tree based structure","width":359},{"text":"if you are allowed to start messing with this hard links for directories","width":339},{"text":"you could violate that assumption","width":186},{"text":"you could set up a directory which has two paths","width":224},{"text":"you could set up a uh file system hierarchy","width":293},{"text":"which never ends right? you keep going into subdirectories and you come back round to the top somewhere","width":406},{"text":"and so all of the tools for following inodes wouldn't be to complete","width":283},{"text":"so in practice, filesystems typically prevent you from doing this","width":370},{"text":"right? even root cannot do this on most file systems","width":203},{"text":"the file systems C code says Hahaha no","width":213},{"text":"right nice try but no","width":141},{"text":"right so you can only do this with with regular files you can't do it with directories","width":511},{"text":"Right","width":100},{"text":"Questions?","width":287},{"text":"So what have we said? we just said that","width":116},{"text":"hard link is easy we just make a","width":153},{"text":"another entry inside a directory with a different name for the same inode","width":408},{"text":"and you can do it using this link tool, this link command","width":512}],
  // Part 6
  [{"text":"Right uh we got time to talk about provisions or the mode bits","width":494},{"text":"Here's some example ways of changing who can do what to a file","width":327},{"text":"you're going to see these numbers uh quite typically 644, 755","width":390},{"text":"and they're written in octal and reading octal is really easy","width":332},{"text":"we just decode each digit into three binary bits right? four two and one","width":437},{"text":"and so instead reading four turn and one think read write execute","width":367},{"text":"so what's this? this is change the mode bits of this particular file sandwich","width":570},{"text":"into","width":255},{"text":"read and write for me or the owner of sandwhich, read for the group, read for everybody else","width":469},{"text":"so if you're not in the group you're not me, you get the read, so you get to see the contents of sandwhich but you cant modify and you can't execute it","width":845},{"text":"what's uh 755?","width":259},{"text":"what permissions do I get or what permissions does the owner of the file get?","width":397},{"text":"read write execute, four two and one. everybody else gets what? read and execute","width":899},{"text":"So that's a very common way of setting permissions, there are other ways to do it","width":308},{"text":"uh you can do it symbollically so this means hey subtract the write permission from all three uh types of users","width":567},{"text":"uh this means subtract read and exewcute permission from the uh owner or other I forget I'll look it up","width":503},{"text":"personally I prefer the octal numbers","width":374},{"text":"what's wrong with the file that has the following permission?","width":753},{"text":"let's suppose on the file system you found a file that was owned by root","width":486},{"text":"and had those permissions? what if you find what could you do to this?","width":797},{"text":"right what does 7 mean? read write and execute, so first of all here's a file that  anybody can execute","width":422},{"text":"anybody can run","width":150},{"text":"anybody can read it but also anybody can write it","width":363},{"text":"muahahhahaha so now you don't delete the file you changed the contents of the file and next time someone runs it they run the code that you put inside it","width":677},{"text":"so if you find a file like this, this is a security risk","width":541},{"text":"right so uh you could play with chmod um from the shell","width":410},{"text":"you can also use","width":278},{"text":"chown to change the owner","width":229},{"text":"so for example uh I could change the owner to user angrave on a file","width":792},{"text":"but of course I just can't change any old that will be a security risk so only um the ","width":415},{"text":"super user can just modify any arbitrary file so only root can can override a particular ownership like this","width":658},{"text":"and you could do this from code as well, so you can set the permission bits or the mode bits on on a particular path","width":1191},{"text":"Alright there's two other bits inside of the mode","width":355},{"text":"integer that are useful, set group which I won't talk about.","width":428},{"text":"instead let's just finish the lecture with set user ID","width":450},{"text":"And uh ","width":255},{"text":"","width":3},{"text":"There's an example, have you heard of sudo?","width":400},{"text":"Right what does sudo do?","width":453},{"text":"Okay right, so supposed you have a command called, makemeasandwhich","width":742},{"text":"Which only root can execute","width":467},{"text":"sudo says okay change into the root user for a moment and run this command","width":579},{"text":"right so maybe you wanna format a disk which as a as a mere mortal in the system  you don't permissions to run this command","width":546},{"text":"because the command itself has say the following permissions ","width":233},{"text":"right makemeasandwhich might be owned by root and might be uh let's see we want it to be um","width":462},{"text":"executable by root and everybody can't even can't even read it","width":313},{"text":"right so if we could put sudo in front, sudo takes its arguments and runs it as root","width":400},{"text":"so on your virtual machines this is quite a useful command if you briefly want to become a root","width":600},{"text":"so how does sudo work?","width":193},{"text":"sudo has to have root permission to be able to do the things it wants to do like run things as root","width":344},{"text":"so the sudo command itself","width":166},{"text":"has this set user id bit set so that when it is executed it doesn't run as you as the calling uh user of the process","width":706},{"text":"uh it actually runs as a different user it actually runs as root","width":301},{"text":"so that's the purpose of this set-user-ID-on-execution bit it's you can change","width":337},{"text":"the effective user of the process once the process starts","width":324},{"text":"and the example of using that is sudo and uh if you wanna see sudo makemeasandwhich it's a popular xkcd comic","width":624},{"text":"right with that, have a wonderful week. I'll see you on friday and uh have fun in discussion section","width":512}],

  // Start Lecture Video 30
  // Part 0
  [{"text":"alright, let's try that","width":9007.181818246841},{"text":"alright, good morning ladies and gentlemen","width":159.18181824684143},{"text":"minor technical difficulties this morning","width":138.18181824684143},{"text":"my laptop decided to freeze","width":124.18181824684143},{"text":"one second out of four","width":140.18181824684143},{"text":"never seen that before, guess it must be because we're trying to have a demo today","width":250.18181824684143},{"text":"right, so here's what we're going to do today","width":103.18181824684143},{"text":"I'm going to introduce you to one of the coolest things you can do in system programming","width":217.18181824684143},{"text":"and that is memory-mapped files","width":206.18181824684143},{"text":"so cast your mind back to when we said that","width":231.18181824684143},{"text":"we had virtual memory and our addresses are mapped to different parts of physical memory","width":440.18181824684143},{"text":"and this happens magically without our programs having to do anything","width":223.18181824684143},{"text":"well now we need to actually take control of that mechanism","width":213.18181824684143},{"text":"and we can ask for a file on disk","width":263.18181824684143},{"text":"to be mapped directly into our memory","width":203.18181824684143},{"text":"that's pretty cool if you think about it","width":84.18181824684143},{"text":"if you actually had, say, some structured data","width":118.18181824684143},{"text":"on memory, you could immediately jump to a certain area of the file","width":193.18181824684143},{"text":"and read it, without having to write","width":149.18181824684143},{"text":"read calls, fread calls, fc calls, that kind of stuff","width":203.18181824684143},{"text":"you can just say: \"Hey! I know where is is in memory","width":116.18181824684143},{"text":"I can just read that memory\"","width":123.18181824684143},{"text":"and the operating system will say \"Hah!","width":144.18181824684143},{"text":"I don't have those particular bytes","width":143.18181824684143},{"text":"actually on RAM yet, let me do it for you! Hold on a second","width":166.18181824684143},{"text":"we'll pause your process, and we'll pull in those bytes","width":186.18181824684143},{"text":"and we'll release you again","width":106.18181824684143},{"text":"so you can immediately see the contents of the file.\"","width":183.18181824684143},{"text":"The other cool thing we can do with this","width":118.18181824684143},{"text":"is if we mapped","width":146.18181824684143},{"text":"some memory using mmap","width":161.18181824684143},{"text":"and we then fork()","width":140.18181824684143},{"text":"we can now communicate between two processes","width":202.18181824684143},{"text":"directly, using some memory addresses","width":220.18181824684143},{"text":"so we'll play with that today","width":114.18181824684143},{"text":"if I can get my laptop to restart","width":123.18181824684143},{"text":"and play","width":195.18181824684143},{"text":"play correctly, okay","width":656.1818182468414},{"text":"alright so whilst that is ","width":137.18181824684143},{"text":"warming up. I've set it to gas mark 350div class=\"caption-track-final-caption ui-resizable\" draggable=\"true\" contenteditable=\"true\" style=\"width:8832px\">alright, let's try that<div class=\"ui-resizable-handle ui-resizable-e\" style=\"z-index: 90;\"></div></div>fwwar","width":208.18181824684143},{"text":"let me tell you about a couple of useful commands here","width":156.18181824684143},{"text":"one is dd","width":130.18181824684143},{"text":"so if you ever want to just copy some bytes","width":149.18181824684143},{"text":"from one place to another","width":144.18181824684143},{"text":"and you want to take control of exactly how many bytes","width":226.18181824684143},{"text":"to copy rather than, say, copying the whole file,","width":135.18181824684143},{"text":"dd is useful","width":122.18181824684143},{"text":"it will open","width":100.18181824684143},{"text":"one path","width":63.18181824684143},{"text":"and open a right path","width":96.18181824684143},{"text":"and you can say how many bytes to copy","width":99.18181824684143},{"text":"so, for example, the following copies some bytes","width":183.18181824684143},{"text":"from /dev/urandom to ~ (tilde)","width":183.18181824684143},{"text":"okay you and I know that ~ (tilde) means...","width":224.18181824684143},{"text":"the dog was here","width":43.18181824684143},{"text":"yes, that","width":57.18181824684143},{"text":"it means my home directory","width":94.18181824684143},{"text":"so I'm going to make a file called \"secret.txt\"","width":185.18181824684143},{"text":"hopefully the NSA doesn't try to decrypt this file","width":135.18181824684143},{"text":"because, in fact, it's just random bytes","width":102.18181824684143},{"text":"(evil laughter)","width":144.18181824684143},{"text":"and how big should it be?","width":93.18181824684143},{"text":"well, I want each block size to be 1k and count of 1024","width":263.18181824684143},{"text":"in other words","width":52.18181824684143},{"text":"my total file size will be a megabyte","width":214.18181824684143},{"text":"I could, if I wanted to overwrite my secret file","width":236.18181824684143},{"text":"start reading bytes from /dev/zero","width":193.18181824684143},{"text":"and again the file's going to be the samedfan","width":153.18181824684143},{"text":"and again, I'm going to make a file that is the same size","width":288.18181824684143},{"text":"equivalently, I could have set my block size to be","width":523.1818182468414},{"text":"1 byte, and","width":233.18181824684143},{"text":"put in a million here or whatever ","width":97.18181824684143},{"text":"[gibberish]","width":104.18181824684143},{"text":"so we'll pretend I know that calculation","width":191.18181824684143},{"text":"there we go","width":117.18181824684143},{"text":"and that would've caused the same number of bytes","width":85.18181824684143},{"text":"but it wouldn't have been quite so efficient","width":153.18181824684143},{"text":"we would have made very small calls so it would have been a little bit slower","width":290.18181824684143},{"text":"I can also use","width":197.18181824684143},{"text":"the following file as a place to send my output","width":180.18181824684143},{"text":"/dev/null","width":134.18181824684143},{"text":"here's some wonderful things about storing things inside /dev/null :","width":225.18181824684143},{"text":"you can store as much as you want inside /dev/null","width":459.18181824684143},{"text":"but it ain't coming back","width":261.18181824684143},{"text":"so this is perfect place to store your","width":213.18181824684143},{"text":"your love letters from past girlfriends, dogs, cats, goldfish, whatever","width":424.18181824684143},{"text":"because no one will ever find them","width":337.18181824684143},{"text":"that you've got this perfect storage","width":113.18181824684143},{"text":"of course, it's infinitely compressable as well","width":133.18181824684143},{"text":"you can send as many bytes as you want to /dev/null, and it won't use any disk space","width":244.18181824684143},{"text":"why? it's not a real place in your disk","width":255.18181824684143},{"text":"it's not part of your disk's filesystem","width":350.18181824684143},{"text":"there's something special about this /dev","width":286.18181824684143},{"text":"you won't find it actually listed in your disk","width":231.18181824684143},{"text":"anywhere, oh good my machine has booted up, now we can actually play","width":639.1818182468414},{"text":"instead, it's a virtual filesystem","width":908.1818182468414},{"text":"hooray! okay good","width":552.1818182468414},{"text":"okay, right, so","width":67.18181824684143},{"text":"let's go into, what have I got","width":266.18181824684143},{"text":"so I want to find anything that talks about","width":136.18181824684143},{"text":"CS and ends in a '1'","width":228.18181824684143},{"text":"so that star is an example of globbing","width":153.18181824684143},{"text":"the filesystem doesn't do that; the shell does","width":244.18181824684143},{"text":"the shell says \"Okay, I'll try to find all matching things that match that pattern","width":296.18181824684143},{"text":"you could have done that for parshell for example","width":192.18181824684143},{"text":"anyway, so let's go into our demo two today","width":287.18181824684143}],
  // Part 1
  [{"text":"why did we not find it?","width":465.18181824684143},{"text":"oh because I want to go into... oh","width":593.1818182468414},{"text":"cd cs241","width":312.18181824684143},{"text":"okay good, right, we're in the right place","width":321.18181824684143},{"text":"okay, so we talked about file globbing","width":247.18181824684143},{"text":"and uh, oh yes here's another little useful command","width":378.18181824684143},{"text":"let's have a look at, say the timestamp for mmap","width":523.1818182468414},{"text":"and you'll see I made it this morning at 10:46","width":293.18181824684143},{"text":"yeah, I was busy just before lecture","width":336.18181824684143},{"text":"I can change that timestamp","width":178.18181824684143},{"text":"just by calling touch, so if I say touch, and here's the file","width":381.18181824684143},{"text":"oh I cannot touch it, why?","width":535.1818182468414},{"text":"who owns the file?","width":163.18181824684143},{"text":"root, right, and","width":111.18181824684143},{"text":"only root has read and write permissions","width":138.18181824684143},{"text":"okay, so, let's become root, alright, so I can do sudo, and that will give me root permissions","width":423.18181824684143},{"text":"I'm going to do sudo -s because I want to stay as root","width":419.18181824684143},{"text":"alright, then, let's touch that file","width":128.18181824684143},{"text":"and if we do that","width":611.1818182468414},{"text":"wait we've just updated the timestamp","width":249.18181824684143},{"text":"so why would that be useful with make?","width":723.1818182468414},{"text":"what does make use?","width":287.18181824684143},{"text":"the makefile, yes, and inside of the makefile you write rules","width":233.18181824684143},{"text":"and those rules depend upon the timestamps","width":168.18181824684143},{"text":"it compares the modified time of the executable, or the output of each rule","width":327.18181824684143},{"text":"and all of the sources","width":114.18181824684143},{"text":"so, if we've touched our input file, then we can force make to","width":379.18181824684143},{"text":"remake any executables or libraries that depend upon this file","width":226.18181824684143},{"text":"so useful, for example, if you've just changed your compiler options","width":309.18181824684143},{"text":"say if you wanted to add a debug flag, and rather than, say","width":258.18181824684143},{"text":"doing make clean or manually removing stuff","width":281.18181824684143},{"text":"just simply updating the timestamp is sufficient","width":351.18181824684143},{"text":"by the way, with make, you're not limited to just setting the timestamp at the current time","width":382.18181824684143},{"text":"you could even set it tomorrow, so you could say","width":102.18181824684143},{"text":"\"Hey, look, my homework wasn't done until tomorrow\" or something","width":190.18181824684143},{"text":"so, you could actually modify the other timestamps","width":206.18181824684143},{"text":"but we won't play with that today","width":113.18181824684143},{"text":"but there's just a cute little useful tool sometimes to be able to modify the meta information about the file","width":706.1818182468414},{"text":"let me make a new file, okay, so here's a new empty file","width":514.1818182468414},{"text":"and this file only has the permissions of read and write for root","width":485.18181824684143},{"text":"let me check my umask","width":678.1818182468414},{"text":"that's actually a poor demo, because root is special","width":251.18181824684143},{"text":"I'm going to get out of being root","width":394.18181824684143},{"text":"let's make another one, touch empty","width":303.18181824684143},{"text":"okay so here's a better demo, root is a special case","width":222.18181824684143},{"text":"so when I make a file normally, I have read and write permissions","width":316.18181824684143},{"text":"and so does my group","width":86.18181824684143},{"text":"and everybody else does not have those permissions","width":206.18181824684143},{"text":"why is that? in part it's to do with my umask","width":325.18181824684143},{"text":"where the umask is one of the options that controls","width":236.18181824684143},{"text":"what permissions are taken away from a file","width":320.18181824684143},{"text":"so if I change my umask","width":363.18181824684143},{"text":"to be 777, I can subtract everything from those files","width":308.18181824684143},{"text":"let me make another file now, and look at that","width":354.18181824684143},{"text":"now we haven't got any permission to read this file at all","width":138.18181824684143},{"text":"or write it, or execute","width":81.18181824684143},{"text":"umask is a subtractive operation, it masks out some of the default bits that","width":353.18181824684143},{"text":"we would have otherwise set on the permissions of each file","width":263.18181824684143},{"text":"it's not the only thing that controls the default permissions of new files","width":250.18181824684143},{"text":"but it is part of your process","width":179.18181824684143},{"text":"so I'm playing with this inside of the shell","width":163.18181824684143},{"text":"but we could also do this inside of a C program aswell","width":203.18181824684143},{"text":"and so if you want to securely create a set of files","width":421.18181824684143},{"text":"where you don't want anyone to be able to, say, read them","width":221.18181824684143},{"text":"or you're going to create a lot of files then","width":191.18181824684143},{"text":"setting umask first is a good security operation","width":230.18181824684143},{"text":"you're subtracting the bits that you don't want set so","width":323.18181824684143},{"text":"in this case I said \"hey, take everything off, we don't want read or write or anything\"","width":255.18181824684143},{"text":"if I had said umask, let's do 600","width":827.1818182468414},{"text":"what have I done now?","width":73.18181824684143},{"text":"I've taken my own bits off","width":63.18181824684143},{"text":"6, my read and write aren't there, m","width":211.18181824684143},{"text":"but I've let through the group and the world access rights","width":496.18181824684143},{"text":"so what's a typical umask? a typical umask is 022","width":339.18181824684143},{"text":"that's a typical default value. What does that do? What does that subtract?","width":531.1818182468414},{"text":"remember we're thinking in octal, so each one of these values","width":247.18181824684143},{"text":"remember, is read write execute combined into an octal number","width":336.18181824684143},{"text":"so for ourselves we're subtracting nothing, but what about the group and others?","width":373.18181824684143},{"text":"we're subtracting write","width":111.18181824684143},{"text":"we don't want anyone to write our files by, anyone else to write our files","width":595.1818182468414},{"text":"if you actually read the manpage of write and other things you'll actually find references to umask","width":346.18181824684143},{"text":"so here's one other piece that controls the creation of files","width":241.18181824684143},{"text":"it does not effect existing files, it's only during the creation of new files and new directories","width":574.1818182468414},{"text":"it also creates, effects directories","width":168.18181824684143},{"text":"so let's play with this","width":178.18181824684143},{"text":"I will make a new directory","width":345.18181824684143},{"text":"So let's turn everything off (evil laughter)","width":199.18181824684143},{"text":"and I'll make a subdirectory","width":318.18181824684143},{"text":"and I will try to make inside subdir1","width":273.18181824684143},{"text":"another file, so mydata.txt","width":513.1818182468414},{"text":"oh, I get permission denied, I cannot write into the contents of this directory","width":358.18181824684143},{"text":"why not? because we took the execute bit","width":270.18181824684143},{"text":"off the directory, so here's something a little strange","width":236.18181824684143},{"text":"the execute bit for a directory means, can I actually see the contents of the directory","width":429.18181824684143},{"text":"not the name of the directory, because that's not part of the actual directory","width":231.18181824684143},{"text":"but the name of the directory is back inside of the closing directory, in the parent directory","width":364.18181824684143},{"text":"it's can I actually open the directory and look inside and see what files are stored there","width":339.18181824684143},{"text":"so I couldn't go into subdir1","width":222.18181824684143},{"text":"and in fact if I tried to list the contents of subdir1","width":304.18181824684143},{"text":"I get \"No! you can't open that directory!\"","width":123.18181824684143},{"text":"because it's not executable","width":138.18181824684143}],
  // Part 2
  [{"text":"so let's change our permissions","width":425.18181824684143},{"text":"so change mod, and I will change it to now","width":381.18181824684143},{"text":"what's a reasonable permission for directories?","width":134.18181824684143},{"text":"well maybe we want to be able to read write it and execute it, of course","width":230.18181824684143},{"text":"and we want other people to be able to read and execute it, so if I do that","width":437.18181824684143},{"text":"then now I can make my file","width":428.18181824684143},{"text":"and now if I do a d so I can actually see the subdirectory itself","width":573.1818182468414},{"text":"you'll see that yes, we're a directory","width":102.18181824684143},{"text":"and yes, I've got the read write execute for myself and execute and read for everybody else","width":611.1818182468414},{"text":"that was a very quick introduction to umasks and touching things","width":348.18181824684143},{"text":"and file globbing. Any quick questions about this?","width":356.18181824684143},{"text":"Alright, conceptually not hard, as I said the only surprise","width":173.18181824684143},{"text":"is that for directories, two bits is the execute bit","width":957.1818182468414},{"text":"that controls whether you can see inside","width":351.18181824684143},{"text":"the directory","width":103.18181824684143},{"text":"so no the directory's name, but whether you can actually go in and see the contents of a directory","width":318.18181824684143},{"text":"what files and other directories did I put inside of it","width":156.18181824684143},{"text":"and for the umask, remember it's a mask","width":335.18181824684143},{"text":"you're subtracting things that otherwise would have been set","width":250.18181824684143},{"text":"and it's only for new files and directories","width":1221.1818182468414},{"text":"so nothing conceptually very hard","width":203.18181824684143},{"text":"now, here's the fun part, let's","width":234.18181824684143},{"text":"let's have a look at some of these other filesystems","width":178.18181824684143},{"text":"I've already mentioned /dev as ","width":194.18181824684143},{"text":"this completely different filesystem that's not actually a part of my disk","width":305.18181824684143},{"text":"and so that's the big idea, that I've got one","width":227.18181824684143},{"text":"set of paths in","width":164.18181824684143},{"text":"POSIX that I start with slash","width":213.18181824684143},{"text":"and go from there, everything's underneath this single slash","width":214.18181824684143},{"text":"all of my other things that I want to add","width":138.18181824684143},{"text":"all of my USB keys I put in","width":126.18181824684143},{"text":"all of my virtual directories and","width":308.18181824684143},{"text":"virtual filesystems are going to be underneath this root","width":369.18181824684143},{"text":"Windows used to have a different idea, it would say","width":233.18181824684143},{"text":"I'll put one disk inside of C:\\, I'll put one disk inside of D:\\","width":249.18181824684143},{"text":"and we better not have more than 26 disks or we'll run out of letters","width":297.18181824684143},{"text":"that was the old kind of DOS way of doing things, thank goodness we've gone past that now","width":264.18181824684143},{"text":"but anyways back in POSIX","width":113.18181824684143},{"text":"we all start here, and we can add the virtual filesystems","width":387.18181824684143},{"text":"underneath specific directories of our filesystem","width":240.18181824684143},{"text":"so we've got /dev, there's a couple of others","width":310.18181824684143},{"text":"here they are:","width":185.18181824684143},{"text":"/proc and /sys","width":280.18181824684143},{"text":"right, so how can we find out about these?","width":177.18181824684143},{"text":"glad you asked! Let's have a look at a little demo here","width":801.1818182468414},{"text":"I want you to cast your mind back to","width":229.18181824684143},{"text":"before you were born and","width":241.18181824684143},{"text":"filesystems were heavy","width":258.18181824684143},{"text":"not something you would carry around in your pocket","width":166.18181824684143},{"text":"but literally something you had to lift with both hands","width":251.18181824684143},{"text":"because it was a huge tape, a huge disk","width":200.18181824684143},{"text":"and you'd lift it and you'd mount it onto a spindle","width":164.18181824684143},{"text":"and spin it up","width":237.18181824684143},{"text":"the command for looking at and thinking about filesystems is mount","width":403.18181824684143},{"text":"tell me what's mounted, tell me what's been put into my machine","width":245.18181824684143},{"text":"and by default we get a big list and we can see it","width":233.18181824684143},{"text":"and we discover, oh look, I've got a whole load of different filesystems","width":268.18181824684143},{"text":"mounted on different points inside of my filesystem","width":159.18181824684143},{"text":"so I've got one called /srv","width":237.18181824684143},{"text":"some of these are going out onto the network, etc","width":203.18181824684143},{"text":"I've got something called tmp","width":75.18181824684143},{"text":"oh, here are the one's I've just been talking about, /proc and /sys","width":295.18181824684143},{"text":"and there'd be /dev somewhere aswell","width":263.18181824684143},{"text":"so there are different types","width":164.18181824684143},{"text":"a lot of the ones we're looking at here, as you can see, are ext4","width":247.18181824684143},{"text":"which is the modern-day equivalent of ext2 which we've already studied","width":405.18181824684143},{"text":"and we could add more to this","width":95.18181824684143},{"text":"so if we plug in a USB key, for example","width":135.18181824684143},{"text":"you would see it appear here","width":128.18181824684143},{"text":"if I mounted a DVD or CD it would appear here","width":262.18181824684143},{"text":"our filesystems don't need to be on external devices","width":215.18181824684143},{"text":"they can even be inside of a file","width":221.18181824684143},{"text":"so here's a file I downloaded earlier","width":342.18181824684143},{"text":"it's a .iso image","width":128.18181824684143},{"text":"meaning that I could copy these bytes using, which command?","width":377.18181824684143},{"text":"dd, yes, onto a say USB key","width":289.18181824684143},{"text":"or onto a DVD-ROM, but","width":261.18181824684143},{"text":"I actually want to have a look to see what's inside this file","width":349.18181824684143},{"text":"it's just a sequence of bytes, it's just a filet'","width":156.18181824684143},{"text":"but allegedly this is actually a filesystem inside this file","width":362.18181824684143},{"text":"so how can we do that?","width":105.18181824684143},{"text":"first of all we need to make a directory","width":128.18181824684143},{"text":"where we're going to mount this filesystem","width":265.18181824684143},{"text":"so let me call it stuff","width":269.18181824684143},{"text":"and you know right now if I look inside stuff there's nothing there!","width":272.18181824684143},{"text":"oops, cannot open directory? why is that?","width":408.18181824684143},{"text":"probably because my umask, oh alright, okay, thank you umask","width":348.18181824684143},{"text":"fix my umask, okay","width":102.18181824684143},{"text":"make directory stuff2","width":399.18181824684143},{"text":"so there's nothing inside of that directory","width":125.18181824684143},{"text":"what I'm going to do now is that that iso file","width":166.18181824684143},{"text":"and say to the kernal, \"Treat this file that I just downloaded using wget","width":493.18181824684143},{"text":"and pretend that it's a real disk somewhere and start being able to read from it\"","width":369.18181824684143},{"text":"now you know that when you write disk commands","width":161.18181824684143},{"text":"you actually read in chunks, not at a byte at a time","width":203.18181824684143},{"text":"we're not doing fseek() and fread(), we want to read 4K blocks","width":239.18181824684143},{"text":"so we need one additional magic command with mount","width":191.18181824684143},{"text":"to say, okay, loop it back and wrap it","width":216.18181824684143},{"text":"wrap this this file and turn it and treat it as if it's a full","width":289.18181824684143},{"text":"as if it is a block-based device","width":248.18181824684143},{"text":"so let's do this, let's switch into root mode here","width":447.18181824684143},{"text":"okay, where's my little file?","width":162.18181824684143},{"text":"let me play with globbing, so there we go","width":165.18181824684143},{"text":"match any files that start with that, and I know it's just one of them today","width":240.18181824684143},{"text":"okay, and I want to mount it on a particular directory","width":204.18181824684143},{"text":"so, we had stuff2","width":223.18181824684143},{"text":"oh, it didn't work because I didn't add the loop option","width":194.18181824684143},{"text":"yes the .iso file I want to treat as a block-based device","width":306.18181824684143},{"text":"so I need that one last option. Great, it works, and now","width":151.18181824684143},{"text":"we can, if I look at my mount listings, see that we've got that file","width":398.18181824684143},{"text":"mounted inside of my directory as this iso9660","width":239.18181824684143},{"text":"which is a standard for CD-based filesystems","width":259.18181824684143},{"text":"and it's using particular loop-based device to turn it into a block-based device","width":256.18181824684143},{"text":"great, let's go and have a look","width":77.18181824684143}],
  // Part 3
  [{"text":"wrong directory","width":448},{"text":"there it is! right, I can now explore","width":184},{"text":"this filesystem. In fact I can say hey","width":141},{"text":"find me all of the files","width":75},{"text":"there we go, find me all of the files that match, say","width":416},{"text":"something beginning with efi","width":229},{"text":"and I can actually see what's inside of this filesystem","width":232},{"text":"let me try and change it","width":127},{"text":"say, \"Angrave was here\"","width":372},{"text":"and this will fail because","width":350},{"text":"our filesystem is read-only","width":189},{"text":"so not only do we have umask control what we can do","width":210},{"text":"our entire file systems have different capabilities","width":321},{"text":"and so our iso9660 our CD-ROM based filesystem is only good for reading from ","width":553},{"text":"We cannot today change the contents ","width":385},{"text":"and if I actually mounted a different kind of file system, I could","width":144},{"text":"I could have actually written into this set of files","width":306},{"text":"and that would have changed the outer file, would have changed the .iso","width":291},{"text":"and that's the beginnings of how we can make virtual machines","width":185},{"text":"we can set up a complete file system for a virtual machine to boot from","width":254},{"text":"as just a single file","width":139},{"text":"Ok, right, so now I want to","width":198},{"text":"unmount it, I think I've shown you everything I want to show you here","width":272},{"text":"okay, so how do I unmount things?","width":139},{"text":"umount. I don't know what happened to the 'n'","width":196},{"text":"right, but it's umount","width":107},{"text":"okay, so we better find the thing to umount","width":182},{"text":"alright, so here's my mount, I just want to find things to do","width":230},{"text":"with that .iso, so let's take the output of mount","width":199},{"text":"pipe it into the input of grep","width":198},{"text":"and grep will only print me lines that match my pattern","width":244},{"text":"so I'm going to look for things that match .iso","width":231},{"text":"here it is, that one line, that saves me a bit of eye search trying to find it","width":290},{"text":"okay, so now I can umount on angrave/demo2/stuff2","width":1089},{"text":"did I miss something?","width":219},{"text":"oh cs241 thank you","width":393},{"text":"It's busy?!?!","width":141},{"text":"Why is it busy?","width":421},{"text":"I'll give you a hint:","width":424},{"text":"we're currently in there, that's currently our directory","width":187},{"text":"so the kernal says, \"I'm sorry","width":121},{"text":"someone's using this device right now, I can't let you unmount that","width":286},{"text":"because I've got another process trying to read its contents\"","width":184},{"text":"So let me go up one directory","width":280},{"text":"okay, so now I've unmounted it","width":474},{"text":"there we go","width":84},{"text":"and now there's nothing let inside stuff, we're back to an empty directory again","width":452},{"text":"okay so we're seeing the","width":90},{"text":"lifestyle, sorry, the lifecycle of mounting and unmounting","width":322},{"text":"we've played with grep","width":83},{"text":"now let's play with some virtual filesystems","width":1065},{"text":"alright so if you ever want to just clear the screen","width":69},{"text":"clear is useful, if you've messed up your terminal","width":160},{"text":"reset tries to do some things reasonable","width":646},{"text":"let's have a look at a couple of these files","width":224},{"text":"let's have a look at, say, hex dump of zero","width":388},{"text":"if I start reading from /dev/zero","width":181},{"text":"I can just get a whole load of zeros","width":184},{"text":"If I read from /dev/null","width":195},{"text":"there's nothing, it's completely empty","width":196},{"text":"but they're not the most exciting ones, let's have a look at","width":754},{"text":"so next time you want to write a","width":309},{"text":"secure program, and you need some","width":235},{"text":"secure random numbers, numbers which are actually difficult to guess","width":344},{"text":"/dev/random is your choice","width":221},{"text":"you could open this, and read from","width":247},{"text":"this directory, and it will give you back random bytes","width":243},{"text":"random bytes that are difficult for an adversory to guess in advance","width":379},{"text":"how does the operating system generate these numbers?","width":242},{"text":"by collecting entropy","width":177},{"text":"okay what is entropy?","width":96},{"text":"well, things like external things can happen to my system","width":183},{"text":"so for example, let me press the Shift key","width":204},{"text":"and of course, I can't , because I'm not on that machine","width":305},{"text":"uh, so what I can do on that machine is","width":232},{"text":"look for arriving network packets","width":263},{"text":"let me try to generate from random entropy","width":137},{"text":"and slowly, when it's got enough entropy, there we go","width":370},{"text":"it can give you some more random data","width":152},{"text":"so not only does it need to generate random data, it needs to actually keep","width":302},{"text":"the meta information about just how much randomness has it collected at this point","width":545},{"text":"well look at that, lots of stuff must be happening","width":257},{"text":"maybe the disk drive is going, maybe there's some additional network packets happening","width":234},{"text":"but it's run out of entropy, so it blocks","width":191},{"text":"so it cannot give me anymore bytes at this point without um","width":331},{"text":"it cannot reliably give me more bytes at this point which are random","width":255},{"text":"so /dev/random is useful if","width":243},{"text":"you really want to wait until you've got cryptographically secure bytes","width":262},{"text":"if you don't need cryptographically secure bytes","width":170},{"text":"if you're prepared to just accept some limitations, then use urandom","width":257},{"text":"and that will just happily stream","width":115},{"text":"random bytes to you all day long","width":413},{"text":"so off we go","width":94},{"text":"by the way, with hexdump, you can even ask to see the characters aswell","width":230},{"text":"here we go, and perhaps if we waited long enough, we'd see Shakespere","width":540},{"text":"so that's one way to generate a lot of random numbers very very quickly","width":477},{"text":"we can find some things out about my machine here, lets go into","width":341},{"text":"/proc now","width":253},{"text":"and first of all, if we do an ls, we can see there's a whole lot of numbers here","width":312},{"text":"and some other interesting files","width":192},{"text":"that are generated by the kernal","width":108},{"text":"these do not exist on the disk drive","width":142},{"text":"this listing of files is generated by the kernal","width":173},{"text":"because we asked for a particular directory","width":120},{"text":"and if we were go to a particular one of these files","width":167},{"text":"again, it's generated on the fly","width":132},{"text":"as we request bytes from these files","width":165},{"text":"so let's have a look at, say, the memory for this file","width":320}],
  // Part 4
  [{"text":"what have I got here?","width":199.18181824684143},{"text":"I've got useful things about","width":202.18181824684143},{"text":"how my memory is organized","width":125.18181824684143},{"text":"let's have a look at Swap information","width":257.18181824684143},{"text":"you see that my Swap file here is","width":263.18181824684143},{"text":"about a Gigabyte in size","width":598.1818182468414},{"text":"and let's get a look at my CPU","width":371.18181824684143},{"text":"okay so I can get a whole lot of data but my CPU I can discover, say","width":213.18181824684143},{"text":"what features my CPU has","width":173.18181824684143},{"text":"but my favorite thing about CPU is I can discover","width":229.18181824684143},{"text":"how many bogomips it has","width":306.18181824684143},{"text":"in fact this little particular box has 4 CPU cores","width":228.18181824684143},{"text":"and each CPU has 6,000 bogomips","width":484.18181824684143},{"text":"a bogomip is one of the most well-known fake measurements of how good a processor is","width":640.1818182468414},{"text":"and it's this: when Linux starts up","width":142.18181824684143},{"text":"it runs a timing loop","width":107.18181824684143},{"text":"to see how quickly a CPU runs","width":158.18181824684143},{"text":"before the hardware timer interrupts","width":173.18181824684143},{"text":"so we can get an idea of roughly how many instructions we can run per second","width":272.18181824684143},{"text":"and that's what this is telling us","width":110.18181824684143},{"text":"roughly, our little CPU can run","width":267.18181824684143},{"text":"six thounsand million instructions per second","width":457.18181824684143},{"text":"that's a pretty fast CPU","width":131.18181824684143},{"text":"and of course it's a completely fake measurement","width":163.18181824684143},{"text":"we don't ever start to get close to that","width":126.18181824684143},{"text":"but it's a cute way of being able to compare","width":172.18181824684143},{"text":"one CPU to another and have an idea of how fast the timing loop is","width":353.18181824684143},{"text":"if we're just writing a very simple - in Assembler - kind of a litle for loop","width":236.18181824684143},{"text":"to wait for, say, a hundred instructions or so","width":209.18181824684143},{"text":"so that tells me something about my CPU speed","width":226.18181824684143},{"text":"and as you can see I can see how many CPUs I've actually got in my system","width":481.18181824684143},{"text":"so I can look at these","width":180.18181824684143},{"text":"these system-wides prompters, but I","width":277.18181824684143},{"text":"can also discover things about specific processes","width":263.18181824684143},{"text":"remember these numbers over here? They're just process numbers","width":293.18181824684143},{"text":"how about we find out","width":162.18181824684143},{"text":"something about our own process","width":223.18181824684143},{"text":"well I've got two ways to do that","width":137.18181824684143},{"text":"actually, the shell","width":143.18181824684143},{"text":"in a variable, tells me the process number of itself","width":611.1818182468414},{"text":"haha!","width":79.18181824684143},{"text":"I'm now inside the Matrix","width":219.18181824684143},{"text":"here I am inside of the process number of my shell","width":277.18181824684143},{"text":"let's see what we can find out about it","width":271.18181824684143},{"text":"all sorts of things","width":92.18181824684143},{"text":"so we can","width":470.18181824684143},{"text":"we can discover something about its memory","width":651.1818182468414},{"text":"make that a little bit more readable","width":707.1818182468414},{"text":"there's a lot of stuff inside of maps","width":231.18181824684143},{"text":"the first thing is, this tells me how","width":184.18181824684143},{"text":"the memory of my process is mapped","width":243.18181824684143},{"text":"so I remember how I said \"Hey, some memory's not mapped to anything\"","width":161.18181824684143},{"text":"well here's the proof","width":154.18181824684143},{"text":"the very lowest part of memory is not mapped to anything","width":163.18181824684143},{"text":"the first we've got, actually, is","width":230.18181824684143},{"text":"memory starting at this virtual address going up to that virtual address","width":281.18181824684143},{"text":"and... come back!","width":600.1818182468414},{"text":"and it's at this address that memory is actually","width":320.18181824684143},{"text":"executable, and it's mapped from a file called /bin/bash","width":312.18181824684143},{"text":"then later I've got heap memory, here it is","width":294.18181824684143},{"text":"then I've got all of these librarys like ld","width":208.18181824684143},{"text":"libc, you could probably guess what's inside of libc","width":204.18181824684143},{"text":"all of the C calls that we call","width":247.18181824684143},{"text":"and eventually we should find the stack down here aswell","width":165.18181824684143},{"text":"oh there it is","width":93.18181824684143},{"text":"and there's our current stack","width":547.1818182468414},{"text":"I've got schedule information, I've got other status information","width":443.18181824684143},{"text":"and I've even got the file descriptors","width":423.18181824684143},{"text":"and I can look at even the","width":143.18181824684143},{"text":"the command line that was used to start this","width":272.18181824684143},{"text":"so if these are readable","width":256.18181824684143},{"text":"then that suggests an important security concern","width":155.18181824684143},{"text":"which is anything you put on the command line","width":260.18181824684143},{"text":"other people can read","width":108.18181824684143},{"text":"so it's probably not a good idea, on a shared system","width":197.18181824684143},{"text":"to put your passwords, or any other secret information, on the command line","width":308.18181824684143},{"text":"because this interface","width":159.18181824684143},{"text":"allows people to actually discover","width":171.18181824684143},{"text":"what's on the command line of all running processes","width":756.1818182468414},{"text":"let's start something in the background","width":185.18181824684143},{"text":"so let's start sleep","width":140.18181824684143},{"text":"10 echo","width":426.18181824684143},{"text":"so let's go into","width":630.1818182468414},{"text":"okay that was the wrong process","width":316.18181824684143},{"text":"with a little bit of searching we could have found","width":123.18181824684143},{"text":"that command line for echo","width":323.18181824684143},{"text":"and discover the secret","width":234.18181824684143},{"text":"alright so","width":137.18181824684143},{"text":"that's enough of these virtual file systems","width":135.18181824684143},{"text":"I think it's time to talk about virtual memory, so","width":162.18181824684143},{"text":"page 2","width":1206.1818182468414},{"text":"so using virtual memory is","width":157.18181824684143},{"text":"and using memory-mapped memory","width":187.18181824684143},{"text":"is relatively easy","width":459.18181824684143},{"text":"I'm going to show you one version today which is","width":254.18181824684143},{"text":"where we have our memory-mapped file","width":211.18181824684143},{"text":"and we actually have a real file behind the memory that we're going to use","width":397.18181824684143},{"text":"next lecture we'll play with forking and show you how we can","width":299.18181824684143},{"text":"use this with IPC aswell","width":128.18181824684143}],
  // Part 5
  [{"text":"okay so here's our plan","width":330.18181824684143},{"text":"we're going to use something called","width":132.18181824684143},{"text":"mmap","width":113.18181824684143},{"text":"and when you say \"Hey, I want to map some virtual memory\"","width":423.18181824684143},{"text":"we need to say","width":140.18181824684143},{"text":"what kind of memory do we want?","width":96.18181824684143},{"text":"do we want memory that is readable?","width":174.18181824684143},{"text":"writable? or executable?","width":150.18181824684143},{"text":"some combination of the above?","width":254.18181824684143},{"text":"so typically we will want at least read and write access","width":293.18181824684143},{"text":"so here's our protection","width":331.18181824684143},{"text":"so this is how, if you","width":120.18181824684143},{"text":"if your process tried to, say, change a byte of libc","width":417.18181824684143},{"text":"the virtual memory hardware would say \"Hold on a moment! ","width":121.18181824684143},{"text":"you don't have write access to that file.","width":147.18181824684143},{"text":"I'm going to let you proceed any further\" and it would raise a signal","width":353.18181824684143},{"text":"but we want to do more than that","width":77.18181824684143},{"text":"we actually want to be able to modify the file","width":150.18181824684143},{"text":"and we're going to actually change the contents","width":216.18181824684143},{"text":"of our file just by writing into memory","width":237.18181824684143},{"text":"which I think is pretty cool","width":256.18181824684143},{"text":"the other thing we're going to see is","width":101.18181824684143},{"text":"this map shared","width":170.18181824684143},{"text":"which means that changes we make","width":142.18181824684143},{"text":"are shared with the file","width":2790.1818182468414},{"text":"sudo change owner to be angrave","width":565.1818182468414},{"text":"run vim, great","width":310.18181824684143},{"text":"now, there's a gotcha with using mmap","width":202.18181824684143},{"text":"which is that it's not going to automatically extend the file for us","width":227.18181824684143},{"text":"so if want to be able to, say, store a few integers","width":219.18181824684143},{"text":"in our memory-mapped space","width":91.18181824684143},{"text":"then we better make sure that our file is big enough before-hand","width":264.18181824684143},{"text":"so let's do that","width":294.18181824684143},{"text":"first let me look at a file descriptor","width":122.18181824684143},{"text":"and I'll open the file called data","width":106.18181824684143},{"text":"I want read and write","width":97.18181824684143},{"text":"if it doesn't exist, I want to be able to create it","width":131.18181824684143},{"text":"if it does exist, I'm going to truncate it","width":135.18181824684143},{"text":"and here's my permission bits, 0600","width":163.18181824684143},{"text":"what does 0600 mean?","width":169.18181824684143},{"text":"the 0 and the beginning means I'm going to speak octal","width":177.18181824684143},{"text":"and the 6 means","width":189.18181824684143},{"text":"I want read and write permission","width":100.18181824684143},{"text":"and everyone else, ha! nothing for you","width":196.18181824684143},{"text":"we're making this a private file","width":174.18181824684143},{"text":"we need a way to be able to extend this file","width":276.18181824684143},{"text":"how can I do that?","width":520.1818182468414},{"text":"any ideas?","width":433.18181824684143},{"text":"how about using seek","width":183.18181824684143},{"text":"there's two ways to do this: we could have actually written enough bytes","width":217.18181824684143},{"text":"so we could have written size time size number of bytes into my file","width":330.18181824684143},{"text":"but another way do it is just to deliberately seek","width":222.18181824684143},{"text":"to a new end-point, and we'll write something in there","width":280.18181824684143},{"text":"so let's seek","width":169.18181824684143},{"text":"on my file descriptor","width":148.18181824684143},{"text":"who remembers how to use seek?","width":150.18181824684143},{"text":"I want to go this far into the file","width":117.18181824684143},{"text":"and remember we can like seek end","width":243.18181824684143},{"text":"seek beginning, we can say seek set","width":150.18181824684143},{"text":"and I'm going to write just one byte in here","width":160.18181824684143},{"text":"so let me write into my file descriptor","width":156.18181824684143},{"text":"here's a pointer to some data I want to send","width":124.18181824684143},{"text":"I'll just send, say, abc","width":190.18181824684143},{"text":"and I'll send those three bytes","width":136.18181824684143},{"text":"and in doing that, I've made sure that","width":93.18181824684143},{"text":"my file is more than","width":218.18181824684143},{"text":"this size","width":72.18181824684143},{"text":"so that's just the easiest way of","width":182.18181824684143},{"text":"extending the size of a file","width":137.18181824684143},{"text":"now we do our map","width":143.18181824684143},{"text":"and if it works, we get back a valid address","width":758.1818182468414},{"text":"for now","width":172.18181824684143},{"text":"I can treat that address","width":122.18181824684143},{"text":"as some memory that I can now use","width":151.18181824684143},{"text":"so I'm going to write into","width":204.18181824684143},{"text":"my memory","width":123.18181824684143},{"text":"12345678","width":95.18181824684143},{"text":"and this other hexidecimal constant called dead code","width":348.18181824684143},{"text":"to make sure that","width":193.18181824684143},{"text":"the changes in memory are","width":289.18181824684143},{"text":"written back to the file after","width":93.18181824684143},{"text":"I should unmap it, so how do I do that?","width":113.18181824684143},{"text":"I call munmap and we're done","width":249.18181824684143},{"text":"so let's compile this","width":1640.1818182468414},{"text":"undefined reference to seek","width":203.18181824684143},{"text":"what did we do wrong there?","width":1148.1818182468414},{"text":"sudo chmod angrave","width":384.18181824684143},{"text":"everything","width":63.18181824684143}],
  // Part 6
  [{"text":"oops, too much speed","width":309.18181824684143},{"text":"okay thank you right so","width":705.1818182468414},{"text":"oh yeah, sorry I was doing lseek","width":1181.1818182468414},{"text":"alright so we got a","width":118.18181824684143},{"text":"reasonable address","width":106.18181824684143},{"text":"we wrote those bytes into it","width":103.18181824684143},{"text":"now actually let's have a look at our file","width":589.1818182468414},{"text":"okay here's a letter 'a' that we wrote","width":593.1818182468414},{"text":"here's those numbers we wrote","width":83.18181824684143},{"text":"12345678 and deadc0de","width":257.18181824684143},{"text":"but that's not what we see inside of the file","width":183.18181824684143},{"text":"why?","width":603.1818182468414},{"text":"endianess, yes","width":202.18181824684143},{"text":"what can you conclude about this particular processor?","width":284.18181824684143},{"text":"that 78 56 34 12","width":418.18181824684143},{"text":"we put the largest values of our integer, the 12","width":213.18181824684143},{"text":"and the very end","width":225.18181824684143},{"text":"our integers are written in reverse","width":123.18181824684143},{"text":"we put the","width":109.18181824684143},{"text":"the smallest byte of our integer first in our file","width":296.18181824684143},{"text":"and that's a property of the CPU","width":293.18181824684143},{"text":"so be careful when working with binary data","width":163.18181824684143},{"text":"we have to know how our CPU","width":293.18181824684143},{"text":"represents integers and other data formats","width":156.18181824684143},{"text":"if we're simply going to just write them into the file","width":139.18181824684143},{"text":"likewise, if you're going to read from a particular binary file","width":198.18181824684143},{"text":"you need to know whether that","width":143.18181824684143},{"text":"structure on the binary file actually can be","width":138.18181824684143},{"text":"easily mapped into the CPU","width":240.18181824684143},{"text":"that you're trying to work with","width":120.18181824684143},{"text":"okay, so that's our file, and","width":99.18181824684143},{"text":"look how easy it was to actually","width":123.18181824684143},{"text":"change the contents of the file","width":651.1818182468414},{"text":"we just wrote into the file","width":296.18181824684143},{"text":"as if it was regular memory","width":166.18181824684143},{"text":"and if we had a very very large file","width":215.18181824684143},{"text":"we could simply write in offsets here","width":204.18181824684143},{"text":"and immediately use that data","width":163.18181824684143},{"text":"so if this was genetic data","width":111.18181824684143},{"text":"we wouldn't need to parse it, we could simply","width":171.18181824684143},{"text":"write it and read it directly from our processing loops","width":253.18181824684143},{"text":"so it can make working with binary data","width":306.18181824684143},{"text":"very very efficient","width":357.18181824684143},{"text":"one last comment on this is that","width":123.18181824684143},{"text":"memory-mapped files isn't always a free lunch","width":139.18181824684143},{"text":"you won't necessarily speed up all operations","width":213.18181824684143},{"text":"the kernal, the operating system, the disk drive","width":315.18181824684143},{"text":"are designed for fast streaming of data","width":220.18181824684143},{"text":"so if your process is simply streaming data in","width":214.18181824684143},{"text":"doing some simply processing or filtering of that data as it comes in","width":185.18181824684143},{"text":"and streaming it out, memory-mapped files will not","width":142.18181824684143},{"text":"give you any significant advantage","width":164.18181824684143},{"text":"what it will do for you is","width":92.18181824684143},{"text":"when you want to make use of the virtual memory framework","width":190.18181824684143},{"text":"to automatically map parts of files directly into address space","width":435.18181824684143},{"text":"and with that, my demo's finished. Any questions?","width":347.18181824684143},{"text":"you might find this useful","width":139.18181824684143},{"text":"in the very last MP","width":114.18181824684143},{"text":"if you're trying to your keyserver","width":163.18181824684143},{"text":"run fast, but I'll say no more for now.","width":233.18181824684143},{"text":"thank you very much, I'll see you in two days.","width":180.18181824684143}],

  // Start Lecture Video 31
  // Part 0
  [{"text":"alright! do we have sound, testing testing yes great! ","width":1423},{"text":"good morning and welcome to cs 241","width":139},{"text":"here's what we're going to do today","width":78},{"text":"i'm going to cast your minds back to 1991","width":401},{"text":"when a little while ago yes tim berners-lee posted the following","width":388},{"text":"the world wide web an executive summary","width":188},{"text":"the WWW project merges the techniques of information retrieval and hypertext to make an easy but powerful global information system. ","width":460},{"text":"little did he know that he would be so right.","width":184},{"text":"i'll skip on to the other fun bits like","width":173},{"text":"\"to follow a link are really clicks with a mouse! these are the only operations necessary to access the entire world of data!\" ","width":455},{"text":"he also says inside the same posting that ","width":140},{"text":"\"making a web is as simple as writing a  few sgml files\"","width":235},{"text":"so html actually has a history before that which was a larger markup language called sgml","width":412},{"text":"eventually as you know we decided to use a slightly simplified markup language called html","width":334},{"text":"the www model gets over frustrating incompatibilities of data format between and suppliers and readers by allowing negotiation of format between a smart browser and a smart server","width":727},{"text":"so here was tim berners lee's insight, is that","width":169},{"text":"what we need to figure out is not the coding and the making it work on all kinds of platforms,","width":297},{"text":"yes we need to do that,","width":71},{"text":"but it's actually the protocol that is important","width":204},{"text":"the protocol between the client and the server","width":291},{"text":"the summary does not describe the many exciting opened up by the WWW project ","width":356},{"text":"remember at this point he's just talking to a few friends at CERN, a physics lab in Europe","width":322},{"text":"such as efficient document caching, a reduction of redundant out of date copies and use of knowledge daemons ","width":375},{"text":"there is more information in the online project blah blah blah","width":141},{"text":"here, here's a very simple prototype","width":96},{"text":"128.14 and it gives you an IP address ","width":201},{"text":"i found an early version of his code","width":242},{"text":"version 0.2","width":161},{"text":"it has some bugs in it, it's not even secure","width":147},{"text":"but i thought it'd fun to show you the code because here's what your'e going to do in lab tomorow","width":223},{"text":"you're going to write a web server","width":188},{"text":"i'm going to give you half the code you fill in the rest","width":125},{"text":"and you're actually going to use mmap to be able to serve the files back onto a web page","width":428},{"text":"and here's the thing about searching","width":452},{"text":"at the other end of the scale, large information providers may provide an http server with full text or keyword indexing","width":597},{"text":"was tim berners-lee actually thinking about google at this point? ","width":408},{"text":"i think maybe not, i think maybe at the time he was thinking about servers that would actually index documents on that machine","width":561},{"text":"not about machines that were powerful enough to index the whole WWW project","width":385},{"text":"but anyways, next time i meet him i'll ask him what he meant by that comment","width":345},{"text":"so yeah, i'll include this text in tomorrow's section, you can read it yourself","width":437},{"text":"so let's turn to today's handout ","width":684},{"text":"alright, so just as a warmup exercise, how do we mount a disk image?","width":393},{"text":"so let's say i've given you a file and that file actually represents a complete file system","width":316},{"text":"what do i need to say? ","width":240},{"text":"well you're going to use the mount command","width":251},{"text":"because it's a file, a stream of bytes, we actually need to use a loopback so we're going to need the -t option because we need to turn it into a block based device ","width":985},{"text":"we give it a reference to a file and we give it a point on our existing file system","width":338},{"text":"where we would like that file system to appear","width":247},{"text":"but the big big idea is 'hey i'm mounting it' i'm adding to my existing file system","width":407},{"text":"then i can cd into it and potentially change the files of that file system","width":354},{"text":"okay, what is the setuid bit?","width":212},{"text":"what's the purpose of that?","width":168},{"text":"so on a file i can set the uid bit and if I do what happens when people execute a file with that bit set? ","width":947},{"text":"yes! that's right, it's the process that has started is not started as you as the caller","width":664},{"text":"it's started under the user of the owner of the file ","width":473},{"text":"so for example, if we have a program called sudo, which we do","width":361},{"text":"and the owner of that is root","width":219},{"text":"then if i've set the UID bit ","width":375},{"text":"then when you execute sudo, it doesn't execute as you","width":206},{"text":"it actually gets all the privileges of root. so that's a kind of typical use of suid. my goodness, that's not your eyes, that is this projector. there we go, that's a bit better, right.","width":668},{"text":"so if for example you wanted to have a program that made some symbolic links and mounted a directory ","width":568},{"text":"and you wanted to do all this stuff that requires root and it requires admin access","width":396},{"text":"you might make a program and then by using suid ","width":408},{"text":"you could then allow other non admin people to run your script and for this script to do administrative things for them ","width":734},{"text":"so let's turn our attention to mmap ","width":295},{"text":"the purpose of mmap is to give us virtual memory that is backed by a file","width":566},{"text":"and when we try to read or write those virtual memory addresses ","width":254},{"text":"the kernel will automatically read or write to the file ","width":347},{"text":"that's on the file system","width":172},{"text":"we don't need to bother with reading it into our data structure","width":226},{"text":"our data structure can simply just be at that address","width":324},{"text":"okay well let me ask you now um, mention that","width":157},{"text":"we've actually got a couple of options ","width":419},{"text":"first of all ","width":74},{"text":"you have to choose one","width":49},{"text":"you have to say ","width":44},{"text":"when i'm going to call mmap, i either want a private copy or a shared copy","width":835},{"text":"so","width":88},{"text":"here's what happens if it's private","width":122},{"text":"you say","width":94},{"text":"any changes i make to my data structure","width":407},{"text":"i don't want them to be pushed back onto the disk","width":209},{"text":"i just want my own private copy","width":319},{"text":"so now ","width":69},{"text":"it's like saying ","width":46},{"text":"okay, load this stuff in, i'm going to scribble all over it and i don't want anybody else to know about it","width":303},{"text":"it's my own private copy, right?","width":152},{"text":"and in fact for efficiency, we don't make an immediate copy of these pages, we do it only when a process attempts to write to those pieces of memory","width":747},{"text":"in other words, if i started four copies of your program, i don't need four times as much ram ","width":511},{"text":"i will only actually make a copy of a frame when you attempt to write into it","width":192}],
  // Part 1
  [{"text":"so map private uses copy on write","width":726},{"text":"for each uh frame of memory, so for each four kilobyte block","width":357},{"text":"behind the scenes it will copy it only when you attempt to write it","width":229},{"text":"and that copy is then just like any regular memory that you might have made on the heap","width":326},{"text":"once your program is gone, it's gone, there's no store of it","width":290},{"text":"it's also private toward a particular process","width":196},{"text":"map shared on the other hand is useful when we're going to want to fork a process","width":651},{"text":"and then our child and the parent will see the same physical piece of memory","width":528},{"text":"so any changes that the child does, the parent will see, to that frame of memory","width":306},{"text":"also, it will copy the contents back to the file that we opened","width":553},{"text":"so, it's doubly shared, right","width":124},{"text":"it says um","width":278},{"text":"that i'm going to use this for interprocess communication between my child and my parent","width":483},{"text":"and also i'm going to copy ","width":527},{"text":"back to the file","width":512},{"text":"right so this is two useful ways of using mmap ","width":271},{"text":"so most of the time you're probably going to want to say ","width":117},{"text":"ok, i want to see it shared","width":275},{"text":"so early versions of mmap did just that","width":135},{"text":"but we realized that actually maybe sometimes we want to be able to share things with a child and the parent process and not actually have any file on the disk at all","width":778},{"text":"we just want to set up some physical ram that it could be seen inside two processes","width":466},{"text":"and uh if you want to do that you can, you just need to pass in ","width":368},{"text":"map anonymous ","width":124},{"text":"by the way if you actually want to work on os x, you need to use map","width":450},{"text":"they are synonymous but so this means 'hey i don't actually have a file i just want to mess with virtual memory so that i've got a page of memory or more that i can share between a child and a parent process'","width":1270},{"text":"what can i do with that, well i might want to simple write values in","width":275},{"text":"you can also share a semaphore ","width":254},{"text":"remember semaphores? these counting things where i can increment the count","width":372},{"text":"if i attempt to decrement the count, it might block if my count attempts to go beneath 0? ","width":470},{"text":"so now i can actually use this to synchronize between two different processes","width":405},{"text":"we're not gonna go into the details of how to set up a semaphore inside shared memory but a google search ","width":438},{"text":"thanks to the world wide web","width":319},{"text":"will let you do that","width":72},{"text":"right, we can find easy example source code to do that, so that's beyond cs 241. just hey, back of your mind, know that this exists should you ever need to do this ","width":698},{"text":"okay so let's have a look at some example code","width":350},{"text":"how can we use mmap well we opened a file descriptor ","width":372},{"text":"okay so let's open a particular file called \"alice\" ","width":192},{"text":"i'm going to open it as read only","width":354},{"text":"and then i call mmap ","width":80},{"text":"so i'm going to map today one page 4096 bytes and then we can talk about how we want to use these bytes","width":709},{"text":"and uh we've got three little bitwise flags that we or together ","width":302},{"text":"so there's proc read, proc write, and caught exec","width":343},{"text":"yes! i want to execute my files! my bytes1","width":316},{"text":"off with the head","width":91},{"text":"said the queen","width":215},{"text":"what's the purpose of these bits?","width":313},{"text":"do they affect the file on disk? ","width":353},{"text":"no, remember with virtual memory we actually declare how our process can use different pieces of addresses","width":566},{"text":"yes we can have some addresses that don't map to any piece of physical ram ","width":283},{"text":"other addresses might map to some physical ram that we're sharing with hundreds of other processes","width":363},{"text":"for example, lib.c, the c library","width":212},{"text":"lots and lots of processes want to use the code inside that so rather than having multiple copies inside our physical ram, we just have one copy and have lots of mappings to that","width":724},{"text":"for that physical memory to be secure then ","width":159},{"text":"we better make sure that all of our different processes can only read it","width":470},{"text":"also, we can have another layer of security to say 'actually we're not going to let the cpu execute opcodes from arbitrary pieces of memory' ","width":672},{"text":"so we can actually say that our memory is executable or not ","width":538},{"text":"so we're not going to put any executable code in today, we're not trying to build say a virtual machine that's going to compile source code into executable bytes today","width":628},{"text":"we just want to have some memory that's read or write","width":236},{"text":"okay ","width":117},{"text":"so i've got two examples here ","width":248},{"text":"one where i've got the text of alice with the looking glass ","width":253},{"text":"another one where i've got the text of justin bieber's best lyrics ","width":323},{"text":"it's a very short file","width":290},{"text":"and you can tell me which one of these will work and which one of them won't","width":2544},{"text":"and why","width":115},{"text":"so there's a clue ","width":40},{"text":"one of these will work one of these won't","width":340},{"text":"yes!","width":476},{"text":"yes! right! so","width":133},{"text":"we've put some options to say that we want to write to it ","width":332},{"text":"","width":2},{"text":"and in fact here we are trying later to write to it","width":131},{"text":"look i'm just using a pointer into memory and i'm trying to write the first two lines of the jabberwockee poem","width":585},{"text":"but i said that my mapping should be shared ","width":199},{"text":"in other words changes i make to my virtual memory ","width":341},{"text":"should eventually be pushed back into the file ","width":346},{"text":"and if i try to do this","width":302},{"text":"here's what will happen","width":51},{"text":"mmap will fial","width":82},{"text":"and in fact i'll get back the address","width":308},{"text":"negative one","width":52},{"text":"so you'll often see code that compares the pointer to -1 ","width":347},{"text":"if it is, then we know that mmap failed ","width":192}],
  // Part 2
  [{"text":"now my code didn't attempt to do any error checking, so i'm just trying to strcat straight into this address which would be -1","width":626},{"text":"and so i will probably get a segfault ","width":274},{"text":"in my code ","width":217},{"text":"um, i didn't talk about map file and in fact map file is the default and in fact you can it's not necessary to specify","width":608},{"text":"but you'll notice that all these things are bitwise OR-ed ","width":226},{"text":"so we build up a single integer that represents all of these flags","width":220},{"text":"right so, we've got this one we've shared","width":191},{"text":"this one which is map private","width":149},{"text":"and here's the great thing is that when we specify map private it means to this particular process","width":466},{"text":"so we can read justin's lyrics if we want","width":389},{"text":"but fortunately we think they're a bit of a cow, so we can do copy on write","width":446},{"text":"so we can actually overwrite to our heart's content all of his lyrics if we wish to","width":428},{"text":"unfortunately, we can't change what comes what comes out of his mouth","width":218},{"text":"he gets to keep his own copy of his lyrics file","width":177},{"text":"we're only going to change what's inside ram","width":167},{"text":"what's inisde our memory","width":204},{"text":"so this is allowed, this is okay even though we said that the file itself is read only","width":403},{"text":"and we want to write into it ","width":141},{"text":"we're doing that because memory is private","width":273},{"text":"and so we get to store our own copy in memory","width":646},{"text":"okay um ","width":120},{"text":"if you do want to write, once you finished changing things","width":391},{"text":"then it's important to call munmap ","width":467},{"text":"to release these resources","width":740},{"text":"right to say 'okay i've finished with this particular mapping'","width":410},{"text":"at which point","width":45},{"text":"the system may get around to writing it out to disk if you set it up that way","width":332},{"text":"but it doesn't have to immediately and in fact for performance there's no reason  why it might do it between now and some point in the distant distant future ","width":573},{"text":"so there's one other useful thing i'm not gonna test this but hey if you ever use this mechanism ","width":315},{"text":"if you want to force your changes to be sent back to the file system ","width":333},{"text":"call msync","width":297},{"text":"it's like nsync, but more musical i'm sorry terrible joke, ","width":285},{"text":"right, is that how you spell msync? who knows. okay, they're a boy band, they were allegedly popular ","width":830},{"text":"i probably misspelled it ","width":59},{"text":"anyways, so!","width":121},{"text":"yes, do this but realize if you call msync to many times then you're going to have slow performance because then you're waiting for your pages of memory to be written back to disk ","width":890},{"text":"okay, so ","width":66},{"text":"we know enough now to start playing with mmap ","width":170},{"text":"remember if it doesn't work actually find out what the error message was and think about your options","width":438},{"text":"what kind of memory mapping do i want to use","width":159},{"text":"so let's use this ","width":77},{"text":"and this hints now for how we're going to create our first tim berners-lee kind of web server","width":623},{"text":"let's say we want to serve a file back to a client ","width":212},{"text":"we actually want to send some bytes","width":244},{"text":"we've already made our socket code","width":244},{"text":"and we've already set up a file descriptor","width":173},{"text":"so somewhere previously i've done something like ","width":237},{"text":"okay let's do fd-open on something i've got back from my accept call something like that ","width":903},{"text":"so now i can start receiving and sending bytes using the c library to the client","width":357},{"text":"and now i want to send the file ","width":271},{"text":"okay, so the http protocol says you should write a few lines of text at the beginning like the MIME type, like the content length","width":509},{"text":"so yeah pretend i've written those lines","width":134},{"text":"now i just want to send the bytes, okay","width":154},{"text":"here's how we can do it","width":87},{"text":"first of all","width":68},{"text":"remember stat? let's use stat to find out the actual size of our file ","width":424},{"text":"then i'm actually going to open it so i just need my read-only flag here ","width":409},{"text":"that's easy enough we've got that up there","width":172},{"text":"and then i want to map that into memory","width":311},{"text":"okay","width":90},{"text":"this is where you come in","width":105},{"text":"what would you write","width":132},{"text":"have a look up here to see if you can figure out the options ","width":130},{"text":"what options do you need? because once you've got that pointer, we'll check if it's not equal to -1","width":429},{"text":"we can just call fwrite to send those bytes in memory!","width":260},{"text":"we'll say look here's the bytes i want to send, send me 1*this number of bytes, and send it to this file descriptor","width":414},{"text":"bam we're done!","width":82},{"text":"we have the WWW thank you very much i am tim berners-lee","width":287},{"text":"anyways, so, right, or you've got missing just this line, so this is the one line that's missing between us and finishing our WWW web server","width":637},{"text":"alright, now it's up to you. what are you going to write in this line? take 2 minutes to see if you can write this line ","width":269},{"text":"you can write it down here if you want if you're out of space","width":436},{"text":"what options do you need for mmap? ","width":6055},{"text":"okay, so what do we need? right","width":249},{"text":"i'm not going to spend any special options today, we need to pass in how many bytes we actually want to map from the file","width":576},{"text":"we only want to read through it ","width":192}],
  // Part 3
  [{"text":"and ","width":334},{"text":"actually we could write map ","width":195},{"text":"shared map, private, it doesn't matter in this case because we're just going to be reading or writing, I'm sorry, just reading from it","width":413},{"text":"and we pass in our file descriptor, here we go, and we don't need any offsets","width":390},{"text":"so something like that should work and we'll check to see if that gives us back a reasonable address pointer and if it does great i have immediate access to the bytes in that file","width":944},{"text":"don't forget at the end to use unmap and munmap or else very quickly you're going to run out of virtual memory when your WWW project becomes popular","width":1208},{"text":"okay, right so let's have a demo now of actually using this to talk to two different processes","width":1533},{"text":"great, so here's my program","width":234},{"text":"if we wanted to quit, we could print say the line number of where we failed ","width":744},{"text":"so i'm going to in here see if my mmap failed and if it did i'm going to simply quit","width":418},{"text":"and my macro quit will include the file and the line numbers so in debugging this, i can see where the problem is","width":758},{"text":"alright so let's have a go at this ","width":153},{"text":"i'm using map_anon because i'm using this on os x (on a mac) and i don't have a file descriptor to pass in because i'm just trying to communicate between a child and a process ","width":843},{"text":"okay, so once i've got the address, here's my plan ","width":221},{"text":"i'm going to treat it as pointing to some integers ","width":424},{"text":"then i call fork and now i have two processes ","width":224},{"text":"in the, in one process","width":279},{"text":"let's see what have we got","width":88},{"text":"so that's the parent process, so in the parent process i'm going to write these two values 10 and 20 and in the other process","width":671},{"text":"okay, here's my attempt at synchronization, we're just going to sleep for a second to make sure the other process has finished ","width":462},{"text":"and then we're going to read the values of shared","width":166},{"text":"so i've got two processes remember but they're sharing one frame","width":426},{"text":"okay, so we'll add those together and see what we get ","width":223},{"text":"okay, do you think this will work? let's have a plan, see what happens","width":413},{"text":"alright, so we run gcc","width":465},{"text":"invalid argument and of course we've got a crazy address","width":253},{"text":"why, what did we do wrong? ","width":806},{"text":"okay, here's what we did wrong, you've got to choose one, you've got to choose either shared or private so in our options here we","width":618},{"text":"we definitely need anon or anonymous because we don't have a file descriptor but we have to say ","width":437},{"text":"an options, so suppose we did private, what do you think the result would be","width":739},{"text":"ah, we got 0 in the other process! why? because we made it private!","width":364},{"text":"okay, what we wanted was... we shared the memory, okay so let's fix this","width":797},{"text":"and a second later, yay! great! ","width":132},{"text":"right, so there we go, we've managed to toggle information using memory mapped operations between one process and another process ","width":584},{"text":"pretty cool huh?","width":107},{"text":"well i think it's pretty cool and i think memory mapped files are fantastic when you have a lot of binary data or text data ","width":374},{"text":"and you want to be able to write simple code to read it and manipulate it ","width":322},{"text":"you'll often find it's very very easy to \"okay just map the whole file\" then call strcomp or call a regular expression on the whole file","width":601},{"text":"and we'll let the virtual memory automatically load those pages into memory for us","width":661},{"text":"okay any questions about mmap?","width":428},{"text":"okay, right, time for part two!","width":383},{"text":"this is one of the few times i'm going to use powerpoint, so sit back, relax, turn your brain off","width":397},{"text":"you know how i feel about powerpoint, but i've got a few things to say and i've got a few slides which are actually useful","width":350},{"text":"we're going to talk today about file systems from a very different perspective ","width":305},{"text":"i'm going to talk about file systems by what can we do when think beyond just a single disk and how can we make our file systems robust?","width":952},{"text":"okay, this is not a new question, and one answer to this is RAID","width":233},{"text":"so we'll talk about RAID","width":160},{"text":"and then at the very end of this i'm going to talk about well suppose your problems are bigger than just a single disk array ","width":512},{"text":"suppose you want to start a company like Google","width":277},{"text":"how can you make a file system that works even beyond a single data center? so what do some of those challenges look like?","width":468},{"text":"and i'm just going to cherry pick a few items out of that and give you a reference if you have intentions of building a file system or building a company as big as google","width":740},{"text":"right so let's talk about RAID","width":163},{"text":"you've probably heard of RAID, it's relevant today even if you're using RAID, but i'm going to talk a little about the history about where it came from ","width":461},{"text":"it comes from redundant array of inexpensive disks ","width":356},{"text":"so here's where what we got there, first of all due to moore's law where we can pack more transistors on our silicon, and so we saw CPU speeds doubling very quickly","width":990},{"text":"however, disks themselves were not increasing in speed","width":469},{"text":"yes we learned how to pack more information on them, but the time to access any one piece of information was still dominated by the speed it took for the disk to rotate around","width":827},{"text":"so you've probably heard about say 7200RPM or 10000RPM ","width":408},{"text":"this sounds like it's spinning very fast, but if you work that out in terms of milliseconds, it's still a long time before it can rotate back to the right spot","width":548},{"text":"so we have a rotation time and seek time of actually physically moving the head to the right track on the disk, it takes time","width":656},{"text":"even if you can move it very quickly you still have to allow for it to settle","width":237},{"text":"so disks are slow ","width":105},{"text":"so why don't we spread our disks over multiple disks? ","width":236},{"text":"secondly the cost of our disks started to fall dramatically","width":265},{"text":"so it became apparent that rather than having one massive really reliable disk, let's actually use cheaper more commodity hardware and instead think algorithmically of how we can improve the rather vile reliability of our data stored on disk","width":1150},{"text":"so that's just a little bit of historical backdrop","width":128}],
  // Part 4
  [{"text":"okay, so what are we going to do we're going to take our data and push the bits somehow across multiple disks","width":587},{"text":"multiple physical disks and in that way we should be able to improve performance because now our i/o channels are talking to multiple disks simultaneously","width":596},{"text":"however, our disks are unreliable","width":261},{"text":"and if was to buy a disk today, the promised 30000 hours of performance before it failed, then if i had 100 disks that means that i expect my data on average to exists for two weeks before probability before it goes bad","width":1431},{"text":"the thirty thousand hours is not a big figure as soon as you have large disk arrays","width":424},{"text":"okay if you're wondering how big is thirty thousand hours, if you work forty hours you get to about 2000 hours per year ","width":794},{"text":"if you work 24 hours a day you get some small multiple of that","width":456},{"text":"so we're talking about a disk that supposedly lasts a few years","width":316},{"text":"and as you can see we've shortened it down to just two weeks ","width":183},{"text":"so we're going to have to think about how it'll solve this problem of making sure that our disks, our data is reliable if we have a disk failing on average every two weeks","width":862},{"text":"okay, so one thing we could do is simply copy the data to two disks!","width":501},{"text":"this is called mirroring and you today can go and buy little enclosures that support RAID 1","width":416},{"text":"and all they have is two identical disks and they send it to both","width":218},{"text":"and if one disk fails then it doesn't matter you've still got the data on your other disk","width":503},{"text":"hopefully the disk array tells you when one disk has died, and hopefully it tells you which disk has died because you're going to be replacing one of them right?","width":723},{"text":"so the good news is that if i do this, then my reads are suddenly typically twice as fast! because now i've got potentially two different disks from read from ","width":659},{"text":"so i can actually execute two reads concurrently at the same time and using the disk","width":380},{"text":"however in terms of writing i've got to bring both disks into sync and then so i have a lowest common denominator and so my writes are no faster","width":761},{"text":"plus i've doubled the cost of the storage and that's a hard pill to swallow, maybe we can do better than that well anyways there's RAID 1","width":650},{"text":"alright, today i'm just going to talk about RAID 1, raid 3, raid 5","width":269},{"text":"I don't want to confuse you with too many different levels, so we can at least see how these things were solved","width":316},{"text":"right so RAID 3 let's use parity codes","width":344},{"text":"and for this example we're going to choose odd even, we'll chose even parity ","width":487},{"text":"which means we're always going to write an even number of 1s","width":210},{"text":"so if you give me a value that has an odd number of ones in binary data, then my parity bit will also include a 1","width":660},{"text":"why don't i do that, well that means that i can recover my bits if any one of those bits are lost","width":938},{"text":"does that make sense?","width":196},{"text":"alright, didn't we play this game inside CS 125 right? ","width":444},{"text":"here, let me write down a number, here it is, and i'm going to make sure that i've written an even number of ones okay, there we go","width":591},{"text":"so here's the number you gave me, here's my parity bit","width":324},{"text":"if somebody came along and said haha! you can't have that bit anymore i'm not gonna tell you what it is","width":379},{"text":"then i can look across all of the bits i wrote and reverse engineer it, right? I can say","width":291},{"text":"oh look i've got an odd number of bits and therefore this missing bit must have been a 1","width":594},{"text":"great, so here's our plan, is that we'll buy another disk to store our parity bit in ","width":424},{"text":"and we'll have a say disk for every other bit","width":648},{"text":"so in my little example, if i'm writing bytes, octets, then i just need to buy 9 disks","width":504},{"text":"so i've already increased the cost of my system by one extra disk","width":504},{"text":"yes, the disk has gone ","width":324},{"text":"there is no disk, right?","width":71},{"text":"it's died","width":79},{"text":"we're not trying to deal with bad data, we're trying to deal with missing data","width":280},{"text":"literally the disk stops spinning","width":149},{"text":"it gets hot, whataever, right. it just makes awful clunking noises and refuses to talk","width":418},{"text":"yes, yes, right so this system's only good for being able to recover one bit ","width":491},{"text":"right, so i would need all of these in other disks","width":194},{"text":"alright so i have my disk 1, disk 3, disk 4, disk 5, disk 6","width":837},{"text":"okay any disadvantages to this?","width":123},{"text":"it's pretty cheap, yeah, but now my write performance is limited because i have to always be updating parity information as well","width":740},{"text":"okay so here's a little attempt with this. suppose i have a 4 bit computer and 4 bit data ","width":441},{"text":"then i've got my four disks, my data, and a check disk as well for storing the parity bit","width":359},{"text":"so if i'm storing this 1001","width":187},{"text":"great, that is already even, so i can just write zero, and in these other examples there is say for the light blue one","width":524},{"text":"i wrote an odd valued value, so my parity bit, my check disk, includes a 1","width":443},{"text":"right, let's kill a disk there we go. right so","width":277},{"text":"you now believe me that if one of my disks dies, oops, there we go. suffered from a small nuclear explosion","width":430},{"text":"then i can recover all of the data that was actually originally on that disk by reading all of my other disks ","width":668},{"text":"i can now write a little process and reverse engineers what should have been written on that disk 2","width":578},{"text":"and i do that for my entire data set","width":374},{"text":"okay","width":83},{"text":"there any problems with this? let's think about the chances of another disk dying whilest we're trying to recover the data","width":717},{"text":"so we've got this mean time to failure ","width":145},{"text":"and mean time to repair ","width":274},{"text":"and yeah we can recover the data but it assumes that bad things don't happen whilst we are doing the recovery process ","width":878},{"text":"so with raid 1, we'd copy all of the data off one good version back onto a new disk","width":465},{"text":"with raid 3, we need to go through all the data on all the disks using the parity to recover it","width":512}],
  // Part 5
  [{"text":"so um what is this probability ","width":178},{"text":"well this is a worked example of the probability of a second failure","width":508},{"text":"is determined by the time to repair ","width":404},{"text":"divided by the mean time to failure divided by the number of disks","width":222},{"text":"and so if we plug in some typical values","width":227},{"text":"then we discover we've got a .009 chance of losing all of our data","width":546},{"text":"of that one of our disks dying whilst we're trying to recover our data","width":423},{"text":"it turns out that this mathematic figure is completely wrong","width":530},{"text":"it's not true in real life","width":395},{"text":"have you heard of murphy's law?","width":293},{"text":"murphy's law turns out to be extremely true for RAID disks ","width":359},{"text":"if something goes wrong, and there's other versions that say look if bad things happened once they're going to happen a second time","width":499},{"text":"or similar chinese proverbs as well","width":249},{"text":"why do you think the second disk dying whilst you're trying to recover is much more likely? there's actually two reasons, yes!","width":738},{"text":"yeah, thanks! look if disks had been bought from the same supplier, from the same batch, they're probably going to expire about the same time","width":496},{"text":"you know that little bit of grit inside the bearing that caused it to heat up and eventually warp?","width":296},{"text":"well that's caused because part of the manufacturing process is sprinkling grit on that spot and if one disk fails after 2000 hours, then probably another one as well","width":757},{"text":"the second thing to realize is that this repair process is really hard on the disks ","width":512},{"text":"you're going to reading out all of the data and probably trying to use the disk array for whatever production requirement you have at the same time","width":708},{"text":"so not only are you trying to sweep through the entire data set, your production process is saying","width":322},{"text":"yeah i need this data i need this data i need to write this I need to write this","width":183},{"text":"so you're stressing your disk drive","width":207},{"text":"much more than normal operation","width":759},{"text":"so another department inside this campus experienced this very same problem and it turned out that even though they had RAID, their two mistakes were a) to assume that RAID was perfect and b) not to have any monitoring to tell them when their RAID had failed","width":1390},{"text":"and so they experienced this very problem that during the repair, a second disk failed, and that was it","width":658},{"text":"it was gone","width":140},{"text":"and their backup was several months old, whoops","width":483},{"text":"alright, so um back to our RAID 3","width":342},{"text":"our performance is only so so because we need to update the check disk for every write","width":510},{"text":"right so lastly let's look at raid 5","width":404},{"text":"and raid 5 mixes it up a little bit ","width":208},{"text":"or actually literally","width":136},{"text":"here's the trick: for different data blocks we'll put the parity bit inside a different disk ","width":568},{"text":"we're interleaving the parity across multiple disks ","width":374},{"text":"so now we've reduced the bottleneck of storing all the parity information on the same disk and in fact we can now allow multiple reads and writes in parallel","width":916},{"text":"right so that's the short intro to raid 1 3 and 5","width":269},{"text":"that's all i expect you to know for cs 241","width":235},{"text":"let's stand back even further and actually talk about a bigger problem which is ","width":404},{"text":"okay how do i make something which is even bigger than a data center","width":287},{"text":"if i want to have a file system that spans planetary sized data","width":356},{"text":"so for example, you're google and you're storing everybody's gmail and you thought running out of storage space on EWS was bad","width":783},{"text":"this is from a google engineer","width":135},{"text":"you know you have a large storage system when you get notified at a petabyte of storage left","width":439},{"text":"I wish I had that problem on my laptop, right? I'm sorry, I've only got a petabyte of storage left. so how could we build a file system that is at this scale? ","width":1051},{"text":"okay, well what kind of issues do we have? yeah we know that disks fail ","width":223},{"text":"and in fact google takes the approach of buying very low commodity hardware and expecting failure and instead putting software and algorithmic refinements on top of commodity hardware ","width":1105},{"text":"the stories of when google was scaling up other companies couldn't believe the trash that google was bringing into data centers","width":481},{"text":"why are you bringing in that old dell box? don't you expect it to fail? the google guys were like \"yes! we expect it to fail! but that's okay\"","width":384}],
  // Part 6
  [{"text":"they were more interested in keeping their costs down","width":205},{"text":"so they have hundreds of thousands of disks and so we expect a large number to fail","width":477},{"text":"but it's not just single disks failing, we could have a whole rack go out, power could go out","width":351},{"text":"the network cable could be severed. the network port could go bad. etc etc etc","width":498},{"text":"all of these things could take down parts of our file system and we need it to be resilient to these kinds of problems at different levels","width":610},{"text":"so how do we do it","width":93},{"text":"okay, back in 2001 ","width":90},{"text":"the google file system was pretty simple","width":101},{"text":"hey let's just keep 3 copies of every file and we'll put them in distributed places","width":329},{"text":"so we'll have one in the east coast, one in the west, and one i can't remember","width":361},{"text":"and google at the time was pretty america centric","width":231},{"text":"these days google has much broader reach of course and much more of its data is stored outside of the US","width":642},{"text":"so what do we do","width":189},{"text":"we use something called reed-solomon codes, where rather than storing at actual data that you wish to store, we store an encrypted or transformed version of that data","width":1007},{"text":"and that transformation uses our s codes","width":155},{"text":"now you've actually already played with reed-solomon codes if you have a) played a cd ","width":529},{"text":"the data on a cd uses reed-solomon codes because CDs get stretched","width":265},{"text":"in fact reed-solomon codes can cope with a scratch up to about a millimeter or so","width":300},{"text":"or b) you have communicated with a space probe","width":281},{"text":"so, if you've talked to voyager, or mars path finder, you're using reed-solomon codes","width":494},{"text":"i imagine a is more likely than b, but you never know! this is uiuc, right?","width":511},{"text":"these codes then are very good with bursty and unreliable and missing pieces of data and what's amazing about these little mathematical objects is that their expense is pretty lightweight","width":1191},{"text":"that space trade-off of reed-solomon codes is pretty small","width":300},{"text":"so we use reed-solomon codes and we only need 1.5 times redundancy ","width":287},{"text":"so that's how google solves it","width":299},{"text":"i've put a link in these slides for those who are interested in this stuff","width":188},{"text":"there's lots of great sort of war stories and tidbits about this","width":402},{"text":"but here's what you need to know for cs 241 is that we need to think about file systems beyond a mere data center and ","width":688},{"text":"one of the approaches to cope with missing data is to use coding theory and to represent our data on the disk","width":709},{"text":"okay, right, so that's all i've got for today","width":212},{"text":"have a wonderful week and have fun tomorrow in section finishing a streaming webcam and also writing the WWW project and finishing the web server","width":832}],

  // Start Lecture Video 32
  // Part 0
  [{"text":"[introduction]","width":1687.1818182468414},{"text":"alright good morning and welcome to the signal version of CS241","width":331.18181824684143},{"text":"here's what we're going to do today","width":114.18181824684143},{"text":"we briefly talked about signals way back at the beginning of the course","width":304.18181824684143},{"text":"cast your mind back to when we were creating processes and we said that hey when a process dies the parent gets notified","width":426.18181824684143},{"text":"we get a SIGCHILD right?","width":101.18181824684143},{"text":"and we talked about SIGINT for when you press control C as a way to stop a process","width":293.18181824684143},{"text":"or if you want to stop a process and you don't want it to prevent you","width":373.18181824684143},{"text":"you would call SIGKILL yes?","width":214.18181824684143},{"text":"and SIGKILL you cannot catch it you will terminate that process","width":458.18181824684143},{"text":"there's actually quite a bit more to signals and that's what we're going to talk about today","width":233.18181824684143},{"text":"and we're going to show you how to prevent signals from arriving at your process","width":383.18181824684143},{"text":"we're going to talk about some of the terminology about this","width":161.18181824684143},{"text":"and finally how to do it correctly with threads as well","width":425.18181824684143},{"text":"right so I've got two signals","width":306.18181824684143},{"text":"here they are, oh I need a volunteer thank you for volunteering","width":323.18181824684143},{"text":"you look like your busy, in fact, thank you for volunteering as well","width":218.18181824684143},{"text":"okay right","width":280.18181824684143},{"text":"a signal remember is an interrupt so we can interrupt a process from doing something by throwing a signal at it","width":466.18181824684143},{"text":"okay so here's an I not for illinois but for SIGINT right there we go","width":357.18181824684143},{"text":"okay so come over here you're the kernal","width":176.18181824684143},{"text":"thank you, here's my process","width":154.18181824684143},{"text":"okay and of course if I type control C","width":202.18181824684143},{"text":"we can deliver the signal to the process throw it at them","width":348.18181824684143},{"text":"ok look he caught it, right","width":155.18181824684143},{"text":"it appears that this process has installed a signal handler and has caught the signal","width":566.1818182468414},{"text":"so we delivered it, the process caught it, but the process carries on","width":304.18181824684143},{"text":"right? it didn't stop","width":120.18181824684143},{"text":"there are some signals however called like SIGKILL","width":186.18181824684143},{"text":"that cannot be caught","width":209.18181824684143},{"text":"if we were to send this then of course we know that the process dies","width":219.18181824684143},{"text":"now where can these signals come from?","width":91.18181824684143},{"text":"they can come of course from the process itself","width":230.18181824684143},{"text":"the process itself could say hey I'd like to send myself a signal right?","width":184.18181824684143},{"text":"you'd like to raise that crazy idea yes?","width":144.18181824684143},{"text":"and in fact the system call to do this is called raise","width":198.18181824684143},{"text":"so if you call raise, what you're doing is you're sending a signal to yourself","width":246.18181824684143},{"text":"alright so if you were to kill yourself you call raise SIGKILL","width":176.18181824684143},{"text":"if you want to send yourself SIGINT you say raise SIGINT","width":259.18181824684143},{"text":"now here's the exciting part, is that actually","width":283.18181824684143},{"text":"you can block signals","width":144.18181824684143},{"text":"you can block specific signals","width":287.18181824684143},{"text":"here's your signal mask","width":104.18181824684143},{"text":"if you'd like to hold that in front of you","width":183.18181824684143},{"text":"the amazing thing about this signal mask is that it actually stops ","width":291.18181824684143},{"text":"well we can set it to stop a lot of signals but we'll set it up to say block SIGINT","width":446.18181824684143},{"text":"because guess what if we want to send SIGKILL I don't care what you do with your mask this is getting delivered","width":324.18181824684143},{"text":"SIGKILL you cannot block but you can stop","width":262.18181824684143},{"text":"SIGINT","width":119.18181824684143},{"text":"now if you set up that mask","width":357.18181824684143},{"text":"okay? what do you think is going to happen to the signal","width":583.1818182468414},{"text":"you're going to block it right? so it's going to rebound off that piece of paper","width":313.18181824684143},{"text":"good guess but not correct, here's what happens to the signal","width":189.18181824684143},{"text":"if you're going to hold this and look as if you're going to throw it at the process","width":320.18181824684143},{"text":"no just hold it like your like practically in a sporting magazine or something","width":413.18181824684143},{"text":"here's what happens, the operating system says okay you've set up your mask, here's what I'll do","width":391.18181824684143},{"text":"this signal is pending","width":213.18181824684143},{"text":"I'm ready to deliver it to the process anytime you drop your guard down","width":420.18181824684143},{"text":"so anytime this mask goes down, we're going to send a signal","width":467.18181824684143},{"text":"how are your arms doing? yeah okay","width":178.18181824684143},{"text":"right so I'm interested to see some of the terminology right? we've got a pending signal","width":319.18181824684143},{"text":"so the word pending is the idea between when we created the signal and when we wish to deliver it","width":534.1818182468414},{"text":"so what happens if you think at this moment in time","width":220.18181824684143},{"text":"we start pressing control C control C control C control C or we start raise SIGINT raise SIGINT raise SIGINT we keep trying to raise more signals","width":470.18181824684143},{"text":"do we get a backlog of all of these signals ready to be thrown at the process?","width":352.18181824684143},{"text":"hundreds of balls about to arrive at you any moment you change your SIGMASK and let through SIGINT","width":622.1818182468414},{"text":"actually no, there's not a queue of the","width":277.18181824684143},{"text":"if you have raised SIGINT, if you've generate a signal, there's only one SIGINT to be delivered","width":617.1818182468414},{"text":"whilst we stay in this kind of captured moment in time, think back to par shell and when we talked about preventing zombies yes","width":602.1818182468414},{"text":"and we installed a signal handler to catch sigchild right?","width":391.18181824684143},{"text":"there's actually a race condition, oh you know what a race condition means now","width":183.18181824684143},{"text":"there's a race condition, suppose two children finish at exactly the same time or close to the same time","width":455.18181824684143},{"text":"it could be that we've generated SIGCHILD here","width":242.18181824684143},{"text":"and we're not going to generate another SIGCHILD for all of the other children that finish at the same time","width":331.18181824684143},{"text":"so actually the code that we wrote a while ago is not sufficient because there can't be a queue of the same kind of signal","width":663.1818182468414},{"text":"I can still have other signals for example my SIGKILL","width":220.18181824684143},{"text":"and I can deliver that but there's never a queue of multiple ones","width":213.18181824684143},{"text":"okay why is this? well imagine in an implementation where these signals are really just little bits","width":329.18181824684143},{"text":"we've got a little bit ready to fly just like a hardware interrupt where I've got a particular interrupt coming from the particular device","width":443.18181824684143},{"text":"I've got a particular signal I want to deliver to a particular process","width":430.18181824684143},{"text":"now the other thing we should talk about is what happens if this process calls fork","width":333.18181824684143},{"text":"and this process calls exec","width":173.18181824684143},{"text":"what might happen to my pending signals?","width":173.18181824684143},{"text":"what might happen to my SIGMASK","width":311.18181824684143},{"text":"the other thing we have to think about is what happens if this is no longer just a single threaded process but now uses say pthreads","width":564.1818182468414},{"text":"what should we do there?","width":93.18181824684143},{"text":"so suppose you are a pthread process okay?","width":205.18181824684143},{"text":"so in other words you've been compiled with pthreads","width":209.18181824684143},{"text":"and now you call pthread_create","width":317.18181824684143},{"text":"here's what happens if you call pthread_create","width":143.18181824684143},{"text":"you've now got two threads running yes?","width":120.18181824684143},{"text":"here's the great news, the second thread inherits your mask","width":395.18181824684143},{"text":"alright? so now they're both blocked from SIGINT","width":147.18181824684143}],
  // Part 1
  [{"text":"what do you think happens if I change my mask?","width":675.1818182468414},{"text":"here's what happen: the signal will be delivered to the process","width":301.18181824684143},{"text":"and caught by me","width":170.18181824684143},{"text":"[something]","width":163.18181824684143},{"text":"okay right so the signal in this case was delivered to me","width":176.18181824684143},{"text":"right but it couldn't happen until one of us dropped our guard","width":262.18181824684143},{"text":"here you go catch raise that","width":103.18181824684143},{"text":"so right what do you think happens if we both get rid of our masks","width":395.18181824684143},{"text":"it's arbitrary, who's going to throw it?","width":223.18181824684143},{"text":"okay who gets the signal? it's random, whichever thread the operating system decides to interrupt with a signal okay?","width":509.18181824684143},{"text":"so that's the basics of signal, give our volunteers a round of applause","width":293.18181824684143},{"text":"thank you very much","width":103.18181824684143},{"text":"why the virtual demo? because sometimes there's more interesting than simply going okay here's the technical details ","width":314.18181824684143},{"text":"yes there's a lot of just little annoying technical details but that's okay because you're illinois students","width":373.18181824684143},{"text":"you're used to being annoyed","width":133.18181824684143},{"text":"oh wait, that's not right","width":157.18181824684143},{"text":"so I'm going to run through some of these details they are on the notes, they are on the man pages etc","width":406.18181824684143},{"text":"and there will be a multiple choice quiz on this and I'll generate the practice exam shortly","width":625.1818182468414},{"text":"alright so what have we got?","width":133.18181824684143},{"text":"let's talk about some of this terminology","width":402.18181824684143},{"text":"right so we've talked about generating signals","width":213.18181824684143},{"text":"what do we are doing? well somewhere deep inside the kernel we've got a little bit set that says okay we want to deliver this particular signal to...","width":633.1818182468414},{"text":"to a particular process","width":183.18181824684143},{"text":"what's it mean if a signal is pending?","width":157.18181824684143},{"text":"it's that time interval between when we've generated it and when we've delivered it","width":350.18181824684143},{"text":"to the process","width":107.18181824684143},{"text":"okay so it's the period of time...","width":689.1818182468414},{"text":"between when we generated it and delivered it","width":563.1818182468414},{"text":"we know what it means for a signal to be blocked now","width":183.18181824684143},{"text":"it means the process has a signal mask that is preventing that signal from being delivered","width":458.18181824684143},{"text":"it's like putting a stop on your mail","width":299.18181824684143},{"text":"right? we don't just discard the signal, it just waits until we can actually deliver it","width":535.1818182468414},{"text":"what does caught mean? it means you've installed some sort of signal handler","width":338.18181824684143},{"text":"and you've decided to take care of that, process that signal in your own fashion","width":653.1818182468414},{"text":"in your own special way","width":64.18181824684143},{"text":"and then finally disposition","width":279.18181824684143},{"text":"right how do you feel about lady gaga's music","width":686.1818182468414},{"text":"okay pretty bad at the front here, that's your disposition to that particular signal","width":466.18181824684143},{"text":"what' your disposition to this lecture","width":303.18181824684143},{"text":"good so far, okay, phew","width":193.18181824684143},{"text":"that's another disposition so our disposition is what are we going to do? how do we feel about a particular signal?","width":754.1818182468414},{"text":"you know that we can install signal handlers","width":155.18181824684143},{"text":"and we can have different actions that occur for different kinds of signals","width":359.18181824684143},{"text":"you know that some signals can't be caught","width":182.18181824684143},{"text":"but for all of the other ones we can set up a particular disposition","width":258.18181824684143},{"text":"so thinking in terms of an implementation","width":205.18181824684143},{"text":"you could just think of a disposition as a table of function pointers","width":803.1818182468414},{"text":"so one function for each signal","width":304.18181824684143},{"text":"in other words, if I get a SIGINT go in here and execute this code","width":216.18181824684143},{"text":"so when I install a signal handler, I am changing a particular disposition to that particular signal","width":415.18181824684143},{"text":"right so basically it's wutchu gonna do when you get a particular signal?","width":292.18181824684143},{"text":"wutchu gonna do when you get SIGINT, wutchu you gonna do if you get SIGTERM, wutchu gonna do if you get SIGCHILD, etc","width":307.18181824684143},{"text":"that's your disposition, the sum of all of those actions is your disposition to signals","width":1014.1818182468414},{"text":"right okay let's have some guesses then","width":278.18181824684143},{"text":"do you think your signal disposition is on a per thread or per process basis?","width":373.18181824684143},{"text":"make your guess now and I'll tell you the correct answer in five four three and the answer is process!","width":503.18181824684143},{"text":"it's on a per process","width":528.1818182468414},{"text":"so signals are delivered to processes","width":1047.1818182468414},{"text":"what do you think the signal disposition is of your child?","width":389.18181824684143},{"text":"is it reset to the default?","width":173.18181824684143},{"text":"or is it a clone of the parent?","width":287.18181824684143},{"text":"make your guess now and I'll tell you in five four three two.. it's a clone!","width":508.18181824684143},{"text":"or the same as the parent","width":384.18181824684143},{"text":"in other words if you set up your parent to say ignore SIGINTs when you call fork","width":496.18181824684143},{"text":"so will your child","width":159.18181824684143},{"text":"so this is a bit you know the apple doesn't fall far from the tree","width":444.18181824684143},{"text":"if you like rythm and bass, maybe your offspring will as well","width":482.18181824684143},{"text":"but if you call exec","width":463.18181824684143},{"text":"it's reset","width":1082.1818182468414},{"text":"right, so now we can start talking a little bit about the code","width":333.18181824684143},{"text":"so where would I call SIGPROCMASK?","width":352.18181824684143},{"text":"when I don't want yellow balls thrown at me","width":897.1818182468414},{"text":"if you say that during an interview they'll think you're crazy","width":265.18181824684143},{"text":"right so what's a better answer for SIGPROCMASK?","width":264.18181824684143},{"text":"using the correct terminology of signals","width":742.1818182468414},{"text":"what am I doing with my mask?","width":177.18181824684143},{"text":"blocking, yes!","width":117.18181824684143},{"text":"we set up a mask to temporarily block signals","width":332.18181824684143}],
  // Part 2
  [{"text":"if you are working with a single threaded process and use sigprocmask","width":416.18181824684143},{"text":"guess what, if you're compiling with pthreads, then use pthread_sigmask","width":491.18181824684143},{"text":"this allows you to have different masks for different threads","width":897.1818182468414},{"text":"so now we can talk about whether a signal will be delivered","width":519.1818182468414},{"text":"for a multithreaded process","width":215.18181824684143},{"text":"and we saw that it will be delivered","width":532.1818182468414},{"text":"to one thread and it can be any thread that is not blocking the signal","width":2151.1818182468414},{"text":"so what does this mean in practice? in practice this means typically in our initialization code before we called pthread_create","width":619.1818182468414},{"text":"let's just try and block everything, let's just serve a big mask and say hey we don't want to know about signals right now","width":393.18181824684143},{"text":"and then later in one particular thread, we'll say we'll deliver signals to this particular thread","width":370.18181824684143},{"text":"and we'll lower our guard, we'll lower the mask for that particular thread","width":358.18181824684143},{"text":"so what's it mean when a thread actually gets a signal","width":163.18181824684143},{"text":"it means that thread is going to be stopped from executing the code that it's currently working on","width":343.18181824684143},{"text":"and they are going to steal it","width":104.18181824684143},{"text":"we're going to use its stack","width":132.18181824684143},{"text":"to execute the code that we write inside the signal handler","width":387.18181824684143},{"text":"so anything it was in the middle of doing, let's say it was in the middle of malloc, let's say it was in the middle of updating a data structure","width":515.1818182468414},{"text":"that is put on hold","width":170.18181824684143},{"text":"whilst we do whatever is inside our signal handler","width":183.18181824684143},{"text":"this is why things can be signal unsafe","width":307.18181824684143},{"text":"suppose your halfway through updating your data structure or suppose malloc is updating its data structure","width":348.18181824684143},{"text":"and then you try to go in and do something to that datastructure","width":246.18181824684143},{"text":"whoops now you're reading and writing from the wrong bytes","width":387.18181824684143},{"text":"we can't use mutex locks for this to prevent this because we are actually stealing the thread in order to run our signal handler code","width":783.1818182468414},{"text":"so I'll talk about a way around this in a moment where we can take a lot more careful control about when and how we handle particular signals","width":722.1818182468414},{"text":"okay so how do I learn more about this?","width":319.18181824684143},{"text":"on linux, not on your mac, but on linux, in section 7, there's a whole long article all about signals","width":603.1818182468414},{"text":"so we use -s7 to say go to section 7 and we can read all about that","width":939.1818182468414},{"text":"so let's talk about appending signals","width":141.18181824684143},{"text":"remember appending signals is our signals we're about to throw","width":534.1818182468414},{"text":"and pending signals work in the opposite way to our signal disposition","width":410.18181824684143},{"text":"that when we call fork the new child has nothing","width":550.1818182468414},{"text":"on the other hand if you call exec some sort of exec call","width":488.18181824684143},{"text":"pending signals are preserved","width":256.18181824684143},{"text":"so that means you could do something like that following","width":197.18181824684143},{"text":"let's fork and then in the child...","width":446.18181824684143},{"text":"we know there's nothing appending yet because we've just forked right?","width":303.18181824684143},{"text":"so let's deliberately raise something here","width":763.1818182468414},{"text":"okay so I'm going to raise SIGINT","width":225.18181824684143},{"text":"now if I hadn't done a signal mask at this point that could be delivered straight away","width":338.18181824684143},{"text":"whoops I've just managed to control C myself","width":337.18181824684143},{"text":"but instead in this little example, we're going to suppose...","width":402.18181824684143},{"text":"we've already set our mask","width":602.1818182468414},{"text":"suppose our mask already includes SIGINT, in other words, I'm not...","width":286.18181824684143},{"text":"going to accept your SIGINTs right now, talk to the hand right? I'm blocking this","width":275.18181824684143},{"text":"but the next thing we do is we exec something","width":626.1818182468414},{"text":"wahahaha what happens now?","width":406.18181824684143},{"text":"pending signals preserved","width":167.18181824684143},{"text":"the mask gets reset","width":160.18181824684143},{"text":"because that's what happens when you...","width":255.18181824684143},{"text":"oh, wait wait","width":243.18181824684143},{"text":"I'm certain that if in my exec code, if that now changes the mask, it can get my control C, I could actually interrupt a process before it has even started up by generating a pending signal","width":1249.1818182468414},{"text":"so my other process will get the signal later when the mask is changed","width":847.1818182468414},{"text":"and we won't say generated, we'll say delivered!","width":1501.1818182468414},{"text":"so reasoning about signals and working with them is tricky because we have to think about the timing of when things happen and we have to be careful about what our masks are","width":1165.1818182468414},{"text":"right so I've talked about pending signals","width":343.18181824684143},{"text":"if I want to send a signal, if I'm inside a multithreaded program I want to send a particular thread I can use pthread_kill","width":803.1818182468414},{"text":"if I want to just send a signal to my whole process I can send raise, if I want to send it to another process, I can use kill","width":837.1818182468414},{"text":"so signals are at the process level","width":220.18181824684143},{"text":"however, in a multithreaded process which thread actually catches them and performs a signal handler that you've installed","width":668.1818182468414},{"text":"is dependent on the signal mask of all your processes","width":372.18181824684143}],
  // Part 3
  [{"text":"right so we talked about creating signals and sending them","width":656.1818182468414},{"text":"let's actually work with them now","width":248.18181824684143},{"text":"I mentioned signals at the beginning of this class, I mean at the very beginning of the semester","width":294.18181824684143},{"text":"here's the bad news","width":105.18181824684143},{"text":"signal should not be used for multithreaded programs","width":535.1818182468414},{"text":"and in fact if you read the linux documentation it would typically say signal should not be used","width":338.18181824684143},{"text":"don't use signal!","width":82.18181824684143},{"text":"why not?","width":97.18181824684143},{"text":"well a) it's not really supported in multithreaded processes but also b) it's definition was inprecise","width":427.18181824684143},{"text":"so the way that signals are delivered on different operating systems","width":423.18181824684143},{"text":"is ambiguous","width":128.18181824684143},{"text":"so fine you managed to get something working on linux and that's all you care about use signal, but the better option is to use sigaction","width":558.1818182468414},{"text":"where we have a lot more control over what happens when we generate signals","width":614.1818182468414},{"text":"now in addition to installing a signal handler with sigaction instead of signal","width":388.18181824684143},{"text":"there's two other ways of dealing with signals, one is to create a file descriptor","width":453.18181824684143},{"text":"like a file, that we can read from a stream and what we read from is bytes that tell us about what signals have happened","width":501.18181824684143},{"text":"I'm not going to talk about it inside 241 just other than the fact that hey you should know about this and it's a pretty good way of working with signals","width":592.1818182468414},{"text":"so you could open one of these inside your own specialized thread and start pulling signals from that file descriptor","width":571.1818182468414},{"text":"and interpreting those bytes","width":153.18181824684143},{"text":"another way is to use sigwait","width":288.18181824684143},{"text":"where sigwait blocks until a signal happens and then it gives you details about which signal occurred and we'll have a look at that today","width":731.1818182468414},{"text":"in fact, let's take a break from a moment because I realize this is a lot of factual stuff and let you know about this","width":966.1818182468414},{"text":"so I've got fifty questions for you","width":259.18181824684143},{"text":"and this is going to be worth four percent of your grade","width":368.18181824684143},{"text":"and it's purpose it to help prepare you for the final exam","width":403.18181824684143},{"text":"so here's the idea is it's a little homework","width":257.18181824684143},{"text":"feel free to work in pairs, what i'd like you to do is actually try and research and try to understand the answers","width":330.18181824684143},{"text":"because we're not going to grade this purely on correctness","width":177.18181824684143},{"text":"we more care about the fact that you took the time into learning these answers because many of these questions come up in real interviews as well","width":576.1818182468414},{"text":"so I've got fifty questions for you, actually the fifty first question is optional","width":414.18181824684143},{"text":"it's this, it's draw an imaginary picture of you battling your most evil or tricky CS241 CS programming bug","width":504.18181824684143},{"text":"so looking forward to seeing dinosaurs or whatever","width":280.18181824684143},{"text":"however else you imagine working on that so can you give me a hand handing these out?","width":577.1818182468414},{"text":"here we go","width":90.18181824684143},{"text":"if you could hand some of these out for me that would be fantastic","width":423.18181824684143},{"text":"you will find that some of these are merely code writing exercises","width":284.18181824684143},{"text":"I encourage you actually writing out the code by hand because that's what you're going to do in the final exam","width":681.1818182468414},{"text":"some of these are based on information inside the wikibook","width":386.18181824684143},{"text":"and some of these will require a quick google search to find the answer","width":249.18181824684143},{"text":"maybe we haven't talked about it directly inside lecture yet","width":590.1818182468414},{"text":"feel free to write your answers in note form, like i said...","width":294.18181824684143},{"text":"this is about doing exam prep and getting points for it as well okay?","width":336.18181824684143},{"text":"so the purpose is to help you review the CS241 material","width":976.1818182468414},{"text":"yes I'll make additional copy","width":251.18181824684143},{"text":"right let's go to aux pc","width":383.18181824684143},{"text":"[silence]","width":2023.1818182468414},{"text":"okay so now I've got the code version of the demo that we did at the beginning of lecture","width":615.1818182468414},{"text":"we're going to set up our proc mask, our process mask","width":610.1818182468414},{"text":"so that a particular signal can't be sent to our process, can't be delivered to our process","width":1010.1818182468414},{"text":"right so what's the plan here?","width":174.18181824684143},{"text":"well, a long long long time ago, signal sets just used to be an integer","width":523.1818182468414},{"text":"however, there was a concern that the number of signals might exceed the number of bits inside the integer on any one platform","width":405.18181824684143},{"text":"so to make a more cross platformed solution we have this type called a sigset_t","width":390.18181824684143},{"text":"and then there are functions either set all bits, clear all bits, set one bit, etc etc etc","width":684.1818182468414},{"text":"we're looking at an example then when we are going to set all the bits inside this little bit mask","width":665.1818182468414},{"text":"and then we're going to use that","width":346.18181824684143},{"text":"and as you can see this sigprocmac actually allows us to discover the old signal proc, the old mask again","width":456.18181824684143},{"text":"so that later on in my code, I can restore the original signal mask","width":463.18181824684143},{"text":"so it's typical in well engineered programs then to at the very beginning of the process raise all the guards, raise the whole mask up so that...","width":699.1818182468414},{"text":"so that no signals get delivered early on, not until we're ready for them","width":353.18181824684143},{"text":"until we're ready to open shop","width":253.18181824684143},{"text":"right so we're calling sigprocmask we're saying okay I want to set the mask","width":479.18181824684143},{"text":"to my new mask so that's hey stop everything....","width":283.18181824684143},{"text":"and then we raise SIGINT in other words we're pressing control C on ourselves we're trying to interrupt this process","width":606.1818182468414},{"text":"now as you and I know, because we set the procmask, that means that that signal is...","width":423.18181824684143},{"text":"generated but it's not delivered, it's in a pending state","width":318.18181824684143}],
  // Part 4
  [{"text":"so now we can carry on, let's change our signal proc mask to whatever it used to be","width":618.1818182468414},{"text":"we'll print exiting and we'll return zero","width":141.18181824684143},{"text":"right so let's see what happens, how far will we get in this program before it finishes?","width":1059.1818182468414},{"text":"alright so we've sent out SIGINT nothing happened but then we changed the procmask again and that turned out to be our doom, our downfall","width":542.1818182468414},{"text":"by resetting signalprocmask to what it used to be, the signal could be delivered","width":316.18181824684143},{"text":"and of course what's the default behavior for SIGINT?","width":282.18181824684143},{"text":"kill the process. yes?","width":420.18181824684143},{"text":"there can be a delay","width":231.18181824684143},{"text":"so the system does not make any guarantees about when the signal will be delivered","width":414.18181824684143},{"text":"typically it will be as soon as you make an operating system call","width":242.18181824684143},{"text":"and that brings me on to my friday demo, I want to show you something really cool which is not directly related to signals","width":381.18181824684143},{"text":"but go on quick question","width":658.1818182468414},{"text":"yes, we're going to do that in a moment, we're going to make a thread to handle signals","width":252.18181824684143},{"text":"which is a nice engineering solution to working with signals","width":246.18181824684143},{"text":"but no I want to show you something called strace","width":295.18181824684143},{"text":"strace allows us to look inside the matrix, it allows us to see the operating system calls, it gives us a system trace","width":529.1818182468414},{"text":"of what a function is doing","width":263.18181824684143},{"text":"alright? so","width":100.18181824684143},{"text":"let me show you the code once more of...","width":297.18181824684143},{"text":"my little demo here, here it is okay","width":151.18181824684143},{"text":"we are going to set the um...","width":207.18181824684143},{"text":"called sigfillset, sigprocmask, we're going to write sending sig out, we're going to raise, etc","width":447.18181824684143},{"text":"so that's the code, now let's run this again","width":333.18181824684143},{"text":"with strace","width":488.18181824684143},{"text":"wahhhh lots of output okay, let's...","width":353.18181824684143},{"text":"scroll up here and make it a little bit smaller","width":588.1818182468414},{"text":"okay","width":333.18181824684143},{"text":"we can see every single system call that ran as part of this process","width":407.18181824684143},{"text":"you probably recognize quite a few of them right now","width":200.18181824684143},{"text":"first of all, what do we do? well after forking we had to call exec to actually load the process","width":507.18181824684143},{"text":"then we called break to discover where the beginning of the heap was","width":151.18181824684143},{"text":"we called mmap and we said we want to be able to read and write into this space","width":273.18181824684143},{"text":"we want it to be private, anonymous, etc ","width":199.18181824684143},{"text":"and just give me some space 4096 bytes","width":213.18181824684143},{"text":"negative one at the end tells me it's not associated with any file descriptor","width":233.18181824684143},{"text":"and then we call open on this LD thing and then we call fstat on that","width":503.18181824684143},{"text":"we call oh yeah it returns three","width":426.18181824684143},{"text":"sorry file descriptor three","width":226.18181824684143},{"text":"and then we call mmap to get that into memory","width":153.18181824684143},{"text":"give me a private copy with this file descriptor","width":192.18181824684143},{"text":"and here's the address that it goes in","width":113.18181824684143},{"text":"then we load the C library","width":279.18181824684143},{"text":"also file descriptor three because we closed it and we're going to mmap that","width":331.18181824684143},{"text":"so we're pulling the C library into our file system","width":222.18181824684143},{"text":"sorry into our virtual memory","width":271.18181824684143},{"text":"okay so we set up a few more memory mapped regions","width":263.18181824684143},{"text":"okay and here's the beginning of our code","width":268.18181824684143},{"text":"we are setting the signal masks","width":293.18181824684143},{"text":"see that puts being turned into a low level write call","width":380.18181824684143},{"text":"so a tgkill thing","width":181.18181824684143},{"text":"which is a low level version of our raise","width":201.18181824684143},{"text":"and then we set the signal process mask again","width":266.18181824684143},{"text":"and that's when our process gets interrupted by SIGINT","width":460.18181824684143},{"text":"so this is pretty cool right? you can actually see what a process does","width":337.18181824684143},{"text":"at the operating system level","width":96.18181824684143},{"text":"you can get between any process and all of the kernel calls","width":281.18181824684143},{"text":"that means that we can set our process up into lala neverland and make arbitrary return values to anything that asks for the system to do","width":926.1818182468414},{"text":"so strace is very powerful","width":133.18181824684143},{"text":"you can shim into every operating system call and see what it's being called with and see the return values","width":378.18181824684143},{"text":"right so that's our sigprocmask little demo","width":315.18181824684143},{"text":"let's go back to the handout","width":693.1818182468414},{"text":"right so I mentioned this hey instead of using signal, use sigaction","width":327.18181824684143},{"text":"here's how we use sigaction","width":141.18181824684143},{"text":"we need to give it a signal number and we also set up one of these structs","width":350.18181824684143},{"text":"struct sigaction with everything we need to do or we want to say what to do when a signal is delivered","width":609.1818182468414},{"text":"okay how do we set it up?","width":198.18181824684143},{"text":"inside my struct, I could have a regular handler just like we did with signal","width":478.18181824684143},{"text":"here's the function that should be called when the signal is delivered","width":347.18181824684143},{"text":"there's actually another function which allows me to get a lot more information about the signal","width":443.18181824684143},{"text":"but we're not going to talk about it in 241 but if you wanted to write a more complicated signal handler you might use this other function prototype instead","width":493.18181824684143},{"text":"okay what's different tough is that there's a mask","width":309.18181824684143},{"text":"a set of signals and these flags","width":192.18181824684143},{"text":"and it's important to remember to set up these other two items","width":383.18181824684143},{"text":"so here we go, here's some example code, right we're going to have our little struct","width":282.18181824684143},{"text":"we'll set up our handlers so that's our callback function","width":363.18181824684143},{"text":"let's do something with that mask","width":123.18181824684143},{"text":"I'll tell you what that mask does at the moment, typically you either empty it or fill it","width":283.18181824684143},{"text":"and then with our flags, typically you either set this to zero or sa_restart","width":476.18181824684143},{"text":"and then finally okay let's register for SIGINT","width":259.18181824684143},{"text":"this information","width":63.18181824684143},{"text":"so this set of signals","width":319.18181824684143},{"text":"does not affect delivery of the signal, this set of signals says what should be my mask when I'm actually inside the signal handler","width":1179.1818182468414},{"text":"so for example, if I'm handling a SIGINT","width":300.18181824684143},{"text":"do I want to block all other signals","width":174.18181824684143},{"text":"do I want to prevent a SIGTERM from coming in","width":273.18181824684143},{"text":"now for our typical easy little programs","width":157.18181824684143},{"text":"naw we don't need to worry about them, we don't need to care about these race conditions","width":193.18181824684143},{"text":"but if you're writing something complicated when you might have to say prevent SIG control C","width":439.18181824684143},{"text":"but also make sure that realtime information, realtime signals are always processed","width":364.18181824684143},{"text":"then you might actually use this to work out which signals can temporarily block another signal of a lesser priority to you from being executed","width":672.1818182468414},{"text":"of a lesser priority to you from being executed","width":640.1818182468414}],
  // Part 5
  [{"text":"right so we'll just say hey we don't care","width":186.18181824684143},{"text":"we'll let all of the signals interrupt us","width":228.18181824684143},{"text":"right so that's a quick outline of this","width":129.18181824684143},{"text":"let's have a look at page two","width":259.18181824684143},{"text":"cause we're going to use it","width":214.18181824684143},{"text":"alright let's fix the code we wrote at the very beginning of the semester then","width":264.18181824684143},{"text":"when we talked about eating zombies","width":226.18181824684143},{"text":"how do we eat zombies? we call waitpid on them","width":225.18181824684143},{"text":"on the parent","width":533.1818182468414},{"text":"so our problem is that this signal handler","width":303.18181824684143},{"text":"isn't going to be called every time a child exits","width":274.18181824684143},{"text":"because if I have two children exiting at the same time, I might only get one signal","width":324.18181824684143},{"text":"remember? if a signal is pending, it has been generated","width":223.18181824684143},{"text":"I don't start queuing them up","width":159.18181824684143},{"text":"so if I had two children finishing at about the same time","width":291.18181824684143},{"text":"or if I have temporarily blocked all of my signals then..","width":330.18181824684143},{"text":"then I want to be able to eat multiple zombies","width":211.18181824684143},{"text":"so here's how we can do that, the better code to do this then is to keep calling waitpid until there's no more zombies left to reap, until there's no more zombies left to find","width":637.1818182468414},{"text":"right so here's the typical way of doing this ","width":135.18181824684143},{"text":"there's a  flag we can put in here to say actually...","width":584.1818182468414},{"text":"don't wait just return immediately if there is no more children to..","width":534.1818182468414},{"text":"no more zombies to find then let me know about it","width":275.18181824684143},{"text":"[silence]","width":1783.1818182468414},{"text":"and so we better put this inside a loop so here's our plan","width":524.1818182468414},{"text":"we'll say while the exit value is a valid child address","width":375.18181824684143},{"text":"so while this is greater than zero","width":157.18181824684143},{"text":"then I know I've got a valid pid","width":335.18181824684143},{"text":"and go around again","width":87.18181824684143},{"text":"and eventually I'll run out of child processes to reap","width":509.18181824684143},{"text":"okay how we doing for time? good","width":191.18181824684143},{"text":"so now it's your turn","width":193.18181824684143},{"text":"can you remember what to put inside this?","width":152.18181824684143},{"text":"so we've set up our signal hander","width":178.18181824684143},{"text":"how do we correctly install it?","width":194.18181824684143},{"text":"[silence]","width":4762.181818246841},{"text":"okay right so ","width":147.18181824684143},{"text":"we've set up the handler","width":66.18181824684143},{"text":"we better set up this mask","width":133.18181824684143},{"text":"if clearing zombies is the most important thing and we don't want to be interrupted by anything, not even say control C","width":469.18181824684143},{"text":"then let's say that we'll set the mask...","width":829.1818182468414},{"text":"on a...","width":128.18181824684143},{"text":"let's say mask.. what's that? it's going to be sa.sa_mask","width":406.18181824684143},{"text":"[writing]","width":694.1818182468414},{"text":"and then finally flags we could just say zero","width":348.18181824684143},{"text":"but there's something that's useful for real programs which is sa_restart","width":684.1818182468414},{"text":"so if you install signal handlers with sa_restart","width":217.18181824684143},{"text":"you're making your life a little bit easier in the rest of your program","width":267.18181824684143},{"text":"if you were to read say about write or read","width":349.18181824684143},{"text":"other function calls at the system levle","width":195.18181824684143},{"text":"sorry, other system calls","width":118.18181824684143},{"text":"you discover that some of them will simply return immediately without doing anything","width":303.18181824684143},{"text":"and give you an error which is E_interrupted or E_retry","width":282.18181824684143},{"text":"and E_interrupted means hey I was interrupted by a signal so I chose not to do anything","width":358.18181824684143},{"text":"ah thanks operating system, that's really helpful","width":164.18181824684143},{"text":"why don't you try again? do you want to play again?","width":136.18181824684143},{"text":"and so we have to write code that checks for the specific error condition that says I was interrupted and I want to restart","width":563.1818182468414},{"text":"well specifying this restart parameter in here...","width":264.18181824684143},{"text":"makes our programming a little bit easier because the number of times that happens is reduced","width":338.18181824684143},{"text":"it's I'm afraid not 100%","width":173.18181824684143},{"text":"but, it does do the restart for you automatically on some function calls","width":513.1818182468414},{"text":"again it's not worth knowing the big list, it's just worth actually going to say man -s7 signals and reading more about it if you are interested","width":709.1818182468414}],
  // Part 6
  [{"text":"great okay so we've got time for a final little demo","width":433.18181824684143},{"text":"and what we're going to do is instead of the system stealing one of our threads","width":573.1818182468414},{"text":"to handle a signal","width":227.18181824684143},{"text":"we are going to explicitly create a thread","width":180.18181824684143},{"text":"that pulls signals one at a time and handles them","width":222.18181824684143},{"text":"so its more code to write","width":181.18181824684143},{"text":"but it's less likely to.. it own't suffer from asynchronous signal problems if we're careful about how we...","width":609.1818182468414},{"text":"process our signals","width":82.18181824684143},{"text":"so let's.. I'll show you what I mean","width":216.18181824684143},{"text":"so what we're looking at today is... using SIGWAIT","width":566.1818182468414},{"text":"and I'm going to put that inside a thread","width":250.18181824684143},{"text":"who's only job is to say okay tell me the next signal that's delivered","width":825.1818182468414},{"text":"we can tell it in this case the mask is which signals do I care about","width":283.18181824684143},{"text":"[silence]","width":1467.1818182468414},{"text":"so if I get a SIGINT, do some code, if I get SIGTERM do some code","width":335.18181824684143},{"text":"so for example, Java, if you sent it a SIGHUP will print out a whole load of debugging information about the garbage collector and other internals of the...","width":833.1818182468414},{"text":"stack traces and other internals of the JVM","width":143.18181824684143},{"text":"the apache webserver if you send it a SIGHUP signal will reread its configuration files","width":410.18181824684143},{"text":"so that you can make updates to the webserver without having to restart the process and deny people that are currently connected to it","width":549.1818182468414},{"text":"so this might be a way to do this, you could say oh look if I've got um...","width":348.18181824684143},{"text":"SIGHUP","width":107.18181824684143},{"text":"if I get this signal... then print something out or","width":307.18181824684143},{"text":"reread my configuration data","width":238.18181824684143},{"text":"today I'm just going to show you a demo with just a couple of these","width":264.18181824684143},{"text":"and we've got a little default case for our own purposes that calls fprintf","width":254.18181824684143},{"text":"which we wouldn't call normally inside the signal handler","width":233.18181824684143},{"text":"because it could be that the thread that we've stolen it from is already inside fprintf or inside malloc etc","width":454.18181824684143},{"text":"but by using our own explicit thread, we can do this, we can do it in a safe way","width":432.18181824684143},{"text":"right so let's have a look at a demo...","width":451.18181824684143},{"text":"yay okay great","width":528.1818182468414},{"text":"right so here's our plan","width":112.18181824684143},{"text":"we will set because we're a multithreaded process","width":415.18181824684143},{"text":"we will set our sigmask before creating other threads","width":300.18181824684143},{"text":"so that when we create a new thread, it inherits the same mask","width":291.18181824684143},{"text":"and our default mask today rather than just saying okay ignore everything","width":303.18181824684143},{"text":"what I'm going to do is addset and just put in two bits","width":245.18181824684143},{"text":"the bit for SIGINT and the bit for SIGTERM","width":190.18181824684143},{"text":"that means that if someone sends me a SIGINT of course there's no thread that is prepared to catch it","width":489.18181824684143},{"text":"both threads are blocking these signals","width":546.1818182468414},{"text":"and here's my application code","width":160.18181824684143},{"text":"sleep one, print dot and because I want to see the dots immediately I'm turning to my C library to immediately flush anything inside the C buffers","width":496.18181824684143},{"text":"so we can see the dots appear one a second","width":423.18181824684143},{"text":"and inside my thread, here we go, today I've got my...","width":400.18181824684143},{"text":"my important code that's going to present some debugging information","width":166.18181824684143},{"text":"what is that? oh it's just the name of the signal that was delivered","width":287.18181824684143},{"text":"okay so let's compile this","width":271.18181824684143},{"text":"right if I was going to compile it...","width":261.18181824684143},{"text":"like this, what will we see?","width":290.18181824684143},{"text":"it will complain right? undefined reference no one defined pthread_sigmask","width":299.18181824684143},{"text":"what we forgot to do is to tell gcc that we're trying to compile a multithreaded program so...","width":406.18181824684143},{"text":"here we go let's give it a pthread option good and now we've got ourselves a little demo","width":478.18181824684143},{"text":"and every second it's printing out dot and then flushing the buffer","width":240.18181824684143},{"text":"so if we now send it a signal...","width":342.18181824684143},{"text":"our single thread wakes up, returns from SIGWAIT and runs the code inside that case statement which just prints out SIGINT","width":437.18181824684143},{"text":"where did the control C come from? oh that's just the shell telling us that it sent a control C","width":353.18181824684143},{"text":"and so I can say ok stop stop stop stop stop and of course it never stops","width":486.18181824684143},{"text":"alright and but I can still call SIGQUIT and that will terminate the program","width":383.18181824684143},{"text":"and with that have a wonderful weekend and I'll publish a online version of these questions in subversion. thank you very much!","width":703.1818182468414},{"text":"thank you very much!","width":64.18181824684143}],

  // Start Lecture Video 33 (QUIZ NO CAPTIONS)

  // Start Lecture Video 34
  // Part 0
  [{"text":"[silence]","width":3816},{"text":"alright good morning class, how are you?","width":381},{"text":"hello myself how are you? right I am great thank you","width":147},{"text":"let's try again, good morning class how are you?","width":198},{"text":"okay great so here's our plan for today, we're going to run through and talk about these final exam questions","width":443},{"text":"if you're sitting by yourself please move until you're sitting next to somebody","width":283},{"text":"if you worked on these questions with your neighbors why not find a different neighbor that can maybe give you insight into the things you thought you knew and the things that you didn't think you know","width":552},{"text":"so please find some interesting neighbors at this moment","width":331},{"text":"secondly, I'll give you some tips on doing the streaming merge sort","width":277},{"text":"I'll talk about MP deadlines, we'll do an ask me anything and if we have time we'll do some tips on learning and prep for the final exam","width":528},{"text":"right so at this moment please find a neighbor and we'll take a few moments for you to compare answers and find out ask your neighbor stuff that you were unsure about","width":744},{"text":"[silence]","width":22995}],
  // Part 1
  [{"text":"[silence]","width":11139},{"text":"here we go so I did a quick poll to see which questions people would like me to go over in lecture","width":295},{"text":"I'll get through some of them today, others we'll get through before the end of the semester","width":385},{"text":"here's the game is that this is all stuff that CS241 UIUC students should know, it'd be embarrassing if you graduated and you didn't know this stuff, if you weren't able to explain it to other people say...","width":762},{"text":"in an interview or if you're on a team","width":172},{"text":"and you're getting more mature right? and so the idea is to say look this is less about okay learning in the classroom and you should start to be independent learners and also kind of use each other as resources","width":907},{"text":"and of course we have the wonderful WWW project with all sorts of factual information out there","width":373},{"text":"so I'm going to encourage you to actually be able to be independent researchers when it comes to CS knowledge","width":423},{"text":"okay so let's go through some of these","width":191},{"text":"but first let's take a little break and talk about what's coming up next week","width":341},{"text":"right the big one is the key value competition","width":250},{"text":"the very last MP is due at the end of the semester so Wednesday one minute before midnight","width":376},{"text":"all entries before then will be graded","width":144},{"text":"realize that if a hundred people were to submit at that moment, it would take say three minutes times one hundred, it'll take over 300 minutes before you see your result","width":590},{"text":"so if you want to leave it to the very last minute, be my guest, but realize that you're playing with fire","width":484},{"text":"you may not have a second chance of course to fix anything","width":223},{"text":"so early submissions you should see results early","width":246},{"text":"late submissions it'll take hundreds of minutes before you see a response","width":355},{"text":"before all of that, here's some other good news hey guess what there's going to be a last chance","width":321},{"text":"perhaps you got a zero on the MP because you were busy doing something else","width":477},{"text":"right or just made a silly mistake or don't panic you can still reclaim 75% of your points","width":327},{"text":"if you've already got at least 75% on a particular MP, you can ignore that MP","width":355},{"text":"and of course take the maximum of these grading runs and all prior runs","width":294},{"text":"so for everything except key value this applies","width":350},{"text":"on Monday, if you didn't finish MP merge part 2, here's your chance","width":444},{"text":"and by the way, we have made MP merge part 2 a little bit easier to earn for points","width":682},{"text":"if you can pass part two you get 95%, if you beat the TA's solution, you get the remaining 5%","width":541},{"text":"in the very first run of MP merge streaming, only 25% of the class were able to succeed at this task","width":548},{"text":"which it was a new MP and actually to be honest, it surprised me that it was hard","width":463},{"text":"so today I'm going to... ","width":220},{"text":"today, however, one is I'm going to give you a couple of hints and secondly you're different people than before right?","width":582},{"text":"you're brighter, smarter, better looking, ah that doesn't matter","width":259},{"text":"but you're brighter and smarter and so you should now be able to finish MP merge part 2","width":505},{"text":"and do much better than you could than at the beginning of the semester","width":235},{"text":"right so we'll come back to that at the end of this class","width":321},{"text":"if you already did well, we're going to give you some bonus points instead","width":256},{"text":"yes at the back?","width":339},{"text":"uhh I believe there was a context page and I heard this anecdotally from the grading TAs, that only 25% of students...","width":774},{"text":"but I tell you what, I will ensure that an email is sent out","width":308},{"text":"in the near future","width":108},{"text":"certainly before the weekend","width":236},{"text":"okay right so yes I realize it's a busy time at the end of the semester, that's kind of always how it works isn't it?","width":403},{"text":"so see my FAQ, help I'm working too hard, yeah I'm sorry learning is hard right?","width":355},{"text":"also don't confuse recognition like oh I know this I have seen this before with actual ability to do something... yes?","width":620},{"text":"yes there will be something on piazza very shortly or the home page to say the URL for that","width":475},{"text":"similarly a URL for the key value as well","width":290},{"text":"alright so as you know, there's a big difference between being able to say oh I recognize this to hey I can actually recall this vs hey I can actually use this information vs I can actually debug a version of this","width":734},{"text":"vs hey I can create something based on this which satisfies additional constraints right? we're talking about different levels of  bloom's taxonomy of understanding and learning","width":568}],
  // Part 2
  [{"text":"right so yeah learning is hard I'm sorry if I knew a way to do the matrix for instance I know how to do systems programming, that would be fantastic but we can't do that just yet","width":602},{"text":"right so let's have a look at one of these problems today and this will actually help with the rest of the homework","width":411},{"text":"which is perhaps you can do this, I'll give you the answer in a moment, perhaps you should be able to do this, this is actually based on a final exam question","width":477},{"text":"remember the bitwise operators? these are not the logical operators, these are bitwise operators so we can use ampersand & for masking for example this is or | left << and right shift >>","width":708},{"text":"or right shift and left shift","width":107},{"text":"and so we want to use these to write some pseudocode as to how the hardware works right? can we actually write some C like code that would convert a pointer","width":595},{"text":"here it is here's my little pointer to one byte","width":164},{"text":"and determine the page number and the offset","width":249},{"text":"right so this shouldn't be too hard if you know your bitwise operators","width":277},{"text":"I'll give you just 30 seconds for you and your neighbor to have a go","width":235},{"text":"[silence]","width":5088},{"text":"okay so here's the plan, we think of our virtual memory address in terms of two halves","width":317},{"text":"the lower bits will be our offset and we're just going to ignore those for a moment","width":251},{"text":"they'll come back to play at the very end when we add them back in","width":205},{"text":"and we've got a page number as well so the upper bits are our page number","width":299},{"text":"right so we can use our bitwise operators to extract this from our single pointer","width":382},{"text":"for the offset we want to write a mask so that we only see the lowest bits","width":346},{"text":"so we're going to say pointer","width":246},{"text":"& and now I want something that represents the twelve lowest bits, in other words if I was writing in binary it'd be 1 2 3 4 1 2 3 4 1 2 3 4","width":734},{"text":"so that would be my binary representations and all the upper bits would be zero","width":288},{"text":"right can I convert that into hexadecimal","width":449},{"text":"remember hexadecimal each hexdigit corresponds to four bits right?","width":311},{"text":"so we should and it with 0xfff","width":786},{"text":"and the upper bits of this number are all zeroes","width":550},{"text":"right what about the page number?","width":179},{"text":"I want to take these bits and shift them to the right twelve times","width":391},{"text":"well I could divide by four thousand ninety six","width":267},{"text":"but instead why don't we just shift","width":418},{"text":"there we go so now I've got my page number","width":270},{"text":"if my hardware implemented a single level page table","width":290},{"text":"I could then use this to look up an entry inside that single level page table","width":262},{"text":"that would give me what?","width":201},{"text":"what's it called?","width":325},{"text":"what do we get when we look inside the page table?","width":182},{"text":"the frame! yes the physical frame","width":218},{"text":"so if I still use this, look it up inside the page table, I get a physical frame","width":323},{"text":"if I take that frame, I can now combine it with the offset to give me the actual address","width":442},{"text":"so the final address..","width":337},{"text":"would be...","width":167},{"text":"take the frame shift it...","width":286},{"text":"left by twelve, put it into the right place","width":282},{"text":"and or it or add in the offset","width":525},{"text":"and that would give me the actual RAM address, the actual piece of RAM that I want to read or write to","width":498},{"text":"of course we're writing C code, my assumption is that our hardware engineers are not writing C code, they are probably writing verilog or vhdl or some other lower level hardware language","width":734},{"text":"alright so let's see if you can play with page tables then for this little example","width":397},{"text":"here's a virtual address","width":256},{"text":"this time I've got eight bit pages, they're tiny, and the following page table","width":343},{"text":"so using this, what is the physical address associated with this virtual address?","width":442},{"text":"so we're going to have to take this address and cleave it into a page number and a offset","width":468},{"text":"[silence]","width":1259},{"text":"and the answer is...","width":173},{"text":"it's a trick question, you can't answer it yes? because...","width":254},{"text":"where's the offset going to be? the offset is going to be the lowest eight bits","width":356},{"text":"so the upper hexadecimal digits are your page numbers","width":318},{"text":"and I didn't give you...","width":227},{"text":"enough entries of this table, its somewhere off here","width":376},{"text":"so I didn't actually give you this particular entry","width":256},{"text":"right so let me stencil it in, so somewhere deep, much lower in the page table, there happens to be entry number 010203","width":608},{"text":"and if we were to look up there and we found an address like...","width":545},{"text":"BAAD","width":299},{"text":"now you can tell me the actual physical address, I've got to take this and combine it with the original offset","width":453},{"text":"so in other words, the final address will be BAAD04","width":616},{"text":"would be our physical address","width":160}],
  // Part 3
  [{"text":"questions about that?","width":1177},{"text":"so you see when you use a page table","width":121},{"text":"things are slow because our page table itself is stored in memory","width":269},{"text":"so anytime your process wants to do anything","width":151},{"text":"read or write a piece of memory","width":84},{"text":"it first of all has to read this memory of the page table","width":230},{"text":"in order to calculate where to go in memory","width":215},{"text":"you've slowed everything down","width":118},{"text":"so to speed everything back up, we need a cache, what is that cache called?","width":536},{"text":"yes the TLB, the translation lookaside buffer","width":201},{"text":"because most of the time when we use an address, we use it again in the near future","width":311},{"text":"and so hopefully we have a cache hit, hopefully we have a high likelihood that we don't need to actually go back to our table to discover the answer","width":557},{"text":"so the TLB is part of the memory management unit, its job is to short circuit this lookup so that we can actually have good performance","width":735},{"text":"alright what does peterson's solution solve?","width":673},{"text":"do you know? does your neighbor know?","width":419},{"text":"if your neighbor said the critical section problem, congratulations you should sit next to that neighbor in a future class","width":609},{"text":"yes the critical section problem","width":464},{"text":"how dare I ask questions which are from weeks and weeks and weeks ago","width":320},{"text":"here's why, if you want long term memory of CS241 content","width":366},{"text":"the best way to actually learn something for the long term is to use your long term memory","width":294},{"text":"and so I'll be talking about that in terms of revision for the final and beyond","width":323},{"text":"right so it solves the critical section problem","width":190},{"text":"right malloc is thread safe but not signal safe","width":213},{"text":"the malloc you wrote was not actually thread safe but now you know about mutex locks","width":397},{"text":"you could have written a little lock and unlock around your code and made your malloc thread safe","width":465},{"text":"but it's not signal safe","width":308},{"text":"why? what's special about signal handling that's different from threads","width":643},{"text":"not quite","width":402},{"text":"yeah you're interrupting the process okay","width":611},{"text":"right yes you might interrupt malloc whilst it's executing malloc code","width":325},{"text":"reenter malloc and the data structure could be in a inconsistent state","width":350},{"text":"so it's a bit like... an analogy here might be you have a whole load of chefs coming in","width":528},{"text":"so you say I tell you what I'll have mutex locks so that only one chef at at time is allowed to use my kitchen","width":412},{"text":"so that's thread safe","width":160},{"text":"with signals, what you do to the chef is you say actually hold on chef I'm going to get you to come back to the room and cook this different recipe","width":458},{"text":"they walk in, there's the same thread, but now the kitchen is in disarray, the oven is already got something inside it, already set to a particular temperature","width":569},{"text":"and now your chef attempts to use these resources","width":218},{"text":"whoops, we can now get our memory data structures into an inconsistent state","width":499},{"text":"or we might try to lock a mutex that we've just locked resulting in deadlock because we were the thread that actually locked the mutex","width":711},{"text":"right and...","width":260},{"text":"here's one little challenge for you, okay think back in time to sempahores","width":558},{"text":"how do semaphores work? remember they don't let their count go below zero","width":313},{"text":"if you call sem_wait, it might block until someone else calls sem_post","width":561},{"text":"so I'm going to finish this code to make a barrier","width":410},{"text":"or rather you're going to finish this code to make a barrier","width":197},{"text":"what I want is so that the first four threads when they call this code are blocked","width":459},{"text":"but when the fifth thread arrives","width":174},{"text":"they all may continue but not before","width":288},{"text":"alright so how are you going to finish this code and what are the initial values for sempahore a and semaphore b","width":503},{"text":"alright this is a timed challenge","width":253},{"text":"you've got until I've done two laps of this and finished singing ackey breakey heart","width":417},{"text":"fortunately I sing very quietly ","width":106},{"text":"[silence]","width":10479}],
  // Part 4
  [{"text":" alright so we've got five threads walked into a barrie ow!","width":516},{"text":"what do we have going on here? well each time they walk into a barrier, they try to wait on A and then they increment a count","width":537},{"text":"if the count is something, hey let's post to the other semaphore","width":288},{"text":"and then let's always post to something else","width":239},{"text":"so this first semaphore sA looks like it's being used to define a critical section","width":607},{"text":"why should this be inside the critical section?","width":449},{"text":"we only want one thread at at time to be incrementing count or checking its value","width":280},{"text":"so if we make this post back to A","width":354},{"text":"then we can ensure that one thread at a time is incrementing the count so we can't have a race condition","width":581},{"text":"so that suggests the first value of sA is what?","width":309},{"text":"one, yes!","width":77},{"text":"so we allow one thread through but if another thread comes at the same time, it's forced to wait until the first thread has posted","width":653},{"text":"right so we're doing one at a time","width":230},{"text":"right now we said five threads so this is going to be if our count has gone up to five","width":406},{"text":"cause we're doing it after we've incremented the count","width":153},{"text":"what do we do? we post to sB","width":689},{"text":"this suggests if I want my early threads to wait...","width":465},{"text":"maybe I should set this to zero","width":235},{"text":"because why don't i wait down here","width":547},{"text":"and I'll wait until that count is incremented to one","width":374},{"text":"okay does this code work?","width":198},{"text":"does it let through any threads before the fifth thread arrives?","width":516},{"text":"can any threads get through? if I send it four threads can any of them get through?","width":370},{"text":"where do they get stuck?","width":245},{"text":"yeah the sem_wait waiting for sB so the first four threads get stuck at that line","width":472},{"text":"all waiting for the count to go up by one","width":244},{"text":"but on the fifth thread we call sem_post great we're done right? our code is complete. actually what happens instead?","width":407},{"text":"yeah one thread is lucky","width":246},{"text":"the other four not so much, one thread is going to say great I was able to continue","width":429},{"text":"the other four of course are going to wait forever","width":248},{"text":"but there's something we can do to that one lucky thread","width":250},{"text":"that is going to give us a domino effect right? and that is what?","width":358},{"text":"let's sem_post","width":148},{"text":"so as that thread walks out the door, it bumps up the count again","width":372},{"text":"freeing the next prisoner","width":157},{"text":"that prisoner, that thread walks out, bumps up the count, freeing the next prisoner and so on and so on until we have all five threads have left our barrier","width":822},{"text":"so that's correct code, what would have happened if we had switched these two around?","width":668},{"text":"perhaps you can explain it to your neighbor and decide if your neighbor's explanation is any good","width":1252},{"text":"so what would happen","width":179},{"text":"there's not a barrier anymore, yes, before we called sem_wait we've added one to the count so now every thread will simply get through the moment it arrives so it'd be a useless barrier","width":800},{"text":"alright thanks for playing today's review questions","width":199},{"text":"right so let's talk about some other stuff","width":112},{"text":"first of all Monday I'm leaning towards having no quiz on Monday, no more quizzes","width":633},{"text":"but I'd like to just take a quick survey, if you would like one more quiz this semester on Monday","width":456},{"text":"do this, this way, if you'd like no more quizzes for the rest of the semester... do that","width":502},{"text":"Yes I'll still be dropping three","width":417},{"text":"the last quiz will be a quiz of all possible questions","width":458},{"text":"okay is that sufficient information for you to be able to make up your minds","width":198},{"text":"are you ready? go","width":335},{"text":"[something] has it, there were more people pointing in that direction","width":323},{"text":"so there will not be a quiz next week, no more quizzes","width":423},{"text":"right the next thing we'll talk about yes","width":615},{"text":"you can generate your own quiz simply by concatenating all possible PDFs","width":569},{"text":"okay so let's see we've got...","width":219},{"text":"we've done MP deadlines, streaming sort, oh yes right","width":263},{"text":"section tomorrow, section there is no prep for section, in section you will get your webserver finished","width":495},{"text":"we may add one small little thing to it as well and then the rest of the section time will be spent on MP development and MP finishing","width":506},{"text":"and MP questions","width":111},{"text":"plus there's an opportunity for you to give feedback on section experiences back to your course assistants etc","width":569},{"text":"so please come to section, also please bring your answers to section for points right? to get the four percent, bring your printed copies to section thank you very much","width":719},{"text":"right okay","width":113},{"text":"[silence]","width":836},{"text":"right once upon a time I had some data","width":218},{"text":"and my data arrived in chunks","width":160},{"text":"here it is","width":136},{"text":"there was a little callback that said hey I've got 256 numbers for you","width":281},{"text":"before returning, you have to copy those numbers out into your own area","width":493},{"text":"because by the time you return, that little buffer is going to be overwritten with the next set of numbers","width":351},{"text":"so that's the callback, to be given all of these, unfortunately you didn't know how many times you're going to be called back","width":428},{"text":"other than the fact that to make the MP simpler there was going to be 2^n number down here so it might be 4 6 8 16 32 etc etc etc","width":641}],
  // Part 5
  [{"text":"so our task then was to turn this into a merge sort problem","width":473},{"text":"in other words..","width":219},{"text":"that two neighboring chunks of data","width":284},{"text":"should be combined","width":122},{"text":"each individual chunk was sorted using queuesort","width":267},{"text":"and we had say eight threads available to start doing all this merging","width":552},{"text":"now the naive TAs solution was actually not that hard to beat","width":421},{"text":"here's all it did","width":206},{"text":"it simply copied all of these into a large array","width":268},{"text":"and we made a fair guess about how big a size it should be","width":285},{"text":"but we did use realloc just in case the data was going to be larger than expected","width":389},{"text":"but we didn't start off with something small like hey 16 or 32","width":234},{"text":"we gave it a big number because if realloc does need to realloc for space","width":393},{"text":"then it used to call malloc, it needs to then do a memcpy to move all of that data","width":323},{"text":"and talking to memory is slow so we made a good guesstimate about how big a buffer we would need","width":493},{"text":"it simply waited until we got all the pieces","width":319},{"text":"and then it used the part one code","width":391},{"text":"and then it printed out the whole result","width":555},{"text":"right how can we do better?","width":376},{"text":"in this regrade of this we're actually going to put in a small delay between each one to assure that there's actually some significant computational time to work on these items","width":773},{"text":"so some things that we can do which are better, obviously we've got 8 threads we could get started sorting this data before we see the very last piece of data","width":635},{"text":"the other thing we can do is at the very end","width":265},{"text":"we could actually start printing the results","width":254},{"text":"before we finished the final merge","width":289},{"text":"so in the very final merge, as we're pulling these two yellow pieces together","width":342},{"text":"if I got to here, I don't even need to write this data back I could be printing it out to a file","width":605},{"text":"as I merge these results together, so there's actually two optimization ideas","width":384},{"text":"right so what's the simplest way of doing some of these early merges","width":296},{"text":"well one is to say hey doing this stuff thinking about all these different levels is really really complicated","width":398},{"text":"for my tired brain","width":176},{"text":"and so get something simple working, here's a really simple idea","width":312},{"text":"is look at these in pairs","width":167},{"text":"look a lot of merging actually just takes down here at the smallest level","width":333},{"text":"so we could get some speed up","width":172},{"text":"just by thinking about these small blocks","width":258},{"text":"right so every time I see an odd numbered block, I'm going to start off the merge process to make myself a bigger block","width":640},{"text":"and so I could probably write that code just to deal with these smaller blocks","width":257},{"text":"the accounting, keeping track of all the statuses of these little blocks is not too hard","width":448},{"text":"and then when I finish making all of my lighter blue, my cyan blocks, then I'll just...","width":395},{"text":"give the rest of the problem to my original part1 code and just let it run through that","width":604},{"text":"right I should probably stop here because unfortunately...","width":373},{"text":"you are all two bright, you want to do better than this","width":318},{"text":"here's the danger, A writing C code is hard","width":196},{"text":"I'll give you an example of that on Friday when I talk about Toyota's C code and their embedded code inside their memory management unit","width":464},{"text":"various swear words have been defined to describe just what a mess this C code was","width":516},{"text":"so that's the first thing, look writing C code is hard, writing any code is hard","width":312},{"text":"second is that thinking about this algorithm is hard","width":267},{"text":"and sometimes it's good just to come up with something which","width":256},{"text":"you have high confidence in working, get that working and then have a go at something more complicated","width":538},{"text":"so I'll give you some hints about something that's a bit more complicated without going into a full algorithm","width":306},{"text":"and it's this","width":198},{"text":"let's label our blocks 0 1 2 3 4 you get the idea","width":581},{"text":"and also, we'll keep track of the blocks as to how much data they contain which is sorted","width":477},{"text":"so initially after we've done the queuesort I've got one block size of data","width":383},{"text":"and later up here I've got two block sizes of data","width":583},{"text":"so if I keep these labels","width":233},{"text":"then my labels correspond to where my blocks start in memory","width":234},{"text":"so let me call this block 0, this block 2, this block 4, this block 6","width":479},{"text":"if I do this, then I can make the following observation","width":280},{"text":"my block size gives me a strong hint to which pairs I should be merging together","width":685},{"text":"so for example, on my cyan here, if I gave you block 4, you could say oh you should be merging that with block 6","width":649},{"text":"if I gave you block 6, you could say oh you should be merging that with block 4 once they are of sufficient size","width":626},{"text":"so if I gave you a block 4 of size 2, you'd say okay great that needs to be merged with block 6 of size 2","width":385},{"text":"if block 6 of size 2 is not yet ready, then do nothing","width":410},{"text":"and we can go the other way, hey here's block 6 of size 2, you should merge with block 4 of size 2","width":388},{"text":"if block 4 of size 2 is not yet ready, do nothing, don't panic, don't worry about it because at some point block 4 will be ready in the future and it will merge with me","width":557}],
  // Part 6
  [{"text":"so how can I determine which blocks to put together","width":552},{"text":"okay let's have a look at this one, this is still zero and block four but this time the size is size 4","width":473},{"text":"so if I gave you block 4 of size 4, you would say oh you should be merging with block 0","width":328},{"text":"if I gave you block 0 with size 4, you'd say oh that should be merged with block 4","width":424},{"text":"okay have I given you enough examples yet to see how we can determine which two blocks should be merged together","width":479},{"text":"I'm using exclusive or","width":534},{"text":"I'm xoring with the block number, the size","width":458},{"text":"so for example, here's block 8 of size 4","width":373},{"text":"8 xored with 4 is 12","width":438},{"text":"I'm flipping the lowest bit","width":289},{"text":"in the block number","width":629},{"text":"and eventually in my little example here","width":483},{"text":"I merge 8 with size 8, with 0 with size 8","width":528},{"text":"one of these will come in last","width":151},{"text":"and I'll do the final merge and say oh look here's all the data I needed to merge, I'm done, I can start writing out the data","width":693},{"text":"if that is too complicated to turn into code","width":260},{"text":"I have two advices","width":219},{"text":"that's okay!","width":284},{"text":"take CS 373 473 then your brain will explode ","width":581},{"text":"learn about things like topological sort which I can't spell this morning","width":450},{"text":"and that's okay you'll remember this lecture with fondness, oh that was so easy compared to this","width":442},{"text":"topological sort is when you start to think about dependencies between actions and it has some relevance to this task in hand","width":518},{"text":"but you don't need, the other piece of advice is don't panic, you don't need to go this far to beat the naive TA's solution","width":554},{"text":"okay so let's turn ourselves back to some of these questions","width":535},{"text":"right some of these I will not address today, I'll talk about them on Friday, remember you are getting points for learning and not simply printing out the right answer","width":621},{"text":"let's do which scheduling algorithm describes the smallest average wait time?","width":661},{"text":"results in the smallest average wait time, the answer here is going to be preemptive shortest job first","width":630},{"text":"why? well you can construct examples where we might have a very long job","width":343},{"text":"and a whole sequence of small jobs and if you did that, the long job you want to put at the very end","width":576},{"text":"otherwise it holds up everybody else, it holds up all of the other processes waiting to run","width":508},{"text":"so how do we assure that the longest job is put at the very end? answer: shortest job first, yes!","width":571},{"text":"preemptive priority you would have to make sure the priorities are based on the length of the job which is not necessarily true","width":882},{"text":"the longest average response time, what's response time? well think about a webserver, a webserver might start giving you some packets, some results pretty early on","width":649},{"text":"but it might take several more milliseconds before you get the full response, we care about how early can we get the beginning, how long do we have to wait before we start to see some output? just the early output","width":1099},{"text":"right so what's the longest average response time? first come first serve could give us a long average response time","width":667},{"text":"because the very last job submitted is not going to give us a response until finally all of the other processes have completed","width":789},{"text":"if we wanted a fast response time, what we should do is give each process access to the CPU as early as possible","width":502},{"text":"so what's an example of doing that? round robin yes!","width":210},{"text":"so round robin with a nice short preemptive, nice short quanta so that each gets to do some meaningful amount of work and start generating output","width":749},{"text":"okay minimizes response time round robin, waiting time shortest job first, total response time so this is response time of course all processes again round robin would be useful here","width":1025},{"text":"how am i doing for time? right","width":310},{"text":"the other questions I will address on Friday","width":372},{"text":"I will mention I'll just finish with one important idea","width":479},{"text":"right psychological research has shown that if you want to learn stuff, if you want to remember stuff, the most important thing you can do is remember stuff","width":477},{"text":"what do we mean by that? is use your long term memory? how do i do that? easy start with a blank piece of paper, write down everything you know about every topic inside CS241","width":686},{"text":"tomorrow, come back to the same piece of paper and write down more, do not use your notes, just write down more","width":453},{"text":"if you vaguely remember something put some question marks and some helpful hints","width":217},{"text":"the third day, do the same again","width":210},{"text":"the fourth day give up and yeah use your notes","width":154},{"text":"but you will discover that in trying to remember things, in actually exercising your brain","width":349},{"text":"stuff we start to come out of it in drips and drabs at first but it will actually ensure that you have a long term understanding of this material","width":604},{"text":"and with that have a wonderful week I'll see you on Friday!","width":221}],
];

if (typeof module !== 'undefined') {
  module.exports = videoCaptions;
}